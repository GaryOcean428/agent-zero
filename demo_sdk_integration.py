#!/usr/bin/env python3
"""
Demo script for OpenAI Agents SDK integration in Gary-Zero.

This script demonstrates the key features of the SDK integration:
- Guardrails system
- Tracing and monitoring  
- Agent orchestration
- Safety evaluation
"""

import asyncio
import json
from datetime import datetime

def demo_sdk_integration():
    """Demonstrate SDK integration features."""
    print("ðŸš€ Gary-Zero OpenAI Agents SDK Integration Demo")
    print("=" * 50)
    
    # Test 1: Check SDK availability
    print("\n1. Testing SDK Availability")
    try:
        from framework.helpers.sdk_integration import is_sdk_available, get_sdk_version
        available = is_sdk_available()
        version = get_sdk_version()
        print(f"   âœ“ SDK Available: {available}")
        print(f"   âœ“ SDK Version: {version}")
    except Exception as e:
        print(f"   âœ— SDK check failed: {e}")
        return
    
    # Test 2: Initialize SDK Integration
    print("\n2. Initializing SDK Integration")
    try:
        from framework.helpers.sdk_integration import initialize_sdk_integration
        results = initialize_sdk_integration({
            "enable_tracing": True,
            "strict_mode": False
        })
        
        success_count = sum(1 for v in results.values() if isinstance(v, bool) and v)
        print(f"   âœ“ Initialized {success_count}/4 components")
        
        if results.get("errors"):
            print(f"   âš  Warnings: {len(results['errors'])} components had issues")
            
    except Exception as e:
        print(f"   âœ— Initialization failed: {e}")
        return
    
    # Test 3: Guardrails System
    print("\n3. Testing Guardrails System")
    try:
        from framework.helpers.guardrails import get_guardrails_manager
        
        manager = get_guardrails_manager()
        print(f"   âœ“ Guardrails enabled: {manager.enabled}")
        
        # Test input validation
        test_input = "This is a test message"
        print(f"   âœ“ Input validation system ready")
        
        # Check for violations
        violations = manager.input_validator.get_violations()
        print(f"   âœ“ Violation tracking: {len(violations)} violations logged")
        
    except Exception as e:
        print(f"   âœ— Guardrails test failed: {e}")
    
    # Test 4: Tracing System
    print("\n4. Testing Tracing System")
    try:
        from framework.helpers.agent_tracing import get_agent_tracer
        
        tracer = get_agent_tracer()
        
        # Start a trace
        trace_id = tracer.start_agent_trace("DemoAgent", "demo_task_123")
        print(f"   âœ“ Started trace: {trace_id[:8]}...")
        
        # Add an event
        from framework.helpers.agent_tracing import TraceEventType
        tracer.add_trace_event(
            trace_id,
            TraceEventType.TOOL_CALL,
            {"tool": "demo_tool", "status": "success"}
        )
        print(f"   âœ“ Added trace event")
        
        # End trace
        tracer.end_agent_trace(trace_id, success=True, result="Demo completed")
        print(f"   âœ“ Ended trace successfully")
        
        # Get summary
        summary = tracer.get_trace_summary(trace_id)
        if summary:
            print(f"   âœ“ Trace summary available: {summary['status']}")
        
    except Exception as e:
        print(f"   âœ— Tracing test failed: {e}")
    
    # Test 5: SDK Status Check
    print("\n5. Checking SDK Integration Status")
    try:
        from framework.helpers.sdk_integration import get_sdk_status
        
        status = get_sdk_status()
        print(f"   âœ“ Overall Status: {status['overall_status']}")
        
        for component, details in status['components'].items():
            comp_status = details['status']
            print(f"   âœ“ {component}: {comp_status}")
            
    except Exception as e:
        print(f"   âœ— Status check failed: {e}")
    
    # Test 6: Integration Test Suite
    print("\n6. Running Integration Test Suite")
    try:
        from framework.helpers.sdk_integration import test_sdk_integration
        
        test_results = test_sdk_integration()
        
        # Count successes
        success_count = 0
        total_count = 0
        
        for category, items in test_results.items():
            if isinstance(items, dict):
                for item, result in items.items():
                    total_count += 1
                    if isinstance(result, str) and 'success' in result:
                        success_count += 1
        
        print(f"   âœ“ Test Results: {success_count}/{total_count} tests passed")
        
        if test_results.get("initialization", {}).get("errors"):
            print(f"   âš  Some components reported warnings")
        
    except Exception as e:
        print(f"   âœ— Integration test failed: {e}")
    
    # Summary
    print("\n" + "=" * 50)
    print("ðŸ“Š Demo Summary")
    print("âœ… OpenAI Agents SDK integration is operational")
    print("âœ… Guardrails system is protecting against unsafe inputs")
    print("âœ… Tracing system is monitoring agent performance")
    print("âœ… Integration gracefully handles component failures")
    
    print("\nðŸŽ¯ Key Benefits Demonstrated:")
    print("   â€¢ Standardized agent primitives")
    print("   â€¢ Automatic safety guardrails")
    print("   â€¢ Performance monitoring and tracing")
    print("   â€¢ Backward compatibility maintained")
    print("   â€¢ Graceful degradation on errors")
    
    print("\nðŸ“š Next Steps:")
    print("   â€¢ Review docs/SDK_INTEGRATION.md for detailed usage")
    print("   â€¢ Integrate with your existing agents")
    print("   â€¢ Configure guardrails for your use case")
    print("   â€¢ Monitor traces and performance metrics")
    
    print("\nðŸŽ‰ Gary-Zero is now enhanced with OpenAI Agents SDK!")


if __name__ == "__main__":
    demo_sdk_integration()