name: Railpack Configuration Validation

on:
  pull_request:
    branches: ['main', 'develop']
    paths:
      - 'railpack.json'
      - '.github/schemas/railpack.schema.json'
      - 'scripts/**'
  push:
    branches: ['main']
    paths:
      - 'railpack.json'
      - '.github/schemas/railpack.schema.json'
      - 'scripts/**'
  workflow_dispatch:

jobs:
  validate-railpack:
    name: Validate Railpack Configuration
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js for validation tools
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install JSON Schema validation tools
      run: |
        npm install -g ajv-cli
        pip install check-jsonschema
        echo "‚úÖ Installed JSON Schema validation tools"
        echo "AJV version: $(ajv --version)"
        echo "check-jsonschema version: $(check-jsonschema --version)"
        
    - name: Validate railpack.json exists
      run: |
        echo "üîç Checking for railpack.json..."
        if [ ! -f "railpack.json" ]; then
          echo "‚ùå ERROR: railpack.json not found in repository root"
          exit 1
        fi
        echo "‚úÖ railpack.json found"
        
    - name: Validate JSON Schema exists
      run: |
        echo "üîç Checking for JSON Schema..."
        if [ ! -f ".github/schemas/railpack.schema.json" ]; then
          echo "‚ùå ERROR: railpack.schema.json not found in .github/schemas/"
          exit 1
        fi
        echo "‚úÖ railpack.schema.json found"
        
    - name: Validate JSON syntax
      run: |
        echo "üîç Validating JSON syntax..."
        
        # Validate railpack.json syntax
        if ! jq empty railpack.json 2>/dev/null; then
          echo "‚ùå ERROR: railpack.json has invalid JSON syntax"
          echo "JSON syntax errors:"
          jq empty railpack.json 2>&1 || true
          exit 1
        fi
        echo "‚úÖ railpack.json has valid JSON syntax"
        
        # Validate schema syntax
        if ! jq empty .github/schemas/railpack.schema.json 2>/dev/null; then
          echo "‚ùå ERROR: railpack.schema.json has invalid JSON syntax"
          echo "JSON syntax errors:"
          jq empty .github/schemas/railpack.schema.json 2>&1 || true
          exit 1
        fi
        echo "‚úÖ railpack.schema.json has valid JSON syntax"
        
    - name: Validate against JSON Schema (AJV)
      run: |
        echo "üîç Validating railpack.json against schema using AJV..."
        
        if ajv validate \
          --spec=draft7 \
          --schema=.github/schemas/railpack.schema.json \
          --data=railpack.json \
          --verbose; then
          echo "‚úÖ AJV validation passed"
        else
          echo "‚ùå AJV validation failed"
          exit 1
        fi
        
    - name: Validate against JSON Schema (check-jsonschema)
      run: |
        echo "üîç Validating railpack.json against schema using check-jsonschema..."
        
        if check-jsonschema \
          --verbose \
          --schemafile .github/schemas/railpack.schema.json \
          railpack.json; then
          echo "‚úÖ check-jsonschema validation passed"
        else
          echo "‚ùå check-jsonschema validation failed"
          exit 1
        fi
        
    - name: Validate required fields
      run: |
        echo "üîç Validating required fields..."
        
        VALIDATION_ERRORS=0
        
        # Check builder field
        BUILDER=$(jq -r '.builder' railpack.json)
        if [ "$BUILDER" = "null" ] || [ -z "$BUILDER" ]; then
          echo "‚ùå ERROR: 'builder' field is missing or empty"
          VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
        elif [ "$BUILDER" != "NIXPACKS" ] && [ "$BUILDER" != "DOCKERFILE" ] && [ "$BUILDER" != "BUILDPACKS" ]; then
          echo "‚ùå ERROR: 'builder' must be one of: NIXPACKS, DOCKERFILE, BUILDPACKS (got: $BUILDER)"
          VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
        else
          echo "‚úÖ builder field valid: $BUILDER"
        fi
        
        # Check buildCommand field
        BUILD_COMMAND=$(jq -r '.buildCommand' railpack.json)
        if [ "$BUILD_COMMAND" = "null" ] || [ -z "$BUILD_COMMAND" ]; then
          echo "‚ùå ERROR: 'buildCommand' field is missing or empty"
          VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
        else
          echo "‚úÖ buildCommand field present: $BUILD_COMMAND"
        fi
        
        # Check startCommand field
        START_COMMAND=$(jq -r '.startCommand' railpack.json)
        if [ "$START_COMMAND" = "null" ] || [ -z "$START_COMMAND" ]; then
          echo "‚ùå ERROR: 'startCommand' field is missing or empty"
          VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
        else
          echo "‚úÖ startCommand field present: $START_COMMAND"
        fi
        
        # Check healthcheckPath field
        HEALTHCHECK_PATH=$(jq -r '.healthcheckPath' railpack.json)
        if [ "$HEALTHCHECK_PATH" = "null" ] || [ -z "$HEALTHCHECK_PATH" ]; then
          echo "‚ùå ERROR: 'healthcheckPath' field is missing or empty"
          VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
        elif [[ ! "$HEALTHCHECK_PATH" =~ ^/.* ]]; then
          echo "‚ùå ERROR: 'healthcheckPath' must start with '/' (got: $HEALTHCHECK_PATH)"
          VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
        else
          echo "‚úÖ healthcheckPath field valid: $HEALTHCHECK_PATH"
        fi
        
        if [ $VALIDATION_ERRORS -gt 0 ]; then
          echo ""
          echo "‚ùå $VALIDATION_ERRORS validation error(s) found"
          exit 1
        fi
        
        echo "‚úÖ All required fields validation passed"
        
    - name: Validate PORT environment variable usage
      run: |
        echo "üîç Validating PORT environment variable usage..."
        
        VALIDATION_ERRORS=0
        PORT_FOUND=false
        
        # Check if PORT is in environment section
        PORT_ENV=$(jq -r '.environment.PORT' railpack.json 2>/dev/null || echo "null")
        if [ "$PORT_ENV" != "null" ]; then
          if [ "$PORT_ENV" = '${PORT}' ]; then
            echo "‚úÖ PORT environment variable properly configured: $PORT_ENV"
            PORT_FOUND=true
          else
            echo "‚ùå ERROR: PORT environment variable must be set to '\${PORT}' (got: $PORT_ENV)"
            VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
          fi
        fi
        
        # Check if scripts reference PORT (they should)
        START_COMMAND=$(jq -r '.startCommand' railpack.json)
        if [[ "$START_COMMAND" =~ scripts/ ]]; then
          echo "‚úÖ Start command uses scripts - checking for PORT references in scripts..."
          
          # Check if any script files reference PORT
          if grep -r "PORT" scripts/ >/dev/null 2>&1; then
            echo "‚úÖ Scripts reference PORT environment variable"
            PORT_FOUND=true
          else
            echo "‚ö†Ô∏è  WARNING: No PORT references found in scripts"
          fi
        fi
        
        if [ "$PORT_FOUND" = false ]; then
          echo "‚ùå ERROR: No valid PORT environment variable usage found"
          echo "   Either set environment.PORT to '\${PORT}' or ensure scripts reference \$PORT"
          VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
        fi
        
        if [ $VALIDATION_ERRORS -gt 0 ]; then
          echo ""
          echo "‚ùå PORT validation failed"
          exit 1
        fi
        
        echo "‚úÖ PORT environment variable validation passed"
        
    - name: Validate script files exist
      run: |
        echo "üîç Validating referenced script files exist..."
        
        VALIDATION_ERRORS=0
        
        # Extract commands that reference scripts
        BUILD_COMMAND=$(jq -r '.buildCommand' railpack.json)
        START_COMMAND=$(jq -r '.startCommand' railpack.json)
        
        # Check if build command references script files
        if [[ "$BUILD_COMMAND" =~ scripts/ ]]; then
          SCRIPT_FILE=$(echo "$BUILD_COMMAND" | grep -o 'scripts/[^[:space:]]*' | head -1)
          if [ ! -f "$SCRIPT_FILE" ]; then
            echo "‚ùå ERROR: Build script not found: $SCRIPT_FILE"
            VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
          else
            echo "‚úÖ Build script exists: $SCRIPT_FILE"
            # Check if script is executable
            if [ ! -x "$SCRIPT_FILE" ]; then
              echo "‚ö†Ô∏è  WARNING: Build script is not executable: $SCRIPT_FILE"
            fi
          fi
        fi
        
        # Check if start command references script files
        if [[ "$START_COMMAND" =~ scripts/ ]]; then
          SCRIPT_FILE=$(echo "$START_COMMAND" | grep -o 'scripts/[^[:space:]]*' | head -1)
          if [ ! -f "$SCRIPT_FILE" ]; then
            echo "‚ùå ERROR: Start script not found: $SCRIPT_FILE"
            VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
          else
            echo "‚úÖ Start script exists: $SCRIPT_FILE"
            # Check if script is executable
            if [ ! -x "$SCRIPT_FILE" ]; then
              echo "‚ö†Ô∏è  WARNING: Start script is not executable: $SCRIPT_FILE"
            fi
          fi
        fi
        
        if [ $VALIDATION_ERRORS -gt 0 ]; then
          echo ""
          echo "‚ùå Script validation failed"
          exit 1
        fi
        
        echo "‚úÖ Script files validation passed"
        
    - name: Generate validation summary
      if: always()
      run: |
        echo ""
        echo "üìã Railpack Validation Summary"
        echo "=============================="
        echo "Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        echo "File: railpack.json"
        echo "Schema: .github/schemas/railpack.schema.json"
        echo ""
        
        # Display configuration summary
        echo "Configuration Summary:"
        echo "---------------------"
        echo "Builder: $(jq -r '.builder' railpack.json)"
        echo "Build Command: $(jq -r '.buildCommand' railpack.json)"
        echo "Start Command: $(jq -r '.startCommand' railpack.json)"
        echo "Health Check Path: $(jq -r '.healthcheckPath' railpack.json)"
        echo "Health Check Timeout: $(jq -r '.healthcheckTimeout // "not set"' railpack.json)"
        echo ""
        
        # Display environment variables
        echo "Environment Variables:"
        echo "---------------------"
        jq -r '.environment | to_entries[] | "  \(.key) = \(.value)"' railpack.json || echo "  None configured"
        echo ""
        
        echo "‚úÖ Railpack configuration validation completed successfully!"
        
    - name: Add PR comment on failure
      if: failure() && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const body = `## ‚ùå Railpack Validation Failed
          
          The \`railpack.json\` configuration file failed validation. Please check the workflow logs for details.
          
          ### Common Issues:
          - Missing required fields: \`builder\`, \`buildCommand\`, \`startCommand\`, \`healthcheckPath\`
          - Invalid \`builder\` value (must be: NIXPACKS, DOCKERFILE, or BUILDPACKS)
          - Missing or incorrect PORT environment variable reference
          - Health check path doesn't start with '/'
          - Referenced script files don't exist
          
          ### What to check:
          1. Ensure all required fields are present
          2. Verify PORT is referenced as \`\${PORT}\` in environment section or in scripts
          3. Confirm health check path starts with '/'
          4. Make sure referenced script files exist and are executable
          
          Please fix the issues and push your changes to trigger validation again.`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });
