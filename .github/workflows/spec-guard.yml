# Specification Update Guard
# Ensures PRs that modify core functionality also update specifications

name: Spec Update Guard

on:
  pull_request:
    types: [opened, synchronize, ready_for_review]
    branches: [main]

jobs:
  spec-guard:
    name: Specification Update Guard
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v40
      with:
        files: |
          framework/**
          python/**
          shared_mcp/**
          models.py
          agent.py
          initialize.py
        files_ignore: |
          **/*.md
          **/*.txt
          **/*.log
          **/__pycache__/**
          **/*.pyc
          **/tests/**
          **/test_**
        
    - name: Get spec files
      id: spec-files
      uses: tj-actions/changed-files@v40
      with:
        files: |
          specs/**
          .agent-os/specs/**
          docs/**.md
          
    - name: Check for spec updates
      if: steps.changed-files.outputs.any_changed == 'true'
      run: |
        echo "üîç Checking specification update requirements..."
        echo ""
        
        # Count changed core files
        CORE_FILES_COUNT=$(echo "${{ steps.changed-files.outputs.all_changed_files }}" | wc -w)
        SPEC_FILES_COUNT=$(echo "${{ steps.spec-files.outputs.all_changed_files }}" | wc -w)
        
        echo "üìä Change Summary:"
        echo "  ‚Ä¢ Core functionality files changed: $CORE_FILES_COUNT"
        echo "  ‚Ä¢ Specification files updated: $SPEC_FILES_COUNT"
        echo ""
        
        echo "üìÇ Changed core files:"
        for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
          echo "  ‚Ä¢ $file"
        done
        echo ""
        
        if [ "$SPEC_FILES_COUNT" -gt 0 ]; then
          echo "üìã Updated specification files:"
          for file in ${{ steps.spec-files.outputs.all_changed_files }}; do
            echo "  ‚Ä¢ $file"
          done
          echo ""
        fi
        
        # Determine if spec update is required
        REQUIRES_SPEC_UPDATE=false
        
        # Check for significant changes that require spec updates
        for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
          case "$file" in
            framework/tools/*)
              REQUIRES_SPEC_UPDATE=true
              echo "‚ö†Ô∏è  Tool changes detected: $file"
              ;;
            framework/helpers/*)
              if [[ "$file" == *"task_"* ]] || [[ "$file" == *"agent_"* ]] || [[ "$file" == *"memory"* ]]; then
                REQUIRES_SPEC_UPDATE=true
                echo "‚ö†Ô∏è  Core helper changes detected: $file"
              fi
              ;;
            shared_mcp/*)
              REQUIRES_SPEC_UPDATE=true
              echo "‚ö†Ô∏è  MCP protocol changes detected: $file"
              ;;
            models.py|agent.py)
              REQUIRES_SPEC_UPDATE=true
              echo "‚ö†Ô∏è  Core model/agent changes detected: $file"
              ;;
            framework/api/*)
              REQUIRES_SPEC_UPDATE=true
              echo "‚ö†Ô∏è  API changes detected: $file"
              ;;
          esac
        done
        
        echo ""
        
        if [ "$REQUIRES_SPEC_UPDATE" = true ]; then
          if [ "$SPEC_FILES_COUNT" -eq 0 ]; then
            echo "‚ùå SPECIFICATION UPDATE REQUIRED"
            echo ""
            echo "This PR modifies core functionality but doesn't include specification updates."
            echo ""
            echo "üìã Required Actions:"
            echo "  1. Review the changed files for new features or behavior changes"
            echo "  2. Update or create specifications in specs/ or .agent-os/specs/"
            echo "  3. Update relevant documentation in docs/"
            echo "  4. Consider updating the main README.md if user-facing changes exist"
            echo ""
            echo "üí° Specification Guidelines:"
            echo "  ‚Ä¢ Tool changes ‚Üí Update/create tool specifications"
            echo "  ‚Ä¢ API changes ‚Üí Update API documentation and specs"
            echo "  ‚Ä¢ Agent behavior ‚Üí Update agent coordination specs"
            echo "  ‚Ä¢ MCP changes ‚Üí Update MCP integration specs"
            echo ""
            echo "üîó Resources:"
            echo "  ‚Ä¢ Spec template: .agent-os/instructions/create-spec.md"
            echo "  ‚Ä¢ Spec directory: .agent-os/specs/README.md"
            echo "  ‚Ä¢ Documentation guide: docs/README.md"
            
            exit 1
          else
            echo "‚úÖ SPECIFICATION UPDATE DETECTED"
            echo ""
            echo "Good! This PR includes both core changes and specification updates."
            echo "The changes will be reviewed to ensure specifications are complete."
          fi
        else
          echo "‚úÖ NO SPECIFICATION UPDATE REQUIRED"
          echo ""
          echo "The changes in this PR don't require specification updates."
          echo "Only minor changes or non-functional modifications detected."
        fi

    - name: PR Comment - Spec Requirements
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const comment = `## üìã Specification Update Required
          
          This PR modifies core functionality but doesn't include the required specification updates.
          
          ### üîç Changes Detected
          Core functionality changes were found that require documentation updates to maintain consistency with the Agent-OS specification system.
          
          ### ‚úÖ Required Actions
          1. **Review Changes**: Analyze your modifications for new features or behavior changes
          2. **Update Specifications**: Create or update relevant specs in \`specs/\` or \`.agent-os/specs/\`
          3. **Update Documentation**: Ensure \`docs/\` reflects any user-facing changes
          4. **README Updates**: Update main README.md if needed for user-visible features
          
          ### üìö Resources
          - **Spec Template**: \`.agent-os/instructions/create-spec.md\`
          - **Spec Directory**: \`.agent-os/specs/README.md\`
          - **Documentation Guide**: \`docs/README.md\`
          
          ### üí° Guidelines
          - **Tool Changes** ‚Üí Update/create tool specifications
          - **API Changes** ‚Üí Update API documentation and specs  
          - **Agent Behavior** ‚Üí Update agent coordination specs
          - **MCP Changes** ‚Üí Update MCP integration specs
          
          Once you've added the necessary specification updates, the check will pass automatically.`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

    - name: Success summary
      if: success()
      run: |
        echo "üéâ Specification Guard Check Passed"
        echo ""
        echo "The PR meets specification update requirements:"
        if [ "${{ steps.changed-files.outputs.any_changed }}" = "true" ]; then
          if [ "${{ steps.spec-files.outputs.any_changed }}" = "true" ]; then
            echo "  ‚úÖ Core changes include specification updates"
          else
            echo "  ‚úÖ Changes don't require specification updates"
          fi
        else
          echo "  ‚úÖ No core functionality changes detected"
        fi
