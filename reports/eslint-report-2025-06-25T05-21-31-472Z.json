[{"filePath":"/home/braden/Desktop/Dev/zero/webui/components/settings/mcp/client/mcp-servers-store.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'ace' is not defined.","line":17,"column":22,"nodeType":"Identifier","messageId":"undef","endLine":17,"endColumn":25},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":52,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":52,"endColumn":20,"suggestions":[{"fix":{"range":[1421,1468],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-undef","severity":2,"message":"'settingsModalProxy' is not defined.","line":62,"column":12,"nodeType":"Identifier","messageId":"undef","endLine":62,"endColumn":30},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":115,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":115,"endColumn":20,"suggestions":[{"fix":{"range":[3011,3064],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-undef","severity":2,"message":"'openModal' is not defined.","line":128,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":128,"endColumn":16},{"ruleId":"no-undef","severity":2,"message":"'openModal' is not defined.","line":138,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":138,"endColumn":16}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createStore } from \"/js/AlpineStore.js\";\nimport { scrollModal } from \"/js/modals.js\";\nimport sleep from \"/js/sleep.js\";\nimport * as API from \"/js/api.js\";\n\nconst model = {\n  editor: null,\n  servers: [],\n  loading: true,\n  statusCheck: false,\n  serverLog: \"\",\n\n  async initialize() {\n    // Initialize the JSON Viewer after the modal is rendered\n    const container = document.getElementById(\"mcp-servers-config-json\");\n    if (container) {\n      const editor = ace.edit(\"mcp-servers-config-json\");\n\n      const dark = localStorage.getItem(\"darkMode\");\n      if (dark != \"false\") {\n        editor.setTheme(\"ace/theme/github_dark\");\n      } else {\n        editor.setTheme(\"ace/theme/tomorrow\");\n      }\n\n      editor.session.setMode(\"ace/mode/json\");\n      const json = this.getSettingsFieldConfigJson().value;\n      editor.setValue(json);\n      editor.clearSelection();\n      this.editor = editor;\n    }\n\n    this.startStatusCheck();\n  },\n\n  formatJson() {\n    try {\n      // get current content\n      const currentContent = this.editor.getValue();\n\n      // parse and format with 2 spaces indentation\n      const parsed = JSON.parse(currentContent);\n      const formatted = JSON.stringify(parsed, null, 2);\n\n      // update editor content\n      this.editor.setValue(formatted);\n      this.editor.clearSelection();\n\n      // move cursor to start\n      this.editor.navigateFileStart();\n    } catch (error) {\n      console.error(\"Failed to format JSON:\", error);\n      alert(\"Invalid JSON: \" + error.message);\n    }\n  },\n\n  getEditorValue() {\n    return this.editor.getValue();\n  },\n\n  getSettingsFieldConfigJson() {\n    return settingsModalProxy.settings.sections\n      .filter((x) => x.id == \"mcp_client\")[0]\n      .fields.filter((x) => x.id == \"mcp_servers\")[0];\n  },\n\n  onClose() {\n    const val = this.getEditorValue();\n    this.getSettingsFieldConfigJson().value = val;\n    this.stopStatusCheck();\n  },\n\n  async startStatusCheck() {\n    this.statusCheck = true;\n    let firstLoad = true;\n\n    while (this.statusCheck) {\n      await this._statusCheck();\n      if (firstLoad) {\n        this.loading = false;\n        firstLoad = false;\n      }\n      await sleep(3000);\n    }\n  },\n\n  async _statusCheck() {\n    const resp = await API.callJsonApi(\"mcp_servers_status\", null);\n    if (resp.success) {\n      this.servers = resp.status;\n      this.servers.sort((a, b) => a.name.localeCompare(b.name));\n    }\n  },\n\n  async stopStatusCheck() {\n    this.statusCheck = false;\n  },\n\n  async applyNow() {\n    if (this.loading) return;\n    this.loading = true;\n    try {\n      scrollModal(\"mcp-servers-status\");\n      const resp = await API.callJsonApi(\"mcp_servers_apply\", {\n        mcp_servers: this.getEditorValue(),\n      });\n      if (resp.success) {\n        this.servers = resp.status;\n        this.servers.sort((a, b) => a.name.localeCompare(b.name));\n      }\n      this.loading = false;\n      await sleep(100); // wait for ui and scroll\n      scrollModal(\"mcp-servers-status\");\n    } catch (error) {\n      console.error(\"Failed to apply MCP servers:\", error);\n      alert(\"Failed to apply MCP servers: \" + error.message);\n    }\n    this.loading = false;\n  },\n\n  async getServerLog(serverName) {\n    this.serverLog = \"\";\n    const resp = await API.callJsonApi(\"mcp_server_get_log\", {\n      server_name: serverName,\n    });\n    if (resp.success) {\n      this.serverLog = resp.log;\n      openModal(\"settings/mcp/client/mcp-servers-log.html\");\n    }\n  },\n\n  async onToolCountClick(serverName) {\n    const resp = await API.callJsonApi(\"mcp_server_get_detail\", {\n      server_name: serverName,\n    });\n    if (resp.success) {\n      this.serverDetail = resp.detail;\n      openModal(\"settings/mcp/client/mcp-server-tools.html\");\n    }\n  },\n};\n\nconst store = createStore(\"mcpServersStore\", model);\n\nexport { store };\n","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/zero/webui/index.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'container' is assigned a value but never used.","line":15,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":37},{"ruleId":"no-unused-vars","severity":2,"message":"'statusSection' is assigned a value but never used.","line":16,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":32},{"ruleId":"no-unused-vars","severity":2,"message":"'timeDate' is assigned a value but never used.","line":16,"column":93,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":101},{"ruleId":"no-unused-vars","severity":2,"message":"'leftPanel' is assigned a value but never used.","line":74,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":74,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"leftPanel"},"fix":{"range":[2109,2165],"text":""},"desc":"Remove unused variable 'leftPanel'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'rightPanel' is assigned a value but never used.","line":75,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":75,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"rightPanel"},"fix":{"range":[2170,2228],"text":""},"desc":"Remove unused variable 'rightPanel'."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":80,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":80,"endColumn":22,"suggestions":[{"fix":{"range":[2426,2475],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-undef","severity":2,"message":"'Alpine' is not defined.","line":89,"column":25,"nodeType":"Identifier","messageId":"undef","endLine":89,"endColumn":31},{"ruleId":"no-undef","severity":2,"message":"'URL' is not defined.","line":103,"column":34,"nodeType":"Identifier","messageId":"undef","endLine":103,"endColumn":37},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":179,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":179,"endColumn":18,"suggestions":[{"fix":{"range":[5845,5872],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":187,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":187,"endColumn":16,"suggestions":[{"fix":{"range":[5992,6042],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-undef","severity":2,"message":"'Event' is not defined.","line":196,"column":33,"nodeType":"Identifier","messageId":"undef","endLine":196,"endColumn":38},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":198,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":198,"endColumn":16,"suggestions":[{"fix":{"range":[6407,6465],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"prefer-const","severity":2,"message":"'file' is never reassigned. Use 'const' instead.","line":273,"column":18,"nodeType":"Identifier","messageId":"useConst","endLine":273,"endColumn":22,"fix":{"range":[9017,9025],"text":"const file"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":324,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":324,"endColumn":40,"fix":{"range":[10354,10357],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":325,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":325,"endColumn":49,"fix":{"range":[10394,10397],"text":"let"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":346,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":346,"endColumn":22,"suggestions":[{"fix":{"range":[11004,11062],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":371,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":371,"endColumn":26,"suggestions":[{"fix":{"range":[11616,11669],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-undef","severity":2,"message":"'Alpine' is not defined.","line":408,"column":25,"nodeType":"Identifier","messageId":"undef","endLine":408,"endColumn":31},{"ruleId":"no-undef","severity":2,"message":"'Alpine' is not defined.","line":417,"column":29,"nodeType":"Identifier","messageId":"undef","endLine":417,"endColumn":35},{"ruleId":"prefer-const","severity":2,"message":"'tasks' is never reassigned. Use 'const' instead.","line":418,"column":17,"nodeType":"Identifier","messageId":"useConst","endLine":418,"endColumn":22,"fix":{"range":[13322,13355],"text":"const tasks = response.tasks || [];"}},{"ruleId":"no-undef","severity":2,"message":"'Alpine' is not defined.","line":461,"column":33,"nodeType":"Identifier","messageId":"undef","endLine":461,"endColumn":39},{"ruleId":"no-undef","severity":2,"message":"'Alpine' is not defined.","line":481,"column":33,"nodeType":"Identifier","messageId":"undef","endLine":481,"endColumn":39},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":501,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":501,"endColumn":22,"suggestions":[{"fix":{"range":[17291,17322],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'resp' is assigned a value but never used.","line":547,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":547,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"resp"},"fix":{"range":[18337,18408],"text":""},"desc":"Remove unused variable 'resp'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'resp' is assigned a value but never used.","line":555,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":555,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"resp"},"fix":{"range":[18560,18656],"text":""},"desc":"Remove unused variable 'resp'."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":573,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":573,"endColumn":22,"suggestions":[{"fix":{"range":[19054,19104],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":577,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":577,"endColumn":16,"suggestions":[{"fix":{"range":[19132,19174],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-undef","severity":2,"message":"'Alpine' is not defined.","line":580,"column":25,"nodeType":"Identifier","messageId":"undef","endLine":580,"endColumn":31},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":581,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":581,"endColumn":20,"suggestions":[{"fix":{"range":[19246,19368],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":592,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":592,"endColumn":20,"suggestions":[{"fix":{"range":[19790,19910],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":601,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":601,"endColumn":22,"suggestions":[{"fix":{"range":[20124,20165],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-undef","severity":2,"message":"'Alpine' is not defined.","line":609,"column":25,"nodeType":"Identifier","messageId":"undef","endLine":609,"endColumn":31},{"ruleId":"no-undef","severity":2,"message":"'Alpine' is not defined.","line":639,"column":25,"nodeType":"Identifier","messageId":"undef","endLine":639,"endColumn":31},{"ruleId":"no-undef","severity":2,"message":"'Alpine' is not defined.","line":676,"column":25,"nodeType":"Identifier","messageId":"undef","endLine":676,"endColumn":31},{"ruleId":"no-undef","severity":2,"message":"'Alpine' is not defined.","line":679,"column":29,"nodeType":"Identifier","messageId":"undef","endLine":679,"endColumn":35},{"ruleId":"no-undef","severity":2,"message":"'Alpine' is not defined.","line":712,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":712,"endColumn":27},{"ruleId":"no-undef","severity":2,"message":"'Alpine' is not defined.","line":713,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":713,"endColumn":27},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":752,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":752,"endColumn":16,"suggestions":[{"fix":{"range":[25226,25260],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":757,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":757,"endColumn":16,"suggestions":[{"fix":{"range":[25355,25384],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'resp' is assigned a value but never used.","line":764,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":764,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"resp"},"fix":{"range":[25513,25580],"text":""},"desc":"Remove unused variable 'resp'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'resp' is assigned a value but never used.","line":777,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":777,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":778,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":778,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'resp' is assigned a value but never used.","line":787,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":787,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"resp"},"fix":{"range":[26229,26276],"text":""},"desc":"Remove unused variable 'resp'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":794,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":794,"endColumn":23},{"ruleId":"no-undef","severity":2,"message":"'toggleDarkMode' is not defined.","line":811,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":811,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'Blob' is not defined.","line":890,"column":22,"nodeType":"Identifier","messageId":"undef","endLine":890,"endColumn":26},{"ruleId":"no-undef","severity":2,"message":"'URL' is not defined.","line":896,"column":17,"nodeType":"Identifier","messageId":"undef","endLine":896,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'URL' is not defined.","line":907,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":907,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'FileReader' is not defined.","line":934,"column":40,"nodeType":"Identifier","messageId":"undef","endLine":934,"endColumn":50},{"ruleId":"no-undef","severity":2,"message":"'Alpine' is not defined.","line":1056,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":1056,"endColumn":27},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1090,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1090,"endColumn":26,"suggestions":[{"fix":{"range":[35947,35978],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":1116,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":1116,"endColumn":46,"suggestions":[{"messageId":"removeVar","data":{"varName":"e"},"fix":{"range":[36742,36743],"text":""},"desc":"Remove unused variable 'e'."}]},{"ruleId":"no-undef","severity":2,"message":"'Alpine' is not defined.","line":1119,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":1119,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":1124,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":1124,"endColumn":46,"suggestions":[{"messageId":"removeVar","data":{"varName":"e"},"fix":{"range":[36961,36962],"text":""},"desc":"Remove unused variable 'e'."}]},{"ruleId":"no-undef","severity":2,"message":"'Alpine' is not defined.","line":1127,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":1127,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'Alpine' is not defined.","line":1134,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":1134,"endColumn":15},{"ruleId":"no-undef","severity":2,"message":"'Alpine' is not defined.","line":1136,"column":25,"nodeType":"Identifier","messageId":"undef","endLine":1136,"endColumn":31},{"ruleId":"no-undef","severity":2,"message":"'FileReader' is not defined.","line":1150,"column":36,"nodeType":"Identifier","messageId":"undef","endLine":1150,"endColumn":46},{"ruleId":"no-undef","severity":2,"message":"'Alpine' is not defined.","line":1178,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":1178,"endColumn":27},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1195,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1195,"endColumn":28,"suggestions":[{"fix":{"range":[39282,39338],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1197,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1197,"endColumn":28,"suggestions":[{"fix":{"range":[39376,39406],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1202,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1202,"endColumn":24,"suggestions":[{"fix":{"range":[39478,39529],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1207,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1207,"endColumn":26,"suggestions":[{"fix":{"range":[39689,39771],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1217,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1217,"endColumn":16,"suggestions":[{"fix":{"range":[39968,40035],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1280,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1280,"endColumn":20,"suggestions":[{"fix":{"range":[42153,42195],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1298,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1298,"endColumn":22,"suggestions":[{"fix":{"range":[42637,42677],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-undef","severity":2,"message":"'Alpine' is not defined.","line":1335,"column":25,"nodeType":"Identifier","messageId":"undef","endLine":1335,"endColumn":31},{"ruleId":"no-undef","severity":2,"message":"'Alpine' is not defined.","line":1356,"column":25,"nodeType":"Identifier","messageId":"undef","endLine":1356,"endColumn":31},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1416,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1416,"endColumn":30,"suggestions":[{"fix":{"range":[47102,47174],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-undef","severity":2,"message":"'Alpine' is not defined.","line":1421,"column":31,"nodeType":"Identifier","messageId":"undef","endLine":1421,"endColumn":37},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1433,"column":25,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1433,"endColumn":38,"suggestions":[{"fix":{"range":[47870,47917],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-undef","severity":2,"message":"'Alpine' is not defined.","line":1438,"column":43,"nodeType":"Identifier","messageId":"undef","endLine":1438,"endColumn":49},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1443,"column":21,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1443,"endColumn":32,"suggestions":[{"fix":{"range":[48274,48331],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1447,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1447,"endColumn":26,"suggestions":[{"fix":{"range":[48491,48534],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1450,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1450,"endColumn":22,"suggestions":[{"fix":{"range":[48566,48604],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-undef","severity":2,"message":"'Alpine' is not defined.","line":1460,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":1460,"endColumn":27},{"ruleId":"no-undef","severity":2,"message":"'FileReader' is not defined.","line":1468,"column":32,"nodeType":"Identifier","messageId":"undef","endLine":1468,"endColumn":42}],"suppressedMessages":[],"errorCount":50,"fatalErrorCount":0,"warningCount":27,"fixableErrorCount":4,"fixableWarningCount":0,"source":"import * as msgs from \"./js/messages.js\";\nimport { speech } from \"./js/speech.js\";\n\n// Global functions that need to be available early for Alpine.js\nwindow.newChat = async function() {\n    try {\n        setContext(generateGUID());\n        updateAfterScroll();\n    } catch (e) {\n        window.toastFetchError(\"Error creating new chat\", e);\n    }\n};\n\n// These will be initialized after DOM is loaded\nlet leftPanel, rightPanel, container, chatInput, sendButton, chatHistory;\nlet inputSection, statusSection, chatsSection, tasksSection, progressBar, autoScrollSwitch, timeDate;\n\nlet autoScroll = true;\nlet context = \"\";\nlet connectionStatus = false\n\n\n// Initialize the toggle button\nsetupSidebarToggle();\n// Initialize tabs\nsetupTabs();\n\nfunction isMobile() {\n    return window.innerWidth <= 768;\n}\n\nfunction toggleSidebar(show) {\n    const overlay = document.getElementById('sidebar-overlay');\n    if (typeof show === 'boolean') {\n        leftPanel.classList.toggle('hidden', !show);\n        rightPanel.classList.toggle('expanded', !show);\n        overlay.classList.toggle('visible', show);\n    } else {\n        leftPanel.classList.toggle('hidden');\n        rightPanel.classList.toggle('expanded');\n        overlay.classList.toggle('visible', !leftPanel.classList.contains('hidden'));\n    }\n}\n\nfunction handleResize() {\n    const overlay = document.getElementById('sidebar-overlay');\n    \n    // Add null safety checks\n    if (!leftPanel || !rightPanel || !overlay) return;\n    \n    if (isMobile()) {\n        leftPanel.classList.add('hidden');\n        rightPanel.classList.add('expanded');\n        overlay.classList.remove('visible');\n    } else {\n        leftPanel.classList.remove('hidden');\n        rightPanel.classList.remove('expanded');\n        overlay.classList.remove('visible');\n    }\n}\n\n// Moved to DOMContentLoaded\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    const overlay = document.getElementById('sidebar-overlay');\n    overlay.addEventListener('click', () => {\n        if (isMobile()) {\n            toggleSidebar(false);\n        }\n    });\n});\n\nfunction setupSidebarToggle() {\n    const leftPanel = document.getElementById('left-panel');\n    const rightPanel = document.getElementById('right-panel');\n    const toggleSidebarButton = document.getElementById('toggle-sidebar');\n    if (toggleSidebarButton) {\n        toggleSidebarButton.addEventListener('click', toggleSidebar);\n    } else {\n        console.error('Toggle sidebar button not found');\n        setTimeout(setupSidebarToggle, 100);\n    }\n}\ndocument.addEventListener('DOMContentLoaded', setupSidebarToggle);\n\nexport async function sendMessage() {\n    try {\n        const message = chatInput.value.trim();\n        const inputAD = Alpine.$data(inputSection);\n        const attachments = inputAD.attachments;\n        const hasAttachments = attachments && attachments.length > 0;\n\n        if (message || hasAttachments) {\n            let response;\n            const messageId = generateGUID();\n\n            // Include attachments in the user message\n            if (hasAttachments) {\n                const attachmentsWithUrls = attachments.map(attachment => {\n                    if (attachment.type === 'image') {\n                        return {\n                            ...attachment,\n                            url: URL.createObjectURL(attachment.file)\n                        };\n                    } else {\n                        return {\n                            ...attachment\n                        };\n                    }\n                });\n\n                // Render user message with attachments\n                setMessage(messageId, 'user', '', message, false, {\n                    attachments: attachmentsWithUrls\n                });\n\n                const formData = new FormData();\n                formData.append('text', message);\n                formData.append('context', context);\n                formData.append('message_id', messageId);\n\n                for (let i = 0; i < attachments.length; i++) {\n                    formData.append('attachments', attachments[i].file);\n                }\n\n                response = await fetch('/message_async', {\n                    method: 'POST',\n                    body: formData\n                });\n            } else {\n                // For text-only messages\n                const data = {\n                    text: message,\n                    context,\n                    message_id: messageId\n                };\n                response = await fetch('/message_async', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify(data)\n                });\n            }\n\n            // Handle response\n            const jsonResponse = await response.json();\n            if (!jsonResponse) {\n                toast(\"No response returned.\", \"error\");\n            }\n            // else if (!jsonResponse.ok) {\n            //     if (jsonResponse.message) {\n            //         toast(jsonResponse.message, \"error\");\n            //     } else {\n            //         toast(\"Undefined error.\", \"error\");\n            //     }\n            // }\n            else {\n                setContext(jsonResponse.context);\n            }\n\n            // Clear input and attachments\n            chatInput.value = '';\n            inputAD.attachments = [];\n            inputAD.hasAttachments = false;\n            adjustTextareaHeight();\n        }\n    } catch (e) {\n        toastFetchError(\"Error sending message\", e)\n    }\n}\n\nfunction toastFetchError(text, error) {\n    if (getConnectionStatus()) {\n        toast(`${text}: ${error.message}`, \"error\");\n    } else {\n        toast(`${text} (it seems the backend is not running): ${error.message}`, \"error\");\n    }\n    console.error(text, error);\n}\nwindow.toastFetchError = toastFetchError\n\n// Moved to DOMContentLoaded\n\n\nexport function updateChatInput(text) {\n    console.log('updateChatInput called with:', text);\n\n    // Append text with proper spacing\n    const currentValue = chatInput.value;\n    const needsSpace = currentValue.length > 0 && !currentValue.endsWith(' ');\n    chatInput.value = currentValue + (needsSpace ? ' ' : '') + text + ' ';\n\n    // Adjust height and trigger input event\n    adjustTextareaHeight();\n    chatInput.dispatchEvent(new Event('input'));\n\n    console.log('Updated chat input value:', chatInput.value);\n}\n\nfunction updateUserTime() {\n    // Get the current date and time\n    const now = new Date();\n    let hours = now.getHours();\n    const minutes = now.getMinutes();\n    const seconds = now.getSeconds();\n    const ampm = hours >= 12 ? 'PM' : 'AM';\n\n    // Convert to 12-hour format\n    hours = hours % 12;\n    hours = hours ? hours : 12; // the hour '0' should be '12'\n    const formattedHours = hours < 10 ? '0' + hours : hours;\n\n    // Format the time\n    const timeString = `${formattedHours}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')} ${ampm}`;\n\n    // Format the date\n    const options = { year: 'numeric', month: 'short', day: 'numeric' };\n    const dateString = now.toLocaleDateString(undefined, options);\n\n    // Safely update the HTML if element exists\n    const userTimeElement = document.getElementById('time-date');\n    if (userTimeElement) {\n        userTimeElement.innerHTML = `${timeString}<br><span id=\"user-date\">${dateString}</span>`;\n    }\n}\n\nupdateUserTime();\nsetInterval(updateUserTime, 1000);\n\n\nfunction setMessage(id, type, heading, content, temp, kvps = null) {\n    // Search for the existing message container by id\n    let messageContainer = document.getElementById(`message-${id}`);\n\n    if (messageContainer) {\n        // Don't re-render user messages\n        if (type === 'user') {\n            return; // Skip re-rendering\n        }\n        // For other types, update the message\n        messageContainer.innerHTML = '';\n    } else {\n        // Create a new container if not found\n        const sender = type === 'user' ? 'user' : 'ai';\n        messageContainer = document.createElement('div');\n        messageContainer.id = `message-${id}`;\n        messageContainer.classList.add('message-container', `${sender}-container`);\n        if (temp) messageContainer.classList.add(\"message-temp\");\n    }\n\n    const handler = msgs.getHandler(type);\n    handler(messageContainer, id, type, heading, content, temp, kvps);\n\n    // If the container was found, it was already in the DOM, no need to append again\n    if (!document.getElementById(`message-${id}`)) {\n        chatHistory.appendChild(messageContainer);\n    }\n\n    if (autoScroll) chatHistory.scrollTop = chatHistory.scrollHeight;\n}\n\n\nwindow.loadKnowledge = async function () {\n    const input = document.createElement('input');\n    input.type = 'file';\n    input.accept = '.txt,.pdf,.csv,.html,.json,.md';\n    input.multiple = true;\n\n    input.onchange = async () => {\n        try{\n        const formData = new FormData();\n        for (let file of input.files) {\n            formData.append('files[]', file);\n        }\n\n        formData.append('ctxid', getContext());\n\n        const response = await fetch('/import_knowledge', {\n            method: 'POST',\n            body: formData,\n        });\n\n        if (!response.ok) {\n            toast(await response.text(), \"error\");\n        } else {\n            const data = await response.json();\n            toast(\"Knowledge files imported: \" + data.filenames.join(\", \"), \"success\");\n        }\n        } catch (e) {\n            toastFetchError(\"Error loading knowledge\", e)\n        }\n    };\n\n    input.click();\n}\n\n\nfunction adjustTextareaHeight() {\n    chatInput.style.height = 'auto';\n    chatInput.style.height = (chatInput.scrollHeight) + 'px';\n}\n\nexport const sendJsonData = async function (url, data) {\n    const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n    });\n\n    if (!response.ok) {\n        const error = await response.text();\n        throw new Error(error);\n    }\n    const jsonResponse = await response.json();\n    return jsonResponse;\n}\nwindow.sendJsonData = sendJsonData\n\nfunction generateGUID() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = Math.random() * 16 | 0;\n        var v = c === 'x' ? r : (r & 0x3 | 0x8);\n        return v.toString(16);\n    });\n}\n\nfunction getConnectionStatus() {\n    return connectionStatus\n}\n\nfunction setConnectionStatus(connected) {\n    connectionStatus = connected;\n    try {\n        // Safely get the status icon if it exists\n        const timeDateEl = document.getElementById('time-date');\n        if (timeDateEl) {\n            const statusIcon = timeDateEl.querySelector('.status-icon');\n            if (statusIcon && statusIcon.__x) {\n                statusIcon.__x.$data.connected = connected;\n            }\n        }\n    } catch (error) {\n        console.error('Error updating connection status:', error);\n    }\n}\n\nlet lastLogVersion = 0;\nlet lastLogGuid = \"\"\nlet lastSpokenNo = 0\n\nasync function poll() {\n    let updated = false\n    try {\n        // Get timezone from navigator\n        const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n\n        const response = await sendJsonData(\n            \"/poll\",\n            {\n                log_from: lastLogVersion,\n                context: context || null,\n                timezone: timezone\n            }\n        );\n\n        // Check if the response is valid\n        if (!response) {\n            console.error(\"Invalid response from poll endpoint\");\n            return false;\n        }\n\n        if (!context) setContext(response.context)\n        if (response.context != context) return //skip late polls after context change\n\n        if (lastLogGuid != response.log_guid) {\n            if (chatHistory) {\n                chatHistory.innerHTML = \"\"\n            }\n            lastLogVersion = 0\n        }\n\n        if (lastLogVersion != response.log_version) {\n            updated = true\n            for (const log of response.logs) {\n                const messageId = log.id || log.no; // Use log.id if available\n                setMessage(messageId, log.type, log.heading, log.content, log.temp, log.kvps);\n            }\n            afterMessagesUpdate(response.logs)\n        }\n\n        lastLogVersion = response.log_version;\n        lastLogGuid = response.log_guid;\n\n        updateProgress(response.log_progress, response.log_progress_active)\n\n        //set ui model vars from backend\n        if (inputSection && inputSection.__x) {\n            inputSection.__x.$data.paused = response.paused;\n        }\n\n        // Update status icon state\n        setConnectionStatus(true)\n\n        // Update chats list and sort by created_at time (newer first)\n        const chatsAD = Alpine.$data(chatsSection);\n        const contexts = response.contexts || [];\n        chatsAD.contexts = contexts.sort((a, b) =>\n            (b.created_at || 0) - (a.created_at || 0)\n        );\n\n        // Update tasks list and sort by creation time (newer first)\n        const tasksSection = document.getElementById('tasks-section');\n        if (tasksSection) {\n            const tasksAD = Alpine.$data(tasksSection);\n            let tasks = response.tasks || [];\n\n            // Always update tasks to ensure state changes are reflected\n            if (tasks.length > 0) {\n                // Sort the tasks by creation time\n                const sortedTasks = [...tasks].sort((a, b) =>\n                    (b.created_at || 0) - (a.created_at || 0)\n                );\n\n                // Assign the sorted tasks to the Alpine data\n                tasksAD.tasks = sortedTasks;\n            } else {\n                // Make sure to use a new empty array instance\n                tasksAD.tasks = [];\n            }\n        }\n\n        // Make sure the active context is properly selected in both lists\n        if (context) {\n            // Update selection in the active tab\n            const activeTab = localStorage.getItem('activeTab') || 'chats';\n\n            if (activeTab === 'chats') {\n                chatsAD.selected = context;\n                localStorage.setItem('lastSelectedChat', context);\n\n                // Check if this context exists in the chats list\n                const contextExists = contexts.some(ctx => ctx.id === context);\n\n                // If it doesn't exist in the chats list but we're in chats tab, try to select the first chat\n                if (!contextExists && contexts.length > 0) {\n                    // Check if the current context is empty before creating a new one\n                    // If there's already a current context and we're just updating UI, don't automatically\n                    // create a new context by calling setContext\n                    const firstChatId = contexts[0].id;\n\n                    // Only create a new context if we're not currently in an existing context\n                    // This helps prevent duplicate contexts when switching tabs\n                    setContext(firstChatId);\n                    chatsAD.selected = firstChatId;\n                    localStorage.setItem('lastSelectedChat', firstChatId);\n                }\n            } else if (activeTab === 'tasks' && tasksSection) {\n                const tasksAD = Alpine.$data(tasksSection);\n                tasksAD.selected = context;\n                localStorage.setItem('lastSelectedTask', context);\n\n                // Check if this context exists in the tasks list\n                const taskExists = response.tasks?.some(task => task.id === context);\n\n                // If it doesn't exist in the tasks list but we're in tasks tab, try to select the first task\n                if (!taskExists && response.tasks?.length > 0) {\n                    const firstTaskId = response.tasks[0].id;\n                    setContext(firstTaskId);\n                    tasksAD.selected = firstTaskId;\n                    localStorage.setItem('lastSelectedTask', firstTaskId);\n                }\n            }\n        } else if (response.tasks && response.tasks.length > 0 && localStorage.getItem('activeTab') === 'tasks') {\n            // If we're in tasks tab with no selection but have tasks, select the first one\n            const firstTaskId = response.tasks[0].id;\n            setContext(firstTaskId);\n            if (tasksSection) {\n                const tasksAD = Alpine.$data(tasksSection);\n                tasksAD.selected = firstTaskId;\n                localStorage.setItem('lastSelectedTask', firstTaskId);\n            }\n        } else if (contexts.length > 0 && localStorage.getItem('activeTab') === 'chats') {\n            // If we're in chats tab with no selection but have chats, select the first one\n            const firstChatId = contexts[0].id;\n\n            // Only set context if we don't already have one to avoid duplicates\n            if (!context) {\n                setContext(firstChatId);\n                chatsAD.selected = firstChatId;\n                localStorage.setItem('lastSelectedChat', firstChatId);\n            }\n        }\n\n        lastLogVersion = response.log_version;\n        lastLogGuid = response.log_guid;\n\n    } catch (error) {\n        console.error('Error:', error);\n        setConnectionStatus(false)\n    }\n\n    return updated\n}\n\nfunction afterMessagesUpdate(logs) {\n    if (localStorage.getItem('speech') == 'true') {\n        speakMessages(logs)\n    }\n}\n\nfunction speakMessages(logs) {\n    // log.no, log.type, log.heading, log.content\n    for (let i = logs.length - 1; i >= 0; i--) {\n        const log = logs[i]\n        if (log.type == \"response\") {\n            if (log.no > lastSpokenNo) {\n                lastSpokenNo = log.no\n                speech.speak(log.content)\n                return\n            }\n        }\n    }\n}\n\nfunction updateProgress(progress, active) {\n    if (!progress) progress = \"\"\n    \n    // Add null safety check\n    if (!progressBar) return;\n\n    if (!active) {\n        removeClassFromElement(progressBar, \"shiny-text\")\n    } else {\n        addClassToElement(progressBar, \"shiny-text\")\n    }\n\n    if (progressBar.innerHTML != progress) {\n        progressBar.innerHTML = progress\n    }\n}\n\nwindow.pauseAgent = async function (paused) {\n    try {\n        const resp = await sendJsonData(\"/pause\", { paused: paused, context });\n    } catch (e) {\n        window.toastFetchError(\"Error pausing agent\", e)\n    }\n}\n\nwindow.resetChat = async function (ctxid=null) {\n    try {\n        const resp = await sendJsonData(\"/chat_reset\", { \"context\": ctxid === null ? context : ctxid });\n        if (ctxid === null) updateAfterScroll();\n    } catch (e) {\n        window.toastFetchError(\"Error resetting chat\", e);\n    }\n}\n\nwindow.newChat = async function () {\n    try {\n        setContext(generateGUID());\n        updateAfterScroll()\n    } catch (e) {\n        window.toastFetchError(\"Error creating new chat\", e)\n    }\n}\n\nwindow.killChat = async function (id) {\n    if (!id) {\n        console.error(\"No chat ID provided for deletion\");\n        return;\n    }\n\n    console.log(\"Deleting chat with ID:\", id);\n\n    try {\n        const chatsAD = Alpine.$data(chatsSection);\n        console.log(\"Current contexts before deletion:\", JSON.stringify(chatsAD.contexts.map(c => ({ id: c.id, name: c.name }))));\n\n        // switch to another context if deleting current\n        switchFromContext(id);\n\n        // Delete the chat on the server\n        await sendJsonData(\"/chat_remove\", { context: id });\n\n        // Update the UI manually to ensure the correct chat is removed\n        // Deep clone the contexts array to prevent reference issues\n        const updatedContexts = chatsAD.contexts.filter(ctx => ctx.id !== id);\n        console.log(\"Updated contexts after deletion:\", JSON.stringify(updatedContexts.map(c => ({ id: c.id, name: c.name }))));\n\n        // Force UI update by creating a new array\n        chatsAD.contexts = [...updatedContexts];\n\n        updateAfterScroll();\n\n        toast(\"Chat deleted successfully\", \"success\");\n    } catch (e) {\n        console.error(\"Error deleting chat:\", e);\n        window.toastFetchError(\"Error deleting chat\", e);\n    }\n}\n\nexport function switchFromContext(id){\n    // If we're deleting the currently selected chat, switch to another one first\n    if (context === id) {\n        const chatsAD = Alpine.$data(chatsSection);\n        \n        // Find an alternate chat to switch to if we're deleting the current one\n        let alternateChat = null;\n        for (let i = 0; i < chatsAD.contexts.length; i++) {\n            if (chatsAD.contexts[i].id !== id) {\n                alternateChat = chatsAD.contexts[i];\n                break;\n            }\n        }\n\n        if (alternateChat) {\n            setContext(alternateChat.id);\n        } else {\n            // If no other chats, create a new empty context\n            setContext(generateGUID());\n        }\n    }\n}\n\n// Function to ensure proper UI state when switching contexts\nfunction ensureProperTabSelection(contextId) {\n    // Get current active tab\n    const activeTab = localStorage.getItem('activeTab') || 'chats';\n\n    // First attempt to determine if this is a task or chat based on the task list\n    const tasksSection = document.getElementById('tasks-section');\n    let isTask = false;\n\n    if (tasksSection) {\n        const tasksAD = Alpine.$data(tasksSection);\n        if (tasksAD && tasksAD.tasks) {\n            isTask = tasksAD.tasks.some(task => task.id === contextId);\n        }\n    }\n\n    // If we're selecting a task but are in the chats tab, switch to tasks tab\n    if (isTask && activeTab === 'chats') {\n        // Store this as the last selected task before switching\n        localStorage.setItem('lastSelectedTask', contextId);\n        activateTab('tasks');\n        return true;\n    }\n\n    // If we're selecting a chat but are in the tasks tab, switch to chats tab\n    if (!isTask && activeTab === 'tasks') {\n        // Store this as the last selected chat before switching\n        localStorage.setItem('lastSelectedChat', contextId);\n        activateTab('chats');\n        return true;\n    }\n\n    return false;\n}\n\nwindow.selectChat = async function (id) {\n    if (id === context) return //already selected\n\n    // Check if we need to switch tabs based on the context type\n    const tabSwitched = ensureProperTabSelection(id);\n\n    // If we didn't switch tabs, proceed with normal selection\n    if (!tabSwitched) {\n        // Switch to the new context - this will clear chat history and reset tracking variables\n        setContext(id);\n\n        // Update both contexts and tasks lists to reflect the selected item\n        const chatsAD = Alpine.$data(chatsSection);\n        const tasksSection = document.getElementById('tasks-section');\n        if (tasksSection) {\n            const tasksAD = Alpine.$data(tasksSection);\n            tasksAD.selected = id;\n        }\n        chatsAD.selected = id;\n\n        // Store this selection in the appropriate localStorage key\n        const activeTab = localStorage.getItem('activeTab') || 'chats';\n        if (activeTab === 'chats') {\n            localStorage.setItem('lastSelectedChat', id);\n        } else if (activeTab === 'tasks') {\n            localStorage.setItem('lastSelectedTask', id);\n        }\n\n        // Trigger an immediate poll to fetch content\n        poll();\n    }\n\n    updateAfterScroll();\n}\n\nexport const setContext = function (id) {\n    if (id == context) return;\n    context = id;\n    // Always reset the log tracking variables when switching contexts\n    // This ensures we get fresh data from the backend\n    lastLogGuid = \"\";\n    lastLogVersion = 0;\n    lastSpokenNo = 0;\n\n    // Clear the chat history immediately to avoid showing stale content\n    chatHistory.innerHTML = \"\";\n\n    // Update both selected states\n    const chatsAD = Alpine.$data(chatsSection);\n    const tasksAD = Alpine.$data(tasksSection);\n\n    chatsAD.selected = id;\n    tasksAD.selected = id;\n}\n\nexport const getContext = function () {\n    return context\n}\n\nwindow.toggleAutoScroll = async function (_autoScroll) {\n    autoScroll = _autoScroll;\n}\n\nwindow.toggleJson = async function (showJson) {\n    // add display:none to .msg-json class definition\n    toggleCssProperty('.msg-json', 'display', showJson ? 'block' : 'none');\n}\n\nwindow.toggleThoughts = async function (showThoughts) {\n    // add display:none to .msg-json class definition\n    toggleCssProperty('.msg-thoughts', 'display', showThoughts ? undefined : 'none');\n}\n\nwindow.toggleUtils = async function (showUtils) {\n    // add display:none to .msg-json class definition\n    toggleCssProperty('.message-util', 'display', showUtils ? undefined : 'none');\n    // toggleCssProperty('.message-util .msg-kvps', 'display', showUtils ? undefined : 'none');\n    // toggleCssProperty('.message-util .msg-content', 'display', showUtils ? undefined : 'none');\n}\n\nwindow.toggleDarkMode = function (isDark) {\n    if (isDark) {\n        document.body.classList.remove('light-mode');\n        document.body.classList.add('dark-mode');\n       } else {\n        document.body.classList.remove('dark-mode');\n        document.body.classList.add('light-mode');\n    }\n    console.log(\"Dark mode:\", isDark);\n    localStorage.setItem('darkMode', isDark);\n};\n\nwindow.toggleSpeech = function (isOn) {\n    console.log(\"Speech:\", isOn);\n    localStorage.setItem('speech', isOn);\n    if (!isOn) speech.stop()\n};\n\nwindow.nudge = async function () {\n    try {\n        const resp = await sendJsonData(\"/nudge\", { ctxid: getContext() });\n    } catch (e) {\n        toastFetchError(\"Error nudging agent\", e)\n    }\n}\n\nwindow.restart = async function () {\n    try {\n        if (!getConnectionStatus()) {\n            toast(\"Backend disconnected, cannot restart.\", \"error\");\n            return\n        }\n        // First try to initiate restart\n        const resp = await sendJsonData(\"/restart\", {});\n    } catch (e) {\n        // Show restarting message\n        toast(\"Restarting...\", \"info\", 0);\n\n        let retries = 0;\n        const maxRetries = 240; // Maximum number of retries (60 seconds with 250ms interval)\n\n        while (retries < maxRetries) {\n            try {\n                const resp = await sendJsonData(\"/health\", {});\n                // Server is back up, show success message\n                await new Promise(resolve => setTimeout(resolve, 250));\n                hideToast();\n                await new Promise(resolve => setTimeout(resolve, 400));\n                toast(\"Restarted\", \"success\", 5000);\n                return;\n            } catch (e) {\n                // Server still down, keep waiting\n                retries++;\n                await new Promise(resolve => setTimeout(resolve, 250));\n            }\n        }\n\n        // If we get here, restart failed or took too long\n        hideToast();\n        await new Promise(resolve => setTimeout(resolve, 400));\n        toast(\"Restart timed out or failed\", \"error\", 5000);\n    }\n}\n\n// Modify this part\ndocument.addEventListener('DOMContentLoaded', () => {\n    const isDarkMode = localStorage.getItem('darkMode') !== 'false';\n    toggleDarkMode(isDarkMode);\n});\n\n\nfunction toggleCssProperty(selector, property, value) {\n    // Get the stylesheet that contains the class\n    const styleSheets = document.styleSheets;\n\n    // Iterate through all stylesheets to find the class\n    for (let i = 0; i < styleSheets.length; i++) {\n        const styleSheet = styleSheets[i];\n        const rules = styleSheet.cssRules || styleSheet.rules;\n\n        for (let j = 0; j < rules.length; j++) {\n            const rule = rules[j];\n            if (rule.selectorText == selector) {\n                // Check if the property is already applied\n                if (value === undefined) {\n                    rule.style.removeProperty(property);\n                } else {\n                    rule.style.setProperty(property, value);\n                }\n                return;\n            }\n        }\n    }\n}\n\nwindow.loadChats = async function () {\n    try {\n        const fileContents = await readJsonFiles();\n        const response = await sendJsonData(\"/chat_load\", { chats: fileContents });\n\n        if (!response) {\n            toast(\"No response returned.\", \"error\")\n        }\n        // else if (!response.ok) {\n        //     if (response.message) {\n        //         toast(response.message, \"error\")\n        //     } else {\n        //         toast(\"Undefined error.\", \"error\")\n        //     }\n        // }\n        else {\n            setContext(response.ctxids[0])\n            toast(\"Chats loaded.\", \"success\")\n        }\n\n    } catch (e) {\n        toastFetchError(\"Error loading chats\", e)\n    }\n}\n\nwindow.saveChat = async function () {\n    try {\n        const response = await sendJsonData(\"/chat_export\", { ctxid: context });\n\n        if (!response) {\n            toast(\"No response returned.\", \"error\")\n        }\n        //  else if (!response.ok) {\n        //     if (response.message) {\n        //         toast(response.message, \"error\")\n        //     } else {\n        //         toast(\"Undefined error.\", \"error\")\n        //     }\n        // }\n        else {\n            downloadFile(response.ctxid + \".json\", response.content)\n            toast(\"Chat file downloaded.\", \"success\")\n        }\n\n    } catch (e) {\n        toastFetchError(\"Error saving chat\", e)\n    }\n}\n\nfunction downloadFile(filename, content) {\n    // Create a Blob with the content to save\n    const blob = new Blob([content], { type: 'application/json' });\n\n    // Create a link element\n    const link = document.createElement('a');\n\n    // Create a URL for the Blob\n    const url = URL.createObjectURL(blob);\n    link.href = url;\n\n    // Set the file name for download\n    link.download = filename;\n\n    // Programmatically click the link to trigger the download\n    link.click();\n\n    // Clean up by revoking the object URL\n    setTimeout(() => {\n        URL.revokeObjectURL(url);\n    }, 0);\n}\n\n\nfunction readJsonFiles() {\n    return new Promise((resolve, reject) => {\n        // Create an input element of type 'file'\n        const input = document.createElement('input');\n        input.type = 'file';\n        input.accept = '.json'; // Only accept JSON files\n        input.multiple = true;  // Allow multiple file selection\n\n        // Trigger the file dialog\n        input.click();\n\n        // When files are selected\n        input.onchange = async () => {\n            const files = input.files;\n            if (!files.length) {\n                resolve([]); // Return an empty array if no files are selected\n                return;\n            }\n\n            // Read each file as a string and store in an array\n            const filePromises = Array.from(files).map(file => {\n                return new Promise((fileResolve, fileReject) => {\n                    const reader = new FileReader();\n                    reader.onload = () => fileResolve(reader.result);\n                    reader.onerror = fileReject;\n                    reader.readAsText(file);\n                });\n            });\n\n            try {\n                const fileContents = await Promise.all(filePromises);\n                resolve(fileContents);\n            } catch (error) {\n                reject(error); // In case of any file reading error\n            }\n        };\n    });\n}\n\nfunction addClassToElement(element, className) {\n    if (element && element.classList) {\n        element.classList.add(className);\n    }\n}\n\nfunction removeClassFromElement(element, className) {\n    if (element && element.classList) {\n        element.classList.remove(className);\n    }\n}\n\n\nfunction toast(text, type = 'info', timeout = 5000) {\n    const toast = document.getElementById('toast');\n    const isVisible = toast.classList.contains('show');\n\n    // Clear any existing timeout immediately\n    if (toast.timeoutId) {\n        clearTimeout(toast.timeoutId);\n        toast.timeoutId = null;\n    }\n\n    // Function to update toast content and show it\n    const updateAndShowToast = () => {\n        // Update the toast content and type\n        const title = type.charAt(0).toUpperCase() + type.slice(1);\n        toast.querySelector('.toast__title').textContent = title;\n        toast.querySelector('.toast__message').textContent = text;\n\n        // Remove old classes and add new ones\n        toast.classList.remove('toast--success', 'toast--error', 'toast--info');\n        toast.classList.add(`toast--${type}`);\n\n        // Show/hide copy button based on toast type\n        const copyButton = toast.querySelector('.toast__copy');\n        copyButton.style.display = type === 'error' ? 'inline-block' : 'none';\n\n        // Add the close button event listener\n        const closeButton = document.querySelector('.toast__close');\n        closeButton.onclick = () => {\n            hideToast();\n        };\n\n        // Add the copy button event listener\n        copyButton.onclick = () => {\n            navigator.clipboard.writeText(text);\n            copyButton.textContent = 'Copied!';\n            setTimeout(() => {\n                copyButton.textContent = 'Copy';\n            }, 2000);\n        };\n\n        // Show the toast\n        toast.style.display = 'flex';\n        // Force a reflow to ensure the animation triggers\n        void toast.offsetWidth;\n        toast.classList.add('show');\n\n        // Set timeout if specified\n        if (timeout) {\n            const minTimeout = Math.max(timeout, 5000);\n            toast.timeoutId = setTimeout(() => {\n                hideToast();\n            }, minTimeout);\n        }\n    };\n\n    if (isVisible) {\n        // If a toast is visible, hide it first then show the new one\n        toast.classList.remove('show');\n        toast.classList.add('hide');\n\n        // Wait for hide animation to complete before showing new toast\n        setTimeout(() => {\n            toast.classList.remove('hide');\n            updateAndShowToast();\n        }, 400); // Match this with CSS transition duration\n    } else {\n        // If no toast is visible, show the new one immediately\n        updateAndShowToast();\n    }\n}\nwindow.toast = toast\n\nfunction hideToast() {\n    const toast = document.getElementById('toast');\n\n    // Clear any existing timeout\n    if (toast.timeoutId) {\n        clearTimeout(toast.timeoutId);\n        toast.timeoutId = null;\n    }\n\n    toast.classList.remove('show');\n    toast.classList.add('hide');\n\n    // Wait for the hide animation to complete before removing from display\n    setTimeout(() => {\n        toast.style.display = 'none';\n        toast.classList.remove('hide');\n    }, 400); // Match this with CSS transition duration\n}\n\nfunction scrollChanged(isAtBottom) {\n    const inputAS = Alpine.$data(autoScrollSwitch);\n    inputAS.autoScroll = isAtBottom\n    // autoScrollSwitch.checked = isAtBottom\n}\n\nfunction updateAfterScroll() {\n    // const toleranceEm = 1; // Tolerance in em units\n    // const tolerancePx = toleranceEm * parseFloat(getComputedStyle(document.documentElement).fontSize); // Convert em to pixels\n    const tolerancePx = 50;\n    const chatHistory = document.getElementById('chat-history');\n    const isAtBottom = (chatHistory.scrollHeight - chatHistory.scrollTop) <= (chatHistory.clientHeight + tolerancePx);\n\n    scrollChanged(isAtBottom);\n}\n\n// Moved to DOMContentLoaded\n\n// setInterval(poll, 250);\n\nasync function startPolling() {\n    const shortInterval = 25\n    const longInterval = 250\n    const shortIntervalPeriod = 100\n    let shortIntervalCount = 0\n\n    async function _doPoll() {\n        let nextInterval = longInterval\n\n        try {\n            const result = await poll();\n            if (result) shortIntervalCount = shortIntervalPeriod; // Reset the counter when the result is true\n            if (shortIntervalCount > 0) shortIntervalCount--; // Decrease the counter on each call\n            nextInterval = shortIntervalCount > 0 ? shortInterval : longInterval;\n        } catch (error) {\n            console.error('Error:', error);\n        }\n\n        // Call the function again after the selected interval\n        setTimeout(_doPoll.bind(this), nextInterval);\n    }\n\n    _doPoll();\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", startPolling);\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    const dragDropOverlay = document.getElementById('dragdrop-overlay');\n    const inputSection = document.getElementById('input-section');\n    let dragCounter = 0;\n\n    // Prevent default drag behaviors\n    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {\n        document.addEventListener(eventName, (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n        }, false);\n    });\n\n    // Handle drag enter\n    document.addEventListener('dragenter', (e) => {\n        dragCounter++;\n        if (dragCounter === 1) {\n            Alpine.$data(dragDropOverlay).isVisible = true;\n        }\n    }, false);\n\n    // Handle drag leave\n    document.addEventListener('dragleave', (e) => {\n        dragCounter--;\n        if (dragCounter === 0) {\n            Alpine.$data(dragDropOverlay).isVisible = false;\n        }\n    }, false);\n\n    // Handle drop\n    dragDropOverlay.addEventListener('drop', (e) => {\n        dragCounter = 0;\n        Alpine.$data(dragDropOverlay).isVisible = false;\n\n        const inputAD = Alpine.$data(inputSection);\n        const files = e.dataTransfer.files;\n        handleFiles(files, inputAD);\n    }, false);\n});\n\n// Separate file handling logic to be used by both drag-drop and file input\nfunction handleFiles(files, inputAD) {\n    Array.from(files).forEach(file => {\n        const ext = file.name.split('.').pop().toLowerCase();\n\n            const isImage = ['jpg', 'jpeg', 'png', 'bmp'].includes(ext);\n\n            if (isImage) {\n                const reader = new FileReader();\n                reader.onload = e => {\n                    inputAD.attachments.push({\n                        file: file,\n                        url: e.target.result,\n                        type: 'image',\n                        name: file.name,\n                        extension: ext\n                    });\n                    inputAD.hasAttachments = true;\n                };\n                reader.readAsDataURL(file);\n            } else {\n                inputAD.attachments.push({\n                    file: file,\n                    type: 'file',\n                    name: file.name,\n                    extension: ext\n                });\n                inputAD.hasAttachments = true;\n            }\n\n    });\n}\n\n// Modify the existing handleFileUpload to use the new handleFiles function\nwindow.handleFileUpload = function(event) {\n    const files = event.target.files;\n    const inputAD = Alpine.$data(inputSection);\n    handleFiles(files, inputAD);\n}\n\n// Function to wait for elements to be available\nfunction waitForElements(selectors, callback, timeout = 5000) {\n    const startTime = Date.now();\n    \n    function checkElements() {\n        const elements = {};\n        let allFound = true;\n        \n        Object.entries(selectors).forEach(([name, selector]) => {\n            const element = document.getElementById(selector) || document.querySelector(selector);\n            elements[name] = element;\n            if (!element) {\n                allFound = false;\n                console.log(`Still waiting for: ${name} (${selector})`);\n            } else {\n                console.log(`Found: ${name}`);\n            }\n        });\n        \n        if (allFound) {\n            console.log('All elements found, initializing...');\n            callback(elements);\n        } else if (Date.now() - startTime < timeout) {\n            setTimeout(checkElements, 50);\n        } else {\n            console.error('Timeout waiting for elements, proceeding with available elements');\n            callback(elements);\n        }\n    }\n    \n    checkElements();\n}\n\n// Setup event handlers once all elements are available\ndocument.addEventListener('DOMContentLoaded', function() {\n    console.log('DOMContentLoaded - waiting for elements to be ready');\n    \n    // Define the elements we need\n    const requiredSelectors = {\n        leftPanel: 'left-panel',\n        rightPanel: 'right-panel',\n        container: '.container',\n        chatInput: 'chat-input',\n        sendButton: 'send-button',\n        chatHistory: 'chat-history',\n        inputSection: 'input-section',\n        statusSection: 'progress-bar-box',\n        chatsSection: 'chats-section',\n        tasksSection: 'tasks-section',\n        progressBar: 'progress-bar',\n        autoScrollSwitch: 'auto-scroll-switch',\n        timeDate: 'time-date'\n    };\n    \n    waitForElements(requiredSelectors, function(elements) {\n        // Assign elements to global variables\n        leftPanel = elements.leftPanel;\n        rightPanel = elements.rightPanel;\n        container = elements.container;\n        chatInput = elements.chatInput;\n        sendButton = elements.sendButton;\n        chatHistory = elements.chatHistory;\n        inputSection = elements.inputSection;\n        statusSection = elements.statusSection;\n        chatsSection = elements.chatsSection;\n        tasksSection = elements.tasksSection;\n        progressBar = elements.progressBar;\n        autoScrollSwitch = elements.autoScrollSwitch;\n        timeDate = elements.timeDate;\n        \n        // Setup event listeners\n        if (chatInput) {\n            chatInput.addEventListener('keydown', (e) => {\n                if (e.key === 'Enter' && !e.shiftKey) {\n                    e.preventDefault();\n                    sendMessage();\n                }\n            });\n            chatInput.addEventListener('input', adjustTextareaHeight);\n        }\n\n        if (sendButton) {\n            sendButton.addEventListener('click', sendMessage);\n        }\n\n        if (chatHistory) {\n            chatHistory.addEventListener('scroll', updateAfterScroll);\n        }\n\n        // Setup window event listeners\n        window.addEventListener('load', handleResize);\n        window.addEventListener('resize', handleResize);\n        \n        // Initialize components\n        setupSidebarToggle();\n        setupTabs();\n        initializeActiveTab();\n        \n        console.log('UI initialization complete');\n    });\n});\n\n// Setup tabs functionality\nfunction setupTabs() {\n    const chatsTab = document.getElementById('chats-tab');\n    const tasksTab = document.getElementById('tasks-tab');\n\n    if (chatsTab && tasksTab) {\n        chatsTab.addEventListener('click', function() {\n            activateTab('chats');\n        });\n\n        tasksTab.addEventListener('click', function() {\n            activateTab('tasks');\n        });\n    } else {\n        console.error('Tab elements not found');\n        setTimeout(setupTabs, 100); // Retry setup\n    }\n}\n\nfunction activateTab(tabName) {\n    const chatsTab = document.getElementById('chats-tab');\n    const tasksTab = document.getElementById('tasks-tab');\n    const chatsSection = document.getElementById('chats-section');\n    const tasksSection = document.getElementById('tasks-section');\n\n    // Get current context to preserve before switching\n    const currentContext = context;\n\n    // Store the current selection for the active tab before switching\n    const previousTab = localStorage.getItem('activeTab');\n    if (previousTab === 'chats') {\n        localStorage.setItem('lastSelectedChat', currentContext);\n    } else if (previousTab === 'tasks') {\n        localStorage.setItem('lastSelectedTask', currentContext);\n    }\n\n    // Reset all tabs and sections\n    chatsTab.classList.remove('active');\n    tasksTab.classList.remove('active');\n    chatsSection.style.display = 'none';\n    tasksSection.style.display = 'none';\n\n    // Remember the last active tab in localStorage\n    localStorage.setItem('activeTab', tabName);\n\n    // Activate selected tab and section\n    if (tabName === 'chats') {\n        chatsTab.classList.add('active');\n        chatsSection.style.display = '';\n\n        // Get the available contexts from Alpine.js data\n        const chatsAD = Alpine.$data(chatsSection);\n        const availableContexts = chatsAD.contexts || [];\n\n        // Restore previous chat selection\n        const lastSelectedChat = localStorage.getItem('lastSelectedChat');\n\n        // Only switch if:\n        // 1. lastSelectedChat exists AND\n        // 2. It's different from current context AND\n        // 3. The context actually exists in our contexts list OR there are no contexts yet\n        if (lastSelectedChat &&\n            lastSelectedChat !== currentContext &&\n            (availableContexts.some(ctx => ctx.id === lastSelectedChat) || availableContexts.length === 0)) {\n            setContext(lastSelectedChat);\n        }\n    } else if (tabName === 'tasks') {\n        tasksTab.classList.add('active');\n        tasksSection.style.display = 'flex';\n        tasksSection.style.flexDirection = 'column';\n\n        // Get the available tasks from Alpine.js data\n        const tasksAD = Alpine.$data(tasksSection);\n        const availableTasks = tasksAD.tasks || [];\n\n        // Restore previous task selection\n        const lastSelectedTask = localStorage.getItem('lastSelectedTask');\n\n        // Only switch if:\n        // 1. lastSelectedTask exists AND\n        // 2. It's different from current context AND\n        // 3. The task actually exists in our tasks list\n        if (lastSelectedTask &&\n            lastSelectedTask !== currentContext &&\n            availableTasks.some(task => task.id === lastSelectedTask)) {\n            setContext(lastSelectedTask);\n        }\n    }\n\n    // Request a poll update\n    poll();\n}\n\n// Add function to initialize active tab and selections from localStorage\nfunction initializeActiveTab() {\n    // Initialize selection storage if not present\n    if (!localStorage.getItem('lastSelectedChat')) {\n        localStorage.setItem('lastSelectedChat', '');\n    }\n    if (!localStorage.getItem('lastSelectedTask')) {\n        localStorage.setItem('lastSelectedTask', '');\n    }\n\n    const activeTab = localStorage.getItem('activeTab') || 'chats';\n    activateTab(activeTab);\n}\n\n/*\n * A0 Chat UI\n *\n * Tasks tab functionality:\n * - Tasks are displayed in the Tasks tab with the same mechanics as chats\n * - Both lists are sorted by creation time (newest first)\n * - Selection state is preserved across tab switches\n * - The active tab is remembered across sessions\n * - Tasks use the same context system as chats for communication with the backend\n * - Future support for renaming and deletion will be implemented later\n */\n\n// Open the scheduler detail view for a specific task\nfunction openTaskDetail(taskId) {\n    // Wait for Alpine.js to be fully loaded\n    if (window.Alpine) {\n        // Get the settings modal button and click it to ensure all init logic happens\n        const settingsButton = document.getElementById('settings');\n        if (settingsButton) {\n            // Programmatically click the settings button\n            settingsButton.click();\n\n            // Now get a reference to the modal element\n            const modalEl = document.getElementById('settingsModal');\n            if (!modalEl) {\n                console.error('Settings modal element not found after clicking button');\n                return;\n            }\n\n            // Get the Alpine.js data for the modal\n            const modalData = Alpine.$data(modalEl);\n\n            // Use a timeout to ensure the modal is fully rendered\n            setTimeout(() => {\n                // Switch to the scheduler tab first\n                modalData.switchTab('scheduler');\n\n                // Use another timeout to ensure the scheduler component is initialized\n                setTimeout(() => {\n                    // Get the scheduler component\n                    const schedulerComponent = document.querySelector('[x-data=\"schedulerSettings\"]');\n                    if (!schedulerComponent) {\n                        console.error('Scheduler component not found');\n                        return;\n                    }\n\n                    // Get the Alpine.js data for the scheduler component\n                    const schedulerData = Alpine.$data(schedulerComponent);\n\n                    // Show the task detail view for the specific task\n                    schedulerData.showTaskDetail(taskId);\n\n                    console.log('Task detail view opened for task:', taskId);\n                }, 50); // Give time for the scheduler tab to initialize\n            }, 25); // Give time for the modal to render\n        } else {\n            console.error('Settings button not found');\n        }\n    } else {\n        console.error('Alpine.js not loaded');\n    }\n}\n\n// Make the function available globally\nwindow.openTaskDetail = openTaskDetail;\n\n// Handle file upload function for Alpine.js\nwindow.handleFileUploadForAlpine = function(event) {\n    const files = event.target.files;\n    const inputAD = Alpine.$data(inputSection);\n    \n    Array.from(files).forEach(file => {\n        const ext = file.name.split('.').pop().toLowerCase();\n        const isImage = ['jpg', 'jpeg', 'png', 'bmp'].includes(ext);\n\n        if (isImage) {\n            // Handle image preview\n            const reader = new FileReader();\n            reader.onload = e => {\n                inputAD.attachments.push({\n                    file: file,\n                    url: e.target.result,\n                    type: 'image',\n                    name: file.name,\n                    extension: ext\n                });\n                inputAD.hasAttachments = true;\n            };\n            reader.readAsDataURL(file);\n        } else {\n            // Handle other file types\n            inputAD.attachments.push({\n                file: file,\n                type: 'file',\n                name: file.name,\n                extension: ext\n            });\n            inputAD.hasAttachments = true;\n        }\n    });\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/zero/webui/js/AlpineStore.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'Alpine' is not defined.","line":28,"column":52,"nodeType":"Identifier","messageId":"undef","endLine":28,"endColumn":58}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Track all created stores\nconst stores = new Map();\n\n/**\n * Creates a store that can be used to share state between components.\n * Uses initial state object and returns a proxy to it that uses Alpine when initialized\n * @template T\n * @param {string} name\n * @param {T} initialState\n * @returns {T}\n */\nexport function createStore(name, initialState) {\n  const proxy = new Proxy(initialState, {\n    set(target, prop, value) {\n      const store = globalThis.Alpine?.store(name);\n      if (store) store[prop] = value;\n      else target[prop] = value;\n      return true;\n    },\n    get(target, prop) {\n      return target[prop];\n    }\n  });\n\n  if (globalThis.Alpine) {\n    globalThis.Alpine.store(name, initialState);\n  } else {\n    document.addEventListener(\"alpine:init\", () => Alpine.store(name, initialState));\n  }\n\n  // Store the proxy\n  stores.set(name, proxy);\n\n  return /** @type {T} */ (proxy); // explicitly cast for linter support\n}\n\n/**\n * Get an existing store by name\n * @template T\n * @param {string} name\n * @returns {T | undefined}\n */\nexport function getStore(name) {\n  return /** @type {T | undefined} */ (stores.get(name));\n}","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/zero/webui/js/alpine.min.js","messages":[{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":7,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":34,"fix":{"range":[7,10],"text":"let"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":2,"column":119,"nodeType":"Identifier","messageId":"useConst","endLine":2,"endColumn":120,"fix":{"range":[115,134],"text":"const t=W.indexOf(e);"}},{"ruleId":"no-undef","severity":2,"message":"'queueMicrotask' is not defined.","line":2,"column":193,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":207},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":301,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":320,"fix":{"range":[301,304],"text":"let"}},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":2,"column":509,"nodeType":"Identifier","messageId":"useConst","endLine":2,"endColumn":510,"fix":{"range":[505,516],"text":"const i=N(n);"}},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":2,"column":723,"nodeType":"Identifier","messageId":"useConst","endLine":2,"endColumn":724},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":2,"column":736,"nodeType":"Identifier","messageId":"useConst","endLine":2,"endColumn":737,"fix":{"range":[732,742],"text":"const o=e();"}},{"ruleId":"no-undef","severity":2,"message":"'queueMicrotask' is not defined.","line":2,"column":766,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":780},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":821,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":843,"fix":{"range":[821,824],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":1443,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":1481,"fix":{"range":[1443,1446],"text":"let"}},{"ruleId":"no-undef","severity":2,"message":"'MutationObserver' is not defined.","line":2,"column":1454,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":1470},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":1624,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":1634,"fix":{"range":[1624,1627],"text":"let"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":2,"column":1652,"nodeType":"Identifier","messageId":"useConst","endLine":2,"endColumn":1653,"fix":{"range":[1648,1671],"text":"const e=ut.takeRecords();"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":2,"column":1706,"nodeType":"Identifier","messageId":"useConst","endLine":2,"endColumn":1707,"fix":{"range":[1702,1718],"text":"const t=le.length;"}},{"ruleId":"no-undef","severity":2,"message":"'queueMicrotask' is not defined.","line":2,"column":1718,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":1732},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":2,"column":1829,"nodeType":"Identifier","messageId":"useConst","endLine":2,"endColumn":1830,"fix":{"range":[1825,1835],"text":"const t=e();"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":1849,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":1865,"fix":{"range":[1849,1852],"text":"let"}},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":2,"column":2306,"nodeType":"Identifier","messageId":"useConst","endLine":2,"endColumn":2307},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":2,"column":2320,"nodeType":"Identifier","messageId":"useConst","endLine":2,"endColumn":2321},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":2,"column":2341,"nodeType":"Identifier","messageId":"useConst","endLine":2,"endColumn":2342},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":2,"column":2357,"nodeType":"Identifier","messageId":"useConst","endLine":2,"endColumn":2358},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":2,"column":2435,"nodeType":"Identifier","messageId":"useConst","endLine":2,"endColumn":2436,"fix":{"range":[2302,2482],"text":"const s=e[o].target,a=e[o].attributeName,c=e[o].oldValue,l=()=>{n.has(s)||n.set(s,[]),n.get(s).push({name:a,value:s.getAttribute(a)})},u=()=>{i.has(s)||i.set(s,[]),i.get(s).push(a)};"}},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":2,"column":2624,"nodeType":"Identifier","messageId":"useConst","endLine":2,"endColumn":2625,"fix":{"range":[2620,2625],"text":"const o"}},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":2,"column":2685,"nodeType":"Identifier","messageId":"useConst","endLine":2,"endColumn":2686,"fix":{"range":[2681,2686],"text":"const o"}},{"ruleId":"no-undef","severity":2,"message":"'ShadowRoot' is not defined.","line":2,"column":2988,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":2998},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":3088,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":3590},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":2,"column":3418,"nodeType":"Identifier","messageId":"useConst","endLine":2,"endColumn":3419},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":2,"column":3488,"nodeType":"Identifier","messageId":"useConst","endLine":2,"endColumn":3489,"fix":{"range":[3414,3527],"text":"const i=e.find(s=>Object.prototype.hasOwnProperty.call(s,t))||e[e.length-1],o=Object.getOwnPropertyDescriptor(i,t);"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":2,"column":3699,"nodeType":"Identifier","messageId":"useConst","endLine":2,"endColumn":3700},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":2,"column":3752,"nodeType":"Identifier","messageId":"useConst","endLine":2,"endColumn":3753,"fix":{"range":[3695,4074],"text":"const t=n=>typeof n==\"object\"&&!Array.isArray(n)&&n!==null,r=(n,i=\"\")=>{Object.entries(Object.getOwnPropertyDescriptors(n)).forEach(([o,{value:s,enumerable:a}])=>{if(a===!1||s===void 0||typeof s==\"object\"&&s!==null&&s.__v_skip)return;let c=i===\"\"?o:`${i}.${o}`;typeof s==\"object\"&&s!==null&&s._x_interceptor?n[o]=s.initialize(e,c,o):t(s)&&s!==n&&!(s instanceof Element)&&r(s,c)})};"}},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":2,"column":3931,"nodeType":"Identifier","messageId":"useConst","endLine":2,"endColumn":3932,"fix":{"range":[3927,3954],"text":"const c=i===\"\"?o:`${i}.${o}`;"}},{"ruleId":"no-undef","severity":2,"message":"'Element' is not defined.","line":2,"column":4054,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":4061},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":2,"column":4114,"nodeType":"Identifier","messageId":"useConst","endLine":2,"endColumn":4115,"fix":{"range":[4110,4232],"text":"const r={initialValue:void 0,_x_interceptor:!0,initialize(n,i,o){return e(this.initialValue,()=>In(n,i),s=>ht(n,i,s),i,o)}};"}},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":2,"column":4303,"nodeType":"Identifier","messageId":"useConst","endLine":2,"endColumn":4304,"fix":{"range":[4299,4326],"text":"const i=r.initialize.bind(r);"}},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":2,"column":4353,"nodeType":"Identifier","messageId":"useConst","endLine":2,"endColumn":4354,"fix":{"range":[4349,4375],"text":"const c=n.initialize(o,s,a);"}},{"ruleId":"no-undef","severity":2,"message":"'error' is not defined.","line":2,"column":4609,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":4614},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":4670,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":4680,"fix":{"range":[4670,4673],"text":"let"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":2,"column":4725,"nodeType":"Identifier","messageId":"useConst","endLine":2,"endColumn":4726,"fix":{"range":[4721,4733],"text":"const r=Ln(t);"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":2,"column":4870,"nodeType":"Identifier","messageId":"useConst","endLine":2,"endColumn":4871},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":2,"column":4872,"nodeType":"Identifier","messageId":"useConst","endLine":2,"endColumn":4873},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":2,"column":4881,"nodeType":"Identifier","messageId":"useConst","endLine":2,"endColumn":4882,"fix":{"range":[4866,4905],"text":"const[t,r]=_t(e),n={interceptor:Re,...t};"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":2,"column":5087,"nodeType":"MemberExpression","messageId":"unexpected","endLine":2,"endColumn":5099},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":6,"column":43,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":6,"endColumn":53,"fix":{"range":[5216,5219],"text":"let"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":6,"column":72,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":73,"fix":{"range":[5241,5250],"text":"const t=Me;"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":6,"column":87,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":88,"fix":{"range":[5256,5266],"text":"const r=e();"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":6,"column":193,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":6,"endColumn":203},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":6,"column":244,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":245,"fix":{"range":[5413,5422],"text":"const r={};"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":6,"column":261,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":262},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":6,"column":275,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":276,"fix":{"range":[5430,5489],"text":"const n=[r,...B(e)],i=typeof t==\"function\"?$n(n,t):Fn(n,t,e);"}},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":6,"column":411,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":412,"fix":{"range":[5580,5609],"text":"const o=t.apply(z([n,...e]),i);"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":6,"column":445,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":6,"endColumn":455,"fix":{"range":[5618,5621],"text":"let"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":6,"column":498,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":499},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":6,"column":554,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":555},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":6,"column":651,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":652,"fix":{"range":[5667,6069],"text":"const r=Object.getPrototypeOf(async function(){}).constructor,n=/^[\\n\\s]*if.*\\(.*\\)/.test(e.trim())||/^(let|const)\\s/.test(e.trim())?`(async()=>{ ${e} })()`:e,o=(()=>{try{let s=new r([\"__self\",\"scope\"],`with (scope) { __self.result = ${n} }; __self.finished = true; return __self.result;`);return Object.defineProperty(s,\"name\",{value:`[Alpine] ${e}`}),s}catch(s){return re(s,t,e),Promise.resolve()}})();"}},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":6,"column":667,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":668,"fix":{"range":[5836,5955],"text":"const s=new r([\"__self\",\"scope\"],`with (scope) { __self.result = ${n} }; __self.finished = true; return __self.result;`);"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":6,"column":936,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":937,"fix":{"range":[6105,6119],"text":"const n=jn(t,r);"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":6,"column":1027,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":1028,"fix":{"range":[6196,6214],"text":"const a=z([o,...e]);"}},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":6,"column":1070,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":1071,"fix":{"range":[6239,6272],"text":"const c=n(n,a).catch(l=>re(l,r,t));"}},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":6,"column":1283,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":1284,"fix":{"range":[6452,6471],"text":"const o=t.apply(r,n);"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":6,"column":1434,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":6,"endColumn":1446,"fix":{"range":[6607,6610],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":6,"column":1495,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":6,"endColumn":1505,"fix":{"range":[6668,6671],"text":"let"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":6,"column":1558,"nodeType":"MemberExpression","messageId":"unexpected","endLine":6,"endColumn":1570,"suggestions":[{"fix":{"range":[6731,6838],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":6,"column":1676,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":1677,"fix":{"range":[6845,6864],"text":"const n=G.indexOf(r);"}},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":6,"column":1925,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":1926},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":6,"column":2039,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":2040,"fix":{"range":[7208,7217],"text":"const n={};"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":6,"column":2189,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":6,"endColumn":2222,"fix":{"range":[7362,7365],"text":"let"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":6,"column":2247,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":2248,"fix":{"range":[7416,7431],"text":"const t=Symbol();"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":6,"column":2280,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":2281},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":6,"column":2344,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":2345,"fix":{"range":[7449,7535],"text":"const r=()=>{for(;de.get(t).length;)de.get(t).shift()();de.delete(t)},n=()=>{yt=!1,r()};"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":6,"column":2390,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":2391},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":6,"column":2395,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":2396},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":6,"column":2411,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":2412,"fix":{"range":[7559,7595],"text":"const t=[],r=a=>t.push(a),[n,i]=Yt(e);"}},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":6,"column":2413,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":2414,"fix":{"range":[7559,7595],"text":"const t=[],r=a=>t.push(a),[n,i]=Yt(e);"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":6,"column":2561,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":2562},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":6,"column":2587,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":2588},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":6,"column":2589,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":2590},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":6,"column":2621,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":2622,"fix":{"range":[7790,7904],"text":"const s=()=>{e._x_ignore||e._x_ignoreSelf||(n.inline&&n.inline(e,t,i),n=n.bind(n,e,t,i),yt?de.get(ur).push(n):n())};"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":6,"column":2756,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":6,"endColumn":2853,"fix":{"range":[7929,7932],"text":"let"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":6,"column":2911,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":2912,"fix":{"range":[8075,8135],"text":"const{name:n,value:i}=pr.reduce((o,s)=>s(o),{name:t,value:r});"}},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":6,"column":2919,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":2920,"fix":{"range":[8075,8135],"text":"const{name:n,value:i}=pr.reduce((o,s)=>s(o),{name:t,value:r});"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":6,"column":3001,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":6,"endColumn":3011},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":6,"column":3079,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":6,"endColumn":3123},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":6,"column":3171,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":3172},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":6,"column":3187,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":3188},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":6,"column":3220,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":3221},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":6,"column":3259,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":3260,"fix":{"range":[8340,8445],"text":"const i=r.match(hr()),o=r.match(/:([a-zA-Z0-9\\-_:]+)/),s=r.match(/\\.[^.\\]]+(?=[^\\]]*$)/g)||[],a=t||e[r]||r;"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":6,"column":3378,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":6,"endColumn":3514},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":6,"column":3535,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":3536},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":6,"column":3570,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":3571,"fix":{"range":[8704,8778],"text":"const r=G.indexOf(e.type)===-1?bt:e.type,n=G.indexOf(t.type)===-1?bt:t.type;"}},{"ruleId":"no-undef","severity":2,"message":"'CustomEvent' is not defined.","line":6,"column":3679,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":3690},{"ruleId":"no-undef","severity":2,"message":"'ShadowRoot' is not defined.","line":6,"column":3806,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":3816},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":6,"column":3988,"nodeType":"MemberExpression","messageId":"unexpected","endLine":6,"endColumn":4000,"suggestions":[{"fix":{"range":[9161,9202],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":6,"column":4030,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":6,"endColumn":4040,"fix":{"range":[9203,9206],"text":"let"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":6,"column":4461,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":4462,"fix":{"range":[9630,9662],"text":"const e=t=>!Y(t.parentElement,!0);"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":6,"column":4628,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":6,"endColumn":4644,"fix":{"range":[9801,9804],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":6,"column":5042,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":6,"endColumn":5052,"fix":{"range":[10215,10218],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":6,"column":5078,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":6,"endColumn":5087,"fix":{"range":[10251,10254],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":6,"column":5594,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":6,"endColumn":5610,"fix":{"range":[10767,10770],"text":"let"}},{"ruleId":"no-undef","severity":2,"message":"'queueMicrotask' is not defined.","line":6,"column":5639,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":5653},{"ruleId":"no-unused-vars","severity":2,"message":"'r' is assigned a value but never used.","line":6,"column":5953,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":5954,"suggestions":[{"messageId":"removeVar","data":{"varName":"r"},"fix":{"range":[11126,11160],"text":""},"desc":"Remove unused variable 'r'."}]},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":6,"column":5953,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":5954},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":6,"column":5987,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":5988},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":6,"column":6057,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":6058,"fix":{"range":[11122,11290],"text":"const r=o=>o.split(\" \").filter(Boolean),n=o=>o.split(\" \").filter(s=>!e.classList.contains(s)).filter(Boolean),i=o=>(e.classList.add(...o),()=>{e.classList.remove(...o)});"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":6,"column":6173,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":6174},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":6,"column":6207,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":6208},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":6,"column":6271,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":6272},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":6,"column":6335,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":6336},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":6,"column":6340,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":6341,"fix":{"range":[11342,11518],"text":"const r=a=>a.split(\" \").filter(Boolean),n=Object.entries(t).flatMap(([a,c])=>c?r(a):!1).filter(Boolean),i=Object.entries(t).flatMap(([a,c])=>c?!1:r(a)).filter(Boolean),o=[],s=[];"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":6,"column":6663,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":6664,"fix":{"range":[11832,11841],"text":"const r={};"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":6,"column":6883,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":6884,"fix":{"range":[12052,12084],"text":"const r=e.getAttribute(\"style\",t);"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":6,"column":7660,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":7661},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":6,"column":7704,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":7705},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":6,"column":7749,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":7750,"fix":{"range":[12829,12968],"text":"const n=!t.includes(\"in\")&&!t.includes(\"out\")&&!r,i=n||t.includes(\"in\")||[\"enter\"].includes(r),o=n||t.includes(\"out\")||[\"leave\"].includes(r);"}},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":6,"column":7924,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":7925},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":6,"column":7971,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":7972},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":6,"column":7998,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":7999},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":6,"column":8023,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":8024},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":6,"column":8031,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":8032},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":6,"column":8058,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":8059},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":6,"column":8080,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":8081},{"ruleId":"prefer-const","severity":2,"message":"'w' is never reassigned. Use 'const' instead.","line":6,"column":8106,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":8107},{"ruleId":"prefer-const","severity":2,"message":"'F' is never reassigned. Use 'const' instead.","line":6,"column":8129,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":8130},{"ruleId":"prefer-const","severity":2,"message":"'Ee' is never reassigned. Use 'const' instead.","line":6,"column":8156,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":8158},{"ruleId":"prefer-const","severity":2,"message":"'f' is never reassigned. Use 'const' instead.","line":6,"column":8183,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":8184,"fix":{"range":[13093,13391],"text":"const s=!t.includes(\"opacity\")&&!t.includes(\"scale\"),a=s||t.includes(\"opacity\"),c=s||t.includes(\"scale\"),l=a?0:1,u=c?_e(t,\"scale\",95)/100:1,p=_e(t,\"delay\",0)/1e3,h=_e(t,\"origin\",\"center\"),w=\"opacity, transform\",F=_e(t,\"duration\",150)/1e3,Ee=_e(t,\"duration\",75)/1e3,f=\"cubic-bezier(0.4, 0.0, 0.2, 1)\";"}},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":6,"column":9183,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":9184},{"ruleId":"no-undef","severity":2,"message":"'requestAnimationFrame' is not defined.","line":6,"column":9222,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":9243},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":6,"column":9255,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":9256,"fix":{"range":[14352,14439],"text":"const i=document.visibilityState===\"visible\"?requestAnimationFrame:setTimeout,o=()=>i(r);"}},{"ruleId":"no-undef","severity":2,"message":"'queueMicrotask' is not defined.","line":6,"column":9792,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":9806},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":6,"column":9816,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":9817,"fix":{"range":[14985,14997],"text":"const s=Cr(e);"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":6,"column":9907,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":9908,"fix":{"range":[15076,15236],"text":"const a=c=>{let l=Promise.all([c._x_hidePromise,...(c._x_hideChildren||[]).map(a)]).then(([u])=>u?.());return delete c._x_hidePromise,delete c._x_hideChildren,l};"}},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":6,"column":9917,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":9918,"fix":{"range":[15086,15177],"text":"const l=Promise.all([c._x_hidePromise,...(c._x_hideChildren||[]).map(a)]).then(([u])=>u?.());"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":6,"column":10144,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":10145,"fix":{"range":[15313,15332],"text":"const t=e.parentNode;"}},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":6,"column":10544,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":10545},{"ruleId":"no-undef","severity":2,"message":"'requestAnimationFrame' is not defined.","line":6,"column":10879,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":10900},{"ruleId":"no-undef","severity":2,"message":"'getComputedStyle' is not defined.","line":6,"column":10931,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":10947},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":6,"column":11009,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":11010},{"ruleId":"no-undef","severity":2,"message":"'getComputedStyle' is not defined.","line":6,"column":11018,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":11034},{"ruleId":"no-undef","severity":2,"message":"'getComputedStyle' is not defined.","line":6,"column":11110,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":11126},{"ruleId":"no-undef","severity":2,"message":"'requestAnimationFrame' is not defined.","line":6,"column":11195,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":11216},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":6,"column":11353,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":11354,"fix":{"range":[16522,16546],"text":"const n=e[e.indexOf(t)+1];"}},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":6,"column":11447,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":11448,"fix":{"range":[16616,16644],"text":"const i=n.match(/([0-9]+)ms/);"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":6,"column":11612,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":6,"endColumn":11621,"fix":{"range":[16785,16788],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":6,"column":11716,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":6,"endColumn":11726,"fix":{"range":[16889,16892],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":6,"column":11836,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":6,"endColumn":11846,"fix":{"range":[17009,17012],"text":"let"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":6,"column":12055,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":12056,"fix":{"range":[17224,17232],"text":"const t=N;"}},{"ruleId":"no-unused-vars","severity":2,"message":"'n' is defined but never used.","line":6,"column":12065,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":12066,"suggestions":[{"messageId":"removeVar","data":{"varName":"n"},"fix":{"range":[17237,17239],"text":""},"desc":"Remove unused variable 'n'."}]},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":6,"column":12074,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":12075,"fix":{"range":[17243,17254],"text":"const i=t(r);"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":6,"column":13265,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":13266,"fix":{"range":[18434,18466],"text":"const r=[].concat(t).map(n=>n+\"\");"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":6,"column":13596,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":6,"endColumn":13946,"fix":{"range":[18769,18772],"text":"let"}},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":6,"column":14323,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":14324,"fix":{"range":[19492,19521],"text":"const i=e._x_inlineBindings[t];"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":6,"column":14433,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":14434,"fix":{"range":[19602,19626],"text":"const n=e.getAttribute(t);"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":6,"column":14719,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":6,"endColumn":14725,"fix":{"range":[19892,19895],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":6,"column":14743,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":6,"endColumn":14800,"fix":{"range":[19916,19919],"text":"let"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":6,"column":14880,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":14881},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":6,"column":14887,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":14888,"fix":{"range":[20049,20072],"text":"const n=this,i=arguments;"}},{"ruleId":"no-unused-vars","severity":2,"message":"'s' is assigned a value but never used.","line":6,"column":14998,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":14999},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":6,"column":15000,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":15001},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":6,"column":15013,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":15014},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":6,"column":15019,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":15020,"fix":{"range":[20182,20198],"text":"const c=e(),l=r();"}},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":6,"column":15053,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":15054},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":6,"column":15073,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":15074,"fix":{"range":[20222,20266],"text":"const u=JSON.stringify(c),p=JSON.stringify(l);"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":6,"column":15317,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":6,"endColumn":15332,"fix":{"range":[20490,20493],"text":"let"}},{"ruleId":"no-prototype-builtins","severity":2,"message":"Do not access Object.prototype method 'hasOwnProperty' from target object.","line":6,"column":15442,"nodeType":"CallExpression","messageId":"prototypeBuildIn","endLine":6,"endColumn":15456,"suggestions":[{"messageId":"callObjectPrototype","data":{"prop":"hasOwnProperty"},"fix":{"range":[20613,20630],"text":"Object.prototype.hasOwnProperty.call(t, "},"desc":"Call Object.prototype.hasOwnProperty explicitly."}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":6,"column":15528,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":6,"endColumn":15538,"fix":{"range":[20701,20704],"text":"let"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":6,"column":15559,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":15560,"fix":{"range":[20728,20763],"text":"const r=typeof t!=\"function\"?()=>t:t;"}},{"ruleId":"no-undef","severity":2,"message":"'Element' is not defined.","line":6,"column":15610,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":15617},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":6,"column":15789,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":15790,"fix":{"range":[20958,20967],"text":"const n=[];"}},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":6,"column":15876,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":15877},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":6,"column":16056,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":6,"endColumn":16066,"fix":{"range":[21229,21232],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":6,"column":16236,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":6,"endColumn":17132},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":6,"column":17153,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":17154},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":6,"column":17175,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":17176,"fix":{"range":[22322,22363],"text":"const r=Object.create(null),n=e.split(\",\");"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":6,"column":17271,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":6,"endColumn":17356,"fix":{"range":[22444,22447],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":6,"column":17356,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":6,"endColumn":17513,"fix":{"range":[22529,22532],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'Ls' is assigned a value but never used.","line":6,"column":17360,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":17362,"suggestions":[{"messageId":"removeVar","data":{"varName":"Ls"},"fix":{"range":[22529,22686],"text":""},"desc":"Remove unused variable 'Ls'."}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":6,"column":17513,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":6,"endColumn":17559,"fix":{"range":[22686,22689],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'$s' is assigned a value but never used.","line":6,"column":17538,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":17540,"suggestions":[{"messageId":"removeVar","data":{"varName":"$s"},"fix":{"range":[22710,22731],"text":""},"desc":"Remove unused variable '$s'."}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":6,"column":17559,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":6,"endColumn":17666,"fix":{"range":[22732,22735],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":6,"column":17666,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":6,"endColumn":17755,"fix":{"range":[22839,22842],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":6,"column":17755,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":6,"endColumn":17829},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":6,"column":17829,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":6,"endColumn":17891,"fix":{"range":[23002,23005],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":6,"column":17891,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":6,"endColumn":18188,"fix":{"range":[23064,23067],"text":"let"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":6,"column":17906,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":17907,"fix":{"range":[23075,23101],"text":"const t=Object.create(null);"}},{"ruleId":"no-unused-vars","severity":2,"message":"'js' is assigned a value but never used.","line":6,"column":17969,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":17971,"suggestions":[{"messageId":"removeVar","data":{"varName":"js"},"fix":{"range":[23141,23193],"text":""},"desc":"Remove unused variable 'js'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Fs' is assigned a value but never used.","line":6,"column":18037,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":18039,"suggestions":[{"messageId":"removeVar","data":{"varName":"Fs"},"fix":{"range":[23209,23253],"text":""},"desc":"Remove unused variable 'Fs'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Bs' is assigned a value but never used.","line":6,"column":18128,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":18130,"suggestions":[{"messageId":"removeVar","data":{"varName":"Bs"},"fix":{"range":[23300,23328],"text":""},"desc":"Remove unused variable 'Bs'."}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":6,"column":18188,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":6,"endColumn":18264,"fix":{"range":[23361,23364],"text":"let"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":6,"column":18347,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":18348,"fix":{"range":[23516,23530],"text":"const r=xi(e,t);"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":6,"column":18460,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":6,"endColumn":18469,"fix":{"range":[23633,23636],"text":"let"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":6,"column":18490,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":18491,"fix":{"range":[23659,23804],"text":"const r=function(){if(!r.active)return e();if(!we.includes(r)){on(r);try{return bi(),we.push(r),L=r,e()}finally{we.pop(),sn(),L=we[we.length-1]}}};"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":6,"column":18763,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":18764,"fix":{"range":[23927,23941],"text":"const{deps:t}=e;"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":6,"column":18835,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":6,"endColumn":18851,"fix":{"range":[24008,24011],"text":"let"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":6,"column":18933,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":18934,"fix":{"range":[24102,24117],"text":"const e=Lt.pop();"}},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":6,"column":19218,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":19219,"fix":{"range":[24387,24403],"text":"const s=Dt.get(e);"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":6,"column":19247,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":19248},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":6,"column":19257,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":19258,"fix":{"range":[24416,24490],"text":"const a=new Set,c=u=>{u&&u.forEach(p=>{(p!==L||p.allowRecurse)&&a.add(p)})};"}},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":6,"column":19637,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":19638,"fix":{"range":[24806,24973],"text":"const l=u=>{u.options.onTrigger&&u.options.onTrigger({effect:u,target:e,key:r,type:t,newValue:n,oldValue:i,oldTarget:o}),u.options.scheduler?u.options.scheduler(u):u()};"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":6,"column":19813,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":6,"endColumn":19938,"fix":{"range":[24986,24989],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":6,"column":19938,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":6,"endColumn":19952,"fix":{"range":[25111,25114],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":6,"column":19952,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":6,"endColumn":19964,"fix":{"range":[25125,25128],"text":"let"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":6,"column":19982,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":19983,"fix":{"range":[25151,25160],"text":"const e={};"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":6,"column":20066,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":20067,"fix":{"range":[25235,25249],"text":"const n=_(this);"}},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":6,"column":20130,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":20131,"fix":{"range":[25299,25316],"text":"const i=n[t](...r);"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":6,"column":20271,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":20272,"fix":{"range":[25440,25471],"text":"const n=_(this)[t].apply(this,r);"}},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":6,"column":20491,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":20492,"fix":{"range":[25660,25671],"text":"const s=V(n);"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":6,"column":20548,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":20549,"fix":{"range":[25717,25742],"text":"const a=Reflect.get(n,i,o);"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":6,"column":20672,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":6,"endColumn":20684,"fix":{"range":[25845,25848],"text":"let"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":6,"column":20806,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":20807},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":6,"column":20847,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":20848,"fix":{"range":[25975,26043],"text":"const a=V(r)&&Ue(n)?Number(n)<r.length:ye(r,n),c=Reflect.set(r,n,i,o);"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":6,"column":20956,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":20957},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":6,"column":20966,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":20967},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":6,"column":20973,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":20974,"fix":{"range":[26125,26176],"text":"const r=ye(e,t),n=e[t],i=Reflect.deleteProperty(e,t);"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":6,"column":21064,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":21065,"fix":{"range":[26233,26256],"text":"const r=Reflect.has(e,t);"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":6,"column":21198,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":6,"endColumn":21487,"fix":{"range":[26371,26374],"text":"let"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":6,"column":21284,"nodeType":"MemberExpression","messageId":"unexpected","endLine":6,"endColumn":21296},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":6,"column":21397,"nodeType":"MemberExpression","messageId":"unexpected","endLine":6,"endColumn":21409},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":6,"column":21487,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":6,"endColumn":21571,"fix":{"range":[26660,26663],"text":"let"}},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":6,"column":21614,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":21615},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":6,"column":21621,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":21622,"fix":{"range":[26783,26801],"text":"const i=_(e),o=_(t);"}},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":6,"column":21677,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":21678},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":6,"column":21686,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":21687,"fix":{"range":[26842,26874],"text":"const{has:s}=Qe(i),a=n?Ft:r?jt:$t;"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":6,"column":21809,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":21810},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":6,"column":21824,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":21825},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":6,"column":21831,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":21832,"fix":{"range":[26978,27011],"text":"const r=this.__v_raw,n=_(r),i=_(e);"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":6,"column":22033,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":22034,"fix":{"range":[27202,27216],"text":"const t=_(this);"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":6,"column":22130,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":22131},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":6,"column":22145,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":22146},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":6,"column":22151,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":22152},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":6,"column":22213,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":22214,"fix":{"range":[27382,27400],"text":"const s=i.call(r,e);"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":6,"column":22312,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":22313},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":6,"column":22327,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":22328},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":6,"column":22333,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":22334},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":6,"column":22395,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":22396},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":6,"column":22418,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":22419,"fix":{"range":[27564,27605],"text":"const o=n?n.call(t,e):void 0,s=t.delete(e);"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":6,"column":22487,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":22488},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":6,"column":22497,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":22498},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":6,"column":22510,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":22511},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":6,"column":22540,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":22541,"fix":{"range":[27656,27725],"text":"const e=_(this),t=e.size!==0,r=oe(e)?new Map(e):new Set(e),n=e.clear();"}},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":6,"column":22635,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":22636},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":6,"column":22642,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":22643},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":6,"column":22654,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":22655},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":6,"column":22661,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":22662,"fix":{"range":[27804,27849],"text":"const o=this,s=o.__v_raw,a=_(s),c=t?Ft:e?jt:$t;"}},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":6,"column":22789,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":22790},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":6,"column":22804,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":22805},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":6,"column":22811,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":22812},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":6,"column":22819,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":22820},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":6,"column":22859,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":22860},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":6,"column":22875,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":22876},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":6,"column":22888,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":22889,"fix":{"range":[27958,28076],"text":"const i=this.__v_raw,o=_(i),s=oe(o),a=e===\"entries\"||e===Symbol.iterator&&s,c=e===\"keys\"&&s,l=i[e](...n),u=r?Ft:t?jt:$t;"}},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":6,"column":22953,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":22954,"fix":{"range":[28116,28145],"text":"const{value:p,done:h}=l.next();"}},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":6,"column":22960,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":22961,"fix":{"range":[28116,28145],"text":"const{value:p,done:h}=l.next();"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":6,"column":23115,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":23116,"fix":{"range":[28284,28318],"text":"const r=t[0]?`on key \"${t[0]}\" `:\"\";"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":6,"column":23145,"nodeType":"MemberExpression","messageId":"unexpected","endLine":6,"endColumn":23157,"suggestions":[{"fix":{"range":[28318,28392],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":6,"column":23267,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":23268},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":6,"column":23383,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":23384},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":6,"column":23505,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":23506},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":6,"column":23683,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":23684,"fix":{"range":[28436,29037],"text":"const e={get(o){return Ge(this,o)},get size(){return Ye(this)},has:Je,add:Zr,set:Qr,delete:en,clear:tn,forEach:Xe(!1,!1)},t={get(o){return Ge(this,o,!1,!0)},get size(){return Ye(this)},has:Je,add:Zr,set:Qr,delete:en,clear:tn,forEach:Xe(!1,!0)},r={get(o){return Ge(this,o,!0)},get size(){return Ye(this,!0)},has(o){return Je.call(this,o,!0)},add:q(\"add\"),set:q(\"set\"),delete:q(\"delete\"),clear:q(\"clear\"),forEach:Xe(!0,!1)},n={get(o){return Ge(this,o,!0,!0)},get size(){return Ye(this,!0)},has(o){return Je.call(this,o,!0)},add:q(\"add\"),set:q(\"set\"),delete:q(\"delete\"),clear:q(\"clear\"),forEach:Xe(!0,!0)};"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":6,"column":24006,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":6,"endColumn":24028,"fix":{"range":[29179,29182],"text":"let"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":6,"column":24049,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":24050,"fix":{"range":[29218,29242],"text":"const r=t?e?Li:Ii:e?Pi:Di;"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":6,"column":24184,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":6,"endColumn":24207,"fix":{"range":[29357,29360],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":6,"column":24207,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":6,"endColumn":24230,"fix":{"range":[29380,29383],"text":"let"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":6,"column":24253,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":24254,"fix":{"range":[29422,29433],"text":"const n=_(r);"}},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":6,"column":24287,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":24288,"fix":{"range":[29456,29468],"text":"const i=Mt(e);"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":6,"column":24295,"nodeType":"MemberExpression","messageId":"unexpected","endLine":6,"endColumn":24307,"suggestions":[{"fix":{"range":[29468,29742],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":6,"column":24571,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":6,"endColumn":24635},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":6,"column":24981,"nodeType":"MemberExpression","messageId":"unexpected","endLine":6,"endColumn":24993},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":6,"column":25093,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":25094,"fix":{"range":[30262,30277],"text":"const o=i.get(e);"}},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":6,"column":25122,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":25123,"fix":{"range":[30291,30303],"text":"const s=Ki(e);"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":6,"column":25152,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":25153,"fix":{"range":[30321,30350],"text":"const a=new Proxy(e,s===2?n:r);"}},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":6,"column":25393,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":25394},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":6,"column":25400,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":25401,"fix":{"range":[30562,30612],"text":"const o=t(n),a=ve(()=>{let c;return o(l=>c=l),c},i);"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":6,"column":25591,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":25592,"fix":{"range":[30760,30769],"text":"const t=[];"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":6,"column":25644,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":6,"endColumn":25654,"fix":{"range":[30817,30820],"text":"let"}},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":6,"column":25884,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":25885,"fix":{"range":[31053,31081],"text":"const i=`${r}${n?`-${n}`:\"\"}`;"}},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":6,"column":25933,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":25934},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":6,"column":25943,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":25944,"fix":{"range":[31102,31138],"text":"const o=hn(e,r),s=o?o._x_ids[r]:zt(r);"}},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":6,"column":26125,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":26126,"fix":{"range":[31294,31304],"text":"const i=n();"}},{"ruleId":"no-unused-vars","severity":2,"message":"'r' is defined but never used.","line":6,"column":26434,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":26435,"suggestions":[{"messageId":"removeVar","data":{"varName":"r"},"fix":{"range":[31600,31609],"text":""},"desc":"Remove unused variable 'r'."}]},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":6,"column":26470,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":26471},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":6,"column":26477,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":26478},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":6,"column":26510,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":26511},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":6,"column":26538,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":26539},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":6,"column":26579,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":26580,"fix":{"range":[31639,31758],"text":"const o=n(t),s=()=>{let u;return o(p=>u=p),u},a=n(`${t} = __placeholder`),c=u=>a(()=>{},{scope:{__placeholder:u}}),l=s();"}},{"ruleId":"no-undef","severity":2,"message":"'queueMicrotask' is not defined.","line":6,"column":26590,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":26604},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":6,"column":26672,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":26673},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":6,"column":26689,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":26690},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":6,"column":26706,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":26707,"fix":{"range":[31841,31951],"text":"const u=e._x_model.get,p=e._x_model.set,h=Ve({get(){return u()},set(w){p(w)}},{get(){return s()},set(w){c(w)}});"}},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":6,"column":26942,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":26943},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":6,"column":26950,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":26951,"fix":{"range":[32111,32167],"text":"const i=xn(r),o=e.content.cloneNode(!0).firstElementChild;"}},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":6,"column":27275,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":27276,"fix":{"range":[32444,32595],"text":"const s=(a,c,l)=>{l.includes(\"prepend\")?c.parentNode.insertBefore(a,c):l.includes(\"append\")?c.parentNode.insertBefore(a,c.nextSibling):c.appendChild(a)};"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":6,"column":27486,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":27487,"fix":{"range":[32655,32667],"text":"const a=xn(r);"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":6,"column":27559,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":6,"endColumn":27596,"fix":{"range":[32732,32735],"text":"let"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":6,"column":27615,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":27616,"fix":{"range":[32784,32832],"text":"const t=A(()=>document.querySelector(e),()=>qi)();"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":6,"column":27728,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":6,"endColumn":27742,"fix":{"range":[32901,32904],"text":"let"}},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":6,"column":28020,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":28021},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":6,"column":28025,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":28026},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":6,"column":28281,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":28282},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":6,"column":28326,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":28327,"fix":{"range":[33450,33551],"text":"const c=r[r.indexOf(\"debounce\")+1]||\"invalid-wait\",l=tt(c.split(\"ms\")[0])?Number(c.split(\"ms\")[0]):250;"}},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":6,"column":28419,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":28420},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":6,"column":28464,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":28465,"fix":{"range":[33588,33689],"text":"const c=r[r.indexOf(\"throttle\")+1]||\"invalid-wait\",l=tt(c.split(\"ms\")[0])?Number(c.split(\"ms\")[0]):250;"}},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":6,"column":29670,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":29671,"fix":{"range":[34839,34867],"text":"const o=r.indexOf(\"debounce\");"}},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":6,"column":29785,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":29786,"fix":{"range":[34954,34982],"text":"const o=r.indexOf(\"throttle\");"}},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":6,"column":29938,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":29939,"fix":{"range":[35107,35182],"text":"const i=[\"ctrl\",\"shift\",\"alt\",\"meta\",\"cmd\",\"super\"].filter(o=>r.includes(o));"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":6,"column":30226,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":30227,"fix":{"range":[35395,35601],"text":"const t={ctrl:\"control\",slash:\"/\",space:\" \",spacebar:\" \",cmd:\"meta\",esc:\"escape\",up:\"arrow-up\",down:\"arrow-down\",left:\"arrow-left\",right:\"arrow-right\",period:\".\",comma:\",\",equal:\"=\",minus:\"-\",underscore:\"_\"};"}},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":6,"column":30616,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":30617},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":6,"column":30764,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":30765},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":6,"column":30811,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":30812,"fix":{"range":[35933,36058],"text":"const c=()=>{let h;return s(w=>h=w),En(h)?h.get():h},l=h=>{let w;s(F=>w=F),En(w)?w.set(h):a(()=>{},{scope:{__placeholder:h}})};"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":6,"column":30981,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":6,"endColumn":31098,"fix":{"range":[36154,36157],"text":"let"}},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":6,"column":31102,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":31103,"fix":{"range":[36271,36318],"text":"const p=I?()=>{}:ae(e,u,t,h=>{l(Kt(e,t,h,c()))});"}},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":6,"column":31452,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":31453,"fix":{"range":[36621,36713],"text":"const h=ae(e.form,\"reset\",[],w=>{ie(()=>e._x_model&&e._x_model.set(Kt(e,t,{target:e},c())))});"}},{"ruleId":"no-unused-vars","severity":2,"message":"'w' is defined but never used.","line":6,"column":31475,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":31476,"suggestions":[{"messageId":"removeVar","data":{"varName":"w"},"fix":{"range":[36647,36649],"text":""},"desc":"Remove unused variable 'w'."}]},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":6,"column":31754,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":31755,"fix":{"range":[36923,36933],"text":"const h=c();"}},{"ruleId":"no-undef","severity":2,"message":"'CustomEvent' is not defined.","line":6,"column":31905,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":31916},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":6,"column":32382,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":32383,"fix":{"range":[37551,37573],"text":"const o=i.value||i.text;"}},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":6,"column":32486,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":32487,"fix":{"range":[37655,37677],"text":"const o=i.value||i.text;"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":6,"column":32763,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":32764,"fix":{"range":[37932,37959],"text":"const t=e?parseFloat(e):null;"}},{"ruleId":"no-undef","severity":2,"message":"'queueMicrotask' is not defined.","line":6,"column":32998,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":33012},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":6,"column":33241,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":33242,"fix":{"range":[38410,38421],"text":"const i=n(t);"}},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":6,"column":33353,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":33354,"fix":{"range":[38522,38533],"text":"const i=n(t);"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":6,"column":33476,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":6,"endColumn":33935,"fix":{"range":[38649,38652],"text":"let"}},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":6,"column":33567,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":33568,"fix":{"range":[38736,38745],"text":"const c={};"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":6,"column":33736,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":33737,"fix":{"range":[38905,38918],"text":"const a=x(e,n);"}},{"ruleId":"no-unused-vars","severity":2,"message":"'r' is defined but never used.","line":6,"column":33967,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":33968,"suggestions":[{"messageId":"removeVar","data":{"varName":"r"},"fix":{"range":[39129,39141],"text":""},"desc":"Remove unused variable 'r'."}]},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":6,"column":34241,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":34242,"fix":{"range":[39410,39419],"text":"const n={};"}},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":6,"column":34258,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":34259,"fix":{"range":[39427,39436],"text":"const i={};"}},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":6,"column":34335,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":34336,"fix":{"range":[39504,39515],"text":"const s=T(o);"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":6,"column":34352,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":34353,"fix":{"range":[39521,39534],"text":"const a=k(e,s);"}},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":6,"column":34655,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":34656,"fix":{"range":[39824,39837],"text":"const i=x(e,r);"}},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":6,"column":34939,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":34940},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":6,"column":34977,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":34978},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":6,"column":35015,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":35016},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":6,"column":35035,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":35036},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":6,"column":35313,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":35314},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":6,"column":35321,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":35322},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":6,"column":35336,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":35337,"fix":{"range":[40482,40544],"text":"const i=ro(t),o=x(e,i.items),s=x(e,e._x_keyExpression||\"index\");"}},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":6,"column":35562,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":35563},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":6,"column":35605,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":35606,"fix":{"range":[40731,40782],"text":"const i=s=>typeof s==\"object\"&&!Array.isArray(s),o=e;"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":6,"column":35690,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":35691},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":6,"column":35720,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":35721},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":6,"column":35725,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":35726},{"ruleId":"prefer-const","severity":2,"message":"'b' is never reassigned. Use 'const' instead.","line":6,"column":35776,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":35777,"fix":{"range":[40945,40963],"text":"const b=Sn(t,g,f,s);"}},{"ruleId":"prefer-const","severity":2,"message":"'g' is never reassigned. Use 'const' instead.","line":6,"column":35925,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":35926,"fix":{"range":[41094,41115],"text":"const g=Sn(t,s[f],f,s);"}},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":6,"column":36042,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":36043},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":6,"column":36047,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":36048},{"ruleId":"prefer-const","severity":2,"message":"'w' is never reassigned. Use 'const' instead.","line":6,"column":36052,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":36053},{"ruleId":"prefer-const","severity":2,"message":"'F' is never reassigned. Use 'const' instead.","line":6,"column":36057,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":36058,"fix":{"range":[41211,41235],"text":"const p=[],h=[],w=[],F=[];"}},{"ruleId":"prefer-const","severity":2,"message":"'g' is never reassigned. Use 'const' instead.","line":6,"column":36094,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":36095,"fix":{"range":[41263,41274],"text":"const g=c[f];"}},{"ruleId":"prefer-const","severity":2,"message":"'g' is never reassigned. Use 'const' instead.","line":6,"column":36210,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":36211},{"ruleId":"prefer-const","severity":2,"message":"'b' is never reassigned. Use 'const' instead.","line":6,"column":36217,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":36218,"fix":{"range":[41379,41405],"text":"const g=u[f],b=c.indexOf(g);"}},{"ruleId":"prefer-const","severity":2,"message":"'v' is never reassigned. Use 'const' instead.","line":6,"column":36292,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":36293},{"ruleId":"prefer-const","severity":2,"message":"'O' is never reassigned. Use 'const' instead.","line":6,"column":36311,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":36312,"fix":{"range":[41461,41505],"text":"const v=c.splice(f,1)[0],O=c.splice(b-1,1)[0];"}},{"ruleId":"prefer-const","severity":2,"message":"'g' is never reassigned. Use 'const' instead.","line":6,"column":36430,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":36431,"fix":{"range":[41599,41610],"text":"const g=w[f];"}},{"ruleId":"prefer-const","severity":2,"message":"'g' is never reassigned. Use 'const' instead.","line":6,"column":36522,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":36523},{"ruleId":"prefer-const","severity":2,"message":"'b' is never reassigned. Use 'const' instead.","line":6,"column":36524,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":36525},{"ruleId":"prefer-const","severity":2,"message":"'v' is never reassigned. Use 'const' instead.","line":6,"column":36532,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":36533},{"ruleId":"prefer-const","severity":2,"message":"'O' is never reassigned. Use 'const' instead.","line":6,"column":36539,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":36540},{"ruleId":"prefer-const","severity":2,"message":"'ee' is never reassigned. Use 'const' instead.","line":6,"column":36546,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":36548,"fix":{"range":[41691,41752],"text":"const[g,b]=h[f],v=a[g],O=a[b],ee=document.createElement(\"div\");"}},{"ruleId":"prefer-const","severity":2,"message":"'g' is never reassigned. Use 'const' instead.","line":6,"column":36846,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":36847},{"ruleId":"prefer-const","severity":2,"message":"'b' is never reassigned. Use 'const' instead.","line":6,"column":36848,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":36849},{"ruleId":"prefer-const","severity":2,"message":"'O' is never reassigned. Use 'const' instead.","line":6,"column":36923,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":36924},{"ruleId":"prefer-const","severity":2,"message":"'ee' is never reassigned. Use 'const' instead.","line":6,"column":36930,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":36932},{"ruleId":"prefer-const","severity":2,"message":"'ce' is never reassigned. Use 'const' instead.","line":6,"column":36938,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":36940},{"ruleId":"prefer-const","severity":2,"message":"'qt' is never reassigned. Use 'const' instead.","line":6,"column":36993,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":36995,"fix":{"range":[42092,42174],"text":"const O=l[b],ee=u[b],ce=document.importNode(o.content,!0).firstElementChild,qt=T(O);"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":6,"column":37342,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":37343},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\}.","line":6,"column":37350,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":6,"endColumn":37351,"suggestions":[{"messageId":"removeEscape","fix":{"range":[42523,42524],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[42523,42523],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\}.","line":6,"column":37365,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":6,"endColumn":37366,"suggestions":[{"messageId":"removeEscape","fix":{"range":[42538,42539],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[42538,42538],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":6,"column":37377,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":37378},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":6,"column":37396,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":37397},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":6,"column":37435,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":37436,"fix":{"range":[42511,42621],"text":"const t=/,([^,\\}\\]]*)(?:,([^,\\}\\]]*))?$/,r=/^\\s*\\(|\\)\\s*$/g,n=/([\\s\\S]*?)\\s+(?:in|of)\\s+([\\s\\S]*)/,i=e.match(n);"}},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":6,"column":37465,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":37466,"fix":{"range":[42634,42643],"text":"const o={};"}},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":6,"column":37494,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":37495},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":6,"column":37522,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":37523,"fix":{"range":[42663,42708],"text":"const s=i[1].replace(r,\"\").trim(),a=s.match(t);"}},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":6,"column":37665,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":37666,"fix":{"range":[42834,42843],"text":"const i={};"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":6,"column":38151,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":38152,"fix":{"range":[43320,43331],"text":"const n=Y(e);"}},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":6,"column":38379,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":38380},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":6,"column":38388,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":38389},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":6,"column":38443,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":38444,"fix":{"range":[43612,43660],"text":"const a=e.content.cloneNode(!0).firstElementChild;"}},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":6,"column":38627,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":38628,"fix":{"range":[43548,43856],"text":"const i=x(e,t),o=()=>{if(e._x_currentIfEl)return e._x_currentIfEl;let a=e.content.cloneNode(!0).firstElementChild;return k(a,{},e),m(()=>{e.after(a),A(()=>S(a))()}),e._x_currentIfEl=a,e._x_undoIf=()=>{m(()=>{P(a),a.remove()}),delete e._x_currentIfEl},a},s=()=>{e._x_undoIf&&(e._x_undoIf(),delete e._x_undoIf)};"}},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":6,"column":38945,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":38946,"fix":{"range":[44114,44136],"text":"const o=n?x(e,n):()=>{};"}},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":6,"column":39110,"nodeType":"Identifier","messageId":"useConst","endLine":6,"endColumn":39111,"fix":{"range":[44279,44340],"text":"const s=ae(e,t,r,a=>{o(()=>{},{scope:{$event:a},params:[a]})});"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":6,"column":39533,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":6,"endColumn":39542,"fix":{"range":[44706,44709],"text":"let"}},{"ruleId":"no-undef","severity":2,"message":"'queueMicrotask' is not defined.","line":6,"column":39559,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":39573}],"suppressedMessages":[],"errorCount":374,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":205,"fixableWarningCount":0,"source":"\n(()=>{var nt=!1,it=!1,W=[],ot=-1;function Ut(e){Rn(e)}function Rn(e){W.includes(e)||W.push(e),Mn()}function Wt(e){let t=W.indexOf(e);t!==-1&&t>ot&&W.splice(t,1)}function Mn(){!it&&!nt&&(nt=!0,queueMicrotask(Nn))}function Nn(){nt=!1,it=!0;for(let e=0;e<W.length;e++)W[e](),ot=e;W.length=0,ot=-1,it=!1}var T,N,$,at,st=!0;function Gt(e){st=!1,e(),st=!0}function Jt(e){T=e.reactive,$=e.release,N=t=>e.effect(t,{scheduler:r=>{st?Ut(r):r()}}),at=e.raw}function ct(e){N=e}function Yt(e){let t=()=>{};return[n=>{let i=N(n);return e._x_effects||(e._x_effects=new Set,e._x_runEffects=()=>{e._x_effects.forEach(o=>o())}),e._x_effects.add(i),t=()=>{i!==void 0&&(e._x_effects.delete(i),$(i))},i},()=>{t()}]}function ve(e,t){let r=!0,n,i=N(()=>{let o=e();JSON.stringify(o),r?n=o:queueMicrotask(()=>{t(o,n),n=o}),r=!1});return()=>$(i)}var Xt=[],Zt=[],Qt=[];function er(e){Qt.push(e)}function te(e,t){typeof t==\"function\"?(e._x_cleanups||(e._x_cleanups=[]),e._x_cleanups.push(t)):(t=e,Zt.push(t))}function Ae(e){Xt.push(e)}function Oe(e,t,r){e._x_attributeCleanups||(e._x_attributeCleanups={}),e._x_attributeCleanups[t]||(e._x_attributeCleanups[t]=[]),e._x_attributeCleanups[t].push(r)}function lt(e,t){e._x_attributeCleanups&&Object.entries(e._x_attributeCleanups).forEach(([r,n])=>{(t===void 0||t.includes(r))&&(n.forEach(i=>i()),delete e._x_attributeCleanups[r])})}function tr(e){for(e._x_effects?.forEach(Wt);e._x_cleanups?.length;)e._x_cleanups.pop()()}var ut=new MutationObserver(mt),ft=!1;function ue(){ut.observe(document,{subtree:!0,childList:!0,attributes:!0,attributeOldValue:!0}),ft=!0}function dt(){kn(),ut.disconnect(),ft=!1}var le=[];function kn(){let e=ut.takeRecords();le.push(()=>e.length>0&&mt(e));let t=le.length;queueMicrotask(()=>{if(le.length===t)for(;le.length>0;)le.shift()()})}function m(e){if(!ft)return e();dt();let t=e();return ue(),t}var pt=!1,Se=[];function rr(){pt=!0}function nr(){pt=!1,mt(Se),Se=[]}function mt(e){if(pt){Se=Se.concat(e);return}let t=[],r=new Set,n=new Map,i=new Map;for(let o=0;o<e.length;o++)if(!e[o].target._x_ignoreMutationObserver&&(e[o].type===\"childList\"&&(e[o].removedNodes.forEach(s=>{s.nodeType===1&&s._x_marker&&r.add(s)}),e[o].addedNodes.forEach(s=>{if(s.nodeType===1){if(r.has(s)){r.delete(s);return}s._x_marker||t.push(s)}})),e[o].type===\"attributes\")){let s=e[o].target,a=e[o].attributeName,c=e[o].oldValue,l=()=>{n.has(s)||n.set(s,[]),n.get(s).push({name:a,value:s.getAttribute(a)})},u=()=>{i.has(s)||i.set(s,[]),i.get(s).push(a)};s.hasAttribute(a)&&c===null?l():s.hasAttribute(a)?(u(),l()):u()}i.forEach((o,s)=>{lt(s,o)}),n.forEach((o,s)=>{Xt.forEach(a=>a(s,o))});for(let o of r)t.some(s=>s.contains(o))||Zt.forEach(s=>s(o));for(let o of t)o.isConnected&&Qt.forEach(s=>s(o));t=null,r=null,n=null,i=null}function Ce(e){return z(B(e))}function k(e,t,r){return e._x_dataStack=[t,...B(r||e)],()=>{e._x_dataStack=e._x_dataStack.filter(n=>n!==t)}}function B(e){return e._x_dataStack?e._x_dataStack:typeof ShadowRoot==\"function\"&&e instanceof ShadowRoot?B(e.host):e.parentNode?B(e.parentNode):[]}function z(e){return new Proxy({objects:e},Dn)}var Dn={ownKeys({objects:e}){return Array.from(new Set(e.flatMap(t=>Object.keys(t))))},has({objects:e},t){return t==Symbol.unscopables?!1:e.some(r=>Object.prototype.hasOwnProperty.call(r,t)||Reflect.has(r,t))},get({objects:e},t,r){return t==\"toJSON\"?Pn:Reflect.get(e.find(n=>Reflect.has(n,t))||{},t,r)},set({objects:e},t,r,n){let i=e.find(s=>Object.prototype.hasOwnProperty.call(s,t))||e[e.length-1],o=Object.getOwnPropertyDescriptor(i,t);return o?.set&&o?.get?o.set.call(n,r)||!0:Reflect.set(i,t,r)}};function Pn(){return Reflect.ownKeys(this).reduce((t,r)=>(t[r]=Reflect.get(this,r),t),{})}function Te(e){let t=n=>typeof n==\"object\"&&!Array.isArray(n)&&n!==null,r=(n,i=\"\")=>{Object.entries(Object.getOwnPropertyDescriptors(n)).forEach(([o,{value:s,enumerable:a}])=>{if(a===!1||s===void 0||typeof s==\"object\"&&s!==null&&s.__v_skip)return;let c=i===\"\"?o:`${i}.${o}`;typeof s==\"object\"&&s!==null&&s._x_interceptor?n[o]=s.initialize(e,c,o):t(s)&&s!==n&&!(s instanceof Element)&&r(s,c)})};return r(e)}function Re(e,t=()=>{}){let r={initialValue:void 0,_x_interceptor:!0,initialize(n,i,o){return e(this.initialValue,()=>In(n,i),s=>ht(n,i,s),i,o)}};return t(r),n=>{if(typeof n==\"object\"&&n!==null&&n._x_interceptor){let i=r.initialize.bind(r);r.initialize=(o,s,a)=>{let c=n.initialize(o,s,a);return r.initialValue=c,i(o,s,a)}}else r.initialValue=n;return r}}function In(e,t){return t.split(\".\").reduce((r,n)=>r[n],e)}function ht(e,t,r){if(typeof t==\"string\"&&(t=t.split(\".\")),t.length===1)e[t[0]]=r;else{if(t.length===0)throw error;return e[t[0]]||(e[t[0]]={}),ht(e[t[0]],t.slice(1),r)}}var ir={};function y(e,t){ir[e]=t}function fe(e,t){let r=Ln(t);return Object.entries(ir).forEach(([n,i])=>{Object.defineProperty(e,`$${n}`,{get(){return i(t,r)},enumerable:!1})}),e}function Ln(e){let[t,r]=_t(e),n={interceptor:Re,...t};return te(e,r),n}function or(e,t,r,...n){try{return r(...n)}catch(i){re(i,e,t)}}function re(e,t,r=void 0){e=Object.assign(e??{message:\"No error message given.\"},{el:t,expression:r}),console.warn(`Alpine Expression Error: ${e.message}\n\n    ${r?'Expression: \"'+r+`\"\n    \n    `:\"\"}`,t),setTimeout(()=>{throw e},0)}var Me=!0;function ke(e){let t=Me;Me=!1;let r=e();return Me=t,r}function R(e,t,r={}){let n;return x(e,t)(i=>n=i,r),n}function x(...e){return sr(...e)}var sr=xt;function ar(e){sr=e}function xt(e,t){let r={};fe(r,e);let n=[r,...B(e)],i=typeof t==\"function\"?$n(n,t):Fn(n,t,e);return or.bind(null,e,t,i)}function $n(e,t){return(r=()=>{},{scope:n={},params:i=[]}={})=>{let o=t.apply(z([n,...e]),i);Ne(r,o)}}var gt={};function jn(e,t){if(gt[e])return gt[e];let r=Object.getPrototypeOf(async function(){}).constructor,n=/^[\\n\\s]*if.*\\(.*\\)/.test(e.trim())||/^(let|const)\\s/.test(e.trim())?`(async()=>{ ${e} })()`:e,o=(()=>{try{let s=new r([\"__self\",\"scope\"],`with (scope) { __self.result = ${n} }; __self.finished = true; return __self.result;`);return Object.defineProperty(s,\"name\",{value:`[Alpine] ${e}`}),s}catch(s){return re(s,t,e),Promise.resolve()}})();return gt[e]=o,o}function Fn(e,t,r){let n=jn(t,r);return(i=()=>{},{scope:o={},params:s=[]}={})=>{n.result=void 0,n.finished=!1;let a=z([o,...e]);if(typeof n==\"function\"){let c=n(n,a).catch(l=>re(l,r,t));n.finished?(Ne(i,n.result,a,s,r),n.result=void 0):c.then(l=>{Ne(i,l,a,s,r)}).catch(l=>re(l,r,t)).finally(()=>n.result=void 0)}}}function Ne(e,t,r,n,i){if(Me&&typeof t==\"function\"){let o=t.apply(r,n);o instanceof Promise?o.then(s=>Ne(e,s,r,n)).catch(s=>re(s,i,t)):e(o)}else typeof t==\"object\"&&t instanceof Promise?t.then(o=>e(o)):e(t)}var wt=\"x-\";function C(e=\"\"){return wt+e}function cr(e){wt=e}var De={};function d(e,t){return De[e]=t,{before(r){if(!De[r]){console.warn(String.raw`Cannot find directive \\`${r}\\`. \\`${e}\\` will use the default order of execution`);return}let n=G.indexOf(r);G.splice(n>=0?n:G.indexOf(\"DEFAULT\"),0,e)}}}function lr(e){return Object.keys(De).includes(e)}function pe(e,t,r){if(t=Array.from(t),e._x_virtualDirectives){let o=Object.entries(e._x_virtualDirectives).map(([a,c])=>({name:a,value:c})),s=Et(o);o=o.map(a=>s.find(c=>c.name===a.name)?{name:`x-bind:${a.name}`,value:`\"${a.value}\"`}:a),t=t.concat(o)}let n={};return t.map(dr((o,s)=>n[o]=s)).filter(mr).map(zn(n,r)).sort(Kn).map(o=>Bn(e,o))}function Et(e){return Array.from(e).map(dr()).filter(t=>!mr(t))}var yt=!1,de=new Map,ur=Symbol();function fr(e){yt=!0;let t=Symbol();ur=t,de.set(t,[]);let r=()=>{for(;de.get(t).length;)de.get(t).shift()();de.delete(t)},n=()=>{yt=!1,r()};e(r),n()}function _t(e){let t=[],r=a=>t.push(a),[n,i]=Yt(e);return t.push(i),[{Alpine:K,effect:n,cleanup:r,evaluateLater:x.bind(x,e),evaluate:R.bind(R,e)},()=>t.forEach(a=>a())]}function Bn(e,t){let r=()=>{},n=De[t.type]||r,[i,o]=_t(e);Oe(e,t.original,o);let s=()=>{e._x_ignore||e._x_ignoreSelf||(n.inline&&n.inline(e,t,i),n=n.bind(n,e,t,i),yt?de.get(ur).push(n):n())};return s.runCleanups=o,s}var Pe=(e,t)=>({name:r,value:n})=>(r.startsWith(e)&&(r=r.replace(e,t)),{name:r,value:n}),Ie=e=>e;function dr(e=()=>{}){return({name:t,value:r})=>{let{name:n,value:i}=pr.reduce((o,s)=>s(o),{name:t,value:r});return n!==t&&e(n,t),{name:n,value:i}}}var pr=[];function ne(e){pr.push(e)}function mr({name:e}){return hr().test(e)}var hr=()=>new RegExp(`^${wt}([^:^.]+)\\\\b`);function zn(e,t){return({name:r,value:n})=>{let i=r.match(hr()),o=r.match(/:([a-zA-Z0-9\\-_:]+)/),s=r.match(/\\.[^.\\]]+(?=[^\\]]*$)/g)||[],a=t||e[r]||r;return{type:i?i[1]:null,value:o?o[1]:null,modifiers:s.map(c=>c.replace(\".\",\"\")),expression:n,original:a}}}var bt=\"DEFAULT\",G=[\"ignore\",\"ref\",\"data\",\"id\",\"anchor\",\"bind\",\"init\",\"for\",\"model\",\"modelable\",\"transition\",\"show\",\"if\",bt,\"teleport\"];function Kn(e,t){let r=G.indexOf(e.type)===-1?bt:e.type,n=G.indexOf(t.type)===-1?bt:t.type;return G.indexOf(r)-G.indexOf(n)}function J(e,t,r={}){e.dispatchEvent(new CustomEvent(t,{detail:r,bubbles:!0,composed:!0,cancelable:!0}))}function D(e,t){if(typeof ShadowRoot==\"function\"&&e instanceof ShadowRoot){Array.from(e.children).forEach(i=>D(i,t));return}let r=!1;if(t(e,()=>r=!0),r)return;let n=e.firstElementChild;for(;n;)D(n,t,!1),n=n.nextElementSibling}function E(e,...t){console.warn(`Alpine Warning: ${e}`,...t)}var _r=!1;function gr(){_r&&E(\"Alpine has already been initialized on this page. Calling Alpine.start() more than once can cause problems.\"),_r=!0,document.body||E(\"Unable to initialize. Trying to load Alpine before `<body>` is available. Did you forget to add `defer` in Alpine's `<script>` tag?\"),J(document,\"alpine:init\"),J(document,\"alpine:initializing\"),ue(),er(t=>S(t,D)),te(t=>P(t)),Ae((t,r)=>{pe(t,r).forEach(n=>n())});let e=t=>!Y(t.parentElement,!0);Array.from(document.querySelectorAll(br().join(\",\"))).filter(e).forEach(t=>{S(t)}),J(document,\"alpine:initialized\"),setTimeout(()=>{Vn()})}var vt=[],xr=[];function yr(){return vt.map(e=>e())}function br(){return vt.concat(xr).map(e=>e())}function Le(e){vt.push(e)}function $e(e){xr.push(e)}function Y(e,t=!1){return j(e,r=>{if((t?br():yr()).some(i=>r.matches(i)))return!0})}function j(e,t){if(e){if(t(e))return e;if(e._x_teleportBack&&(e=e._x_teleportBack),!!e.parentElement)return j(e.parentElement,t)}}function wr(e){return yr().some(t=>e.matches(t))}var Er=[];function vr(e){Er.push(e)}var Hn=1;function S(e,t=D,r=()=>{}){j(e,n=>n._x_ignore)||fr(()=>{t(e,(n,i)=>{n._x_marker||(r(n,i),Er.forEach(o=>o(n,i)),pe(n,n.attributes).forEach(o=>o()),n._x_ignore||(n._x_marker=Hn++),n._x_ignore&&i())})})}function P(e,t=D){t(e,r=>{tr(r),lt(r),delete r._x_marker})}function Vn(){[[\"ui\",\"dialog\",[\"[x-dialog], [x-popover]\"]],[\"anchor\",\"anchor\",[\"[x-anchor]\"]],[\"sort\",\"sort\",[\"[x-sort]\"]]].forEach(([t,r,n])=>{lr(r)||n.some(i=>{if(document.querySelector(i))return E(`found \"${i}\", but missing ${t} plugin`),!0})})}var St=[],At=!1;function ie(e=()=>{}){return queueMicrotask(()=>{At||setTimeout(()=>{je()})}),new Promise(t=>{St.push(()=>{e(),t()})})}function je(){for(At=!1;St.length;)St.shift()()}function Sr(){At=!0}function me(e,t){return Array.isArray(t)?Ar(e,t.join(\" \")):typeof t==\"object\"&&t!==null?qn(e,t):typeof t==\"function\"?me(e,t()):Ar(e,t)}function Ar(e,t){let r=o=>o.split(\" \").filter(Boolean),n=o=>o.split(\" \").filter(s=>!e.classList.contains(s)).filter(Boolean),i=o=>(e.classList.add(...o),()=>{e.classList.remove(...o)});return t=t===!0?t=\"\":t||\"\",i(n(t))}function qn(e,t){let r=a=>a.split(\" \").filter(Boolean),n=Object.entries(t).flatMap(([a,c])=>c?r(a):!1).filter(Boolean),i=Object.entries(t).flatMap(([a,c])=>c?!1:r(a)).filter(Boolean),o=[],s=[];return i.forEach(a=>{e.classList.contains(a)&&(e.classList.remove(a),s.push(a))}),n.forEach(a=>{e.classList.contains(a)||(e.classList.add(a),o.push(a))}),()=>{s.forEach(a=>e.classList.add(a)),o.forEach(a=>e.classList.remove(a))}}function X(e,t){return typeof t==\"object\"&&t!==null?Un(e,t):Wn(e,t)}function Un(e,t){let r={};return Object.entries(t).forEach(([n,i])=>{r[n]=e.style[n],n.startsWith(\"--\")||(n=Gn(n)),e.style.setProperty(n,i)}),setTimeout(()=>{e.style.length===0&&e.removeAttribute(\"style\")}),()=>{X(e,r)}}function Wn(e,t){let r=e.getAttribute(\"style\",t);return e.setAttribute(\"style\",t),()=>{e.setAttribute(\"style\",r||\"\")}}function Gn(e){return e.replace(/([a-z])([A-Z])/g,\"$1-$2\").toLowerCase()}function he(e,t=()=>{}){let r=!1;return function(){r?t.apply(this,arguments):(r=!0,e.apply(this,arguments))}}d(\"transition\",(e,{value:t,modifiers:r,expression:n},{evaluate:i})=>{typeof n==\"function\"&&(n=i(n)),n!==!1&&(!n||typeof n==\"boolean\"?Yn(e,r,t):Jn(e,n,t))});function Jn(e,t,r){Or(e,me,\"\"),{enter:i=>{e._x_transition.enter.during=i},\"enter-start\":i=>{e._x_transition.enter.start=i},\"enter-end\":i=>{e._x_transition.enter.end=i},leave:i=>{e._x_transition.leave.during=i},\"leave-start\":i=>{e._x_transition.leave.start=i},\"leave-end\":i=>{e._x_transition.leave.end=i}}[r](t)}function Yn(e,t,r){Or(e,X);let n=!t.includes(\"in\")&&!t.includes(\"out\")&&!r,i=n||t.includes(\"in\")||[\"enter\"].includes(r),o=n||t.includes(\"out\")||[\"leave\"].includes(r);t.includes(\"in\")&&!n&&(t=t.filter((g,b)=>b<t.indexOf(\"out\"))),t.includes(\"out\")&&!n&&(t=t.filter((g,b)=>b>t.indexOf(\"out\")));let s=!t.includes(\"opacity\")&&!t.includes(\"scale\"),a=s||t.includes(\"opacity\"),c=s||t.includes(\"scale\"),l=a?0:1,u=c?_e(t,\"scale\",95)/100:1,p=_e(t,\"delay\",0)/1e3,h=_e(t,\"origin\",\"center\"),w=\"opacity, transform\",F=_e(t,\"duration\",150)/1e3,Ee=_e(t,\"duration\",75)/1e3,f=\"cubic-bezier(0.4, 0.0, 0.2, 1)\";i&&(e._x_transition.enter.during={transformOrigin:h,transitionDelay:`${p}s`,transitionProperty:w,transitionDuration:`${F}s`,transitionTimingFunction:f},e._x_transition.enter.start={opacity:l,transform:`scale(${u})`},e._x_transition.enter.end={opacity:1,transform:\"scale(1)\"}),o&&(e._x_transition.leave.during={transformOrigin:h,transitionDelay:`${p}s`,transitionProperty:w,transitionDuration:`${Ee}s`,transitionTimingFunction:f},e._x_transition.leave.start={opacity:1,transform:\"scale(1)\"},e._x_transition.leave.end={opacity:l,transform:`scale(${u})`})}function Or(e,t,r={}){e._x_transition||(e._x_transition={enter:{during:r,start:r,end:r},leave:{during:r,start:r,end:r},in(n=()=>{},i=()=>{}){Fe(e,t,{during:this.enter.during,start:this.enter.start,end:this.enter.end},n,i)},out(n=()=>{},i=()=>{}){Fe(e,t,{during:this.leave.during,start:this.leave.start,end:this.leave.end},n,i)}})}window.Element.prototype._x_toggleAndCascadeWithTransitions=function(e,t,r,n){let i=document.visibilityState===\"visible\"?requestAnimationFrame:setTimeout,o=()=>i(r);if(t){e._x_transition&&(e._x_transition.enter||e._x_transition.leave)?e._x_transition.enter&&(Object.entries(e._x_transition.enter.during).length||Object.entries(e._x_transition.enter.start).length||Object.entries(e._x_transition.enter.end).length)?e._x_transition.in(r):o():e._x_transition?e._x_transition.in(r):o();return}e._x_hidePromise=e._x_transition?new Promise((s,a)=>{e._x_transition.out(()=>{},()=>s(n)),e._x_transitioning&&e._x_transitioning.beforeCancel(()=>a({isFromCancelledTransition:!0}))}):Promise.resolve(n),queueMicrotask(()=>{let s=Cr(e);s?(s._x_hideChildren||(s._x_hideChildren=[]),s._x_hideChildren.push(e)):i(()=>{let a=c=>{let l=Promise.all([c._x_hidePromise,...(c._x_hideChildren||[]).map(a)]).then(([u])=>u?.());return delete c._x_hidePromise,delete c._x_hideChildren,l};a(e).catch(c=>{if(!c.isFromCancelledTransition)throw c})})})};function Cr(e){let t=e.parentNode;if(t)return t._x_hidePromise?t:Cr(t)}function Fe(e,t,{during:r,start:n,end:i}={},o=()=>{},s=()=>{}){if(e._x_transitioning&&e._x_transitioning.cancel(),Object.keys(r).length===0&&Object.keys(n).length===0&&Object.keys(i).length===0){o(),s();return}let a,c,l;Xn(e,{start(){a=t(e,n)},during(){c=t(e,r)},before:o,end(){a(),l=t(e,i)},after:s,cleanup(){c(),l()}})}function Xn(e,t){let r,n,i,o=he(()=>{m(()=>{r=!0,n||t.before(),i||(t.end(),je()),t.after(),e.isConnected&&t.cleanup(),delete e._x_transitioning})});e._x_transitioning={beforeCancels:[],beforeCancel(s){this.beforeCancels.push(s)},cancel:he(function(){for(;this.beforeCancels.length;)this.beforeCancels.shift()();o()}),finish:o},m(()=>{t.start(),t.during()}),Sr(),requestAnimationFrame(()=>{if(r)return;let s=Number(getComputedStyle(e).transitionDuration.replace(/,.*/,\"\").replace(\"s\",\"\"))*1e3,a=Number(getComputedStyle(e).transitionDelay.replace(/,.*/,\"\").replace(\"s\",\"\"))*1e3;s===0&&(s=Number(getComputedStyle(e).animationDuration.replace(\"s\",\"\"))*1e3),m(()=>{t.before()}),n=!0,requestAnimationFrame(()=>{r||(m(()=>{t.end()}),je(),setTimeout(e._x_transitioning.finish,s+a),i=!0)})})}function _e(e,t,r){if(e.indexOf(t)===-1)return r;let n=e[e.indexOf(t)+1];if(!n||t===\"scale\"&&isNaN(n))return r;if(t===\"duration\"||t===\"delay\"){let i=n.match(/([0-9]+)ms/);if(i)return i[1]}return t===\"origin\"&&[\"top\",\"right\",\"left\",\"center\",\"bottom\"].includes(e[e.indexOf(t)+2])?[n,e[e.indexOf(t)+2]].join(\" \"):n}var I=!1;function A(e,t=()=>{}){return(...r)=>I?t(...r):e(...r)}function Tr(e){return(...t)=>I&&e(...t)}var Rr=[];function H(e){Rr.push(e)}function Mr(e,t){Rr.forEach(r=>r(e,t)),I=!0,kr(()=>{S(t,(r,n)=>{n(r,()=>{})})}),I=!1}var Be=!1;function Nr(e,t){t._x_dataStack||(t._x_dataStack=e._x_dataStack),I=!0,Be=!0,kr(()=>{Zn(t)}),I=!1,Be=!1}function Zn(e){let t=!1;S(e,(n,i)=>{D(n,(o,s)=>{if(t&&wr(o))return s();t=!0,i(o,s)})})}function kr(e){let t=N;ct((r,n)=>{let i=t(r);return $(i),()=>{}}),e(),ct(t)}function ge(e,t,r,n=[]){switch(e._x_bindings||(e._x_bindings=T({})),e._x_bindings[t]=r,t=n.includes(\"camel\")?si(t):t,t){case\"value\":Qn(e,r);break;case\"style\":ti(e,r);break;case\"class\":ei(e,r);break;case\"selected\":case\"checked\":ri(e,t,r);break;default:Pr(e,t,r);break}}function Qn(e,t){if(Ot(e))e.attributes.value===void 0&&(e.value=t),window.fromModel&&(typeof t==\"boolean\"?e.checked=xe(e.value)===t:e.checked=Dr(e.value,t));else if(ze(e))Number.isInteger(t)?e.value=t:!Array.isArray(t)&&typeof t!=\"boolean\"&&![null,void 0].includes(t)?e.value=String(t):Array.isArray(t)?e.checked=t.some(r=>Dr(r,e.value)):e.checked=!!t;else if(e.tagName===\"SELECT\")oi(e,t);else{if(e.value===t)return;e.value=t===void 0?\"\":t}}function ei(e,t){e._x_undoAddedClasses&&e._x_undoAddedClasses(),e._x_undoAddedClasses=me(e,t)}function ti(e,t){e._x_undoAddedStyles&&e._x_undoAddedStyles(),e._x_undoAddedStyles=X(e,t)}function ri(e,t,r){Pr(e,t,r),ii(e,t,r)}function Pr(e,t,r){[null,void 0,!1].includes(r)&&ci(t)?e.removeAttribute(t):(Ir(t)&&(r=t),ni(e,t,r))}function ni(e,t,r){e.getAttribute(t)!=r&&e.setAttribute(t,r)}function ii(e,t,r){e[t]!==r&&(e[t]=r)}function oi(e,t){let r=[].concat(t).map(n=>n+\"\");Array.from(e.options).forEach(n=>{n.selected=r.includes(n.value)})}function si(e){return e.toLowerCase().replace(/-(\\w)/g,(t,r)=>r.toUpperCase())}function Dr(e,t){return e==t}function xe(e){return[1,\"1\",\"true\",\"on\",\"yes\",!0].includes(e)?!0:[0,\"0\",\"false\",\"off\",\"no\",!1].includes(e)?!1:e?Boolean(e):null}var ai=new Set([\"allowfullscreen\",\"async\",\"autofocus\",\"autoplay\",\"checked\",\"controls\",\"default\",\"defer\",\"disabled\",\"formnovalidate\",\"inert\",\"ismap\",\"itemscope\",\"loop\",\"multiple\",\"muted\",\"nomodule\",\"novalidate\",\"open\",\"playsinline\",\"readonly\",\"required\",\"reversed\",\"selected\",\"shadowrootclonable\",\"shadowrootdelegatesfocus\",\"shadowrootserializable\"]);function Ir(e){return ai.has(e)}function ci(e){return![\"aria-pressed\",\"aria-checked\",\"aria-expanded\",\"aria-selected\"].includes(e)}function Lr(e,t,r){return e._x_bindings&&e._x_bindings[t]!==void 0?e._x_bindings[t]:jr(e,t,r)}function $r(e,t,r,n=!0){if(e._x_bindings&&e._x_bindings[t]!==void 0)return e._x_bindings[t];if(e._x_inlineBindings&&e._x_inlineBindings[t]!==void 0){let i=e._x_inlineBindings[t];return i.extract=n,ke(()=>R(e,i.expression))}return jr(e,t,r)}function jr(e,t,r){let n=e.getAttribute(t);return n===null?typeof r==\"function\"?r():r:n===\"\"?!0:Ir(t)?!![t,\"true\"].includes(n):n}function ze(e){return e.type===\"checkbox\"||e.localName===\"ui-checkbox\"||e.localName===\"ui-switch\"}function Ot(e){return e.type===\"radio\"||e.localName===\"ui-radio\"}function Ke(e,t){var r;return function(){var n=this,i=arguments,o=function(){r=null,e.apply(n,i)};clearTimeout(r),r=setTimeout(o,t)}}function He(e,t){let r;return function(){let n=this,i=arguments;r||(e.apply(n,i),r=!0,setTimeout(()=>r=!1,t))}}function Ve({get:e,set:t},{get:r,set:n}){let i=!0,o,s,a=N(()=>{let c=e(),l=r();if(i)n(Ct(c)),i=!1;else{let u=JSON.stringify(c),p=JSON.stringify(l);u!==o?n(Ct(c)):u!==p&&t(Ct(l))}o=JSON.stringify(e()),s=JSON.stringify(r())});return()=>{$(a)}}function Ct(e){return typeof e==\"object\"?JSON.parse(JSON.stringify(e)):e}function Fr(e){(Array.isArray(e)?e:[e]).forEach(r=>r(K))}var Z={},Br=!1;function zr(e,t){if(Br||(Z=T(Z),Br=!0),t===void 0)return Z[e];Z[e]=t,Te(Z[e]),typeof t==\"object\"&&t!==null&&t.hasOwnProperty(\"init\")&&typeof t.init==\"function\"&&Z[e].init()}function Kr(){return Z}var Hr={};function Vr(e,t){let r=typeof t!=\"function\"?()=>t:t;return e instanceof Element?Tt(e,r()):(Hr[e]=r,()=>{})}function qr(e){return Object.entries(Hr).forEach(([t,r])=>{Object.defineProperty(e,t,{get(){return(...n)=>r(...n)}})}),e}function Tt(e,t,r){let n=[];for(;n.length;)n.pop()();let i=Object.entries(t).map(([s,a])=>({name:s,value:a})),o=Et(i);return i=i.map(s=>o.find(a=>a.name===s.name)?{name:`x-bind:${s.name}`,value:`\"${s.value}\"`}:s),pe(e,i,r).map(s=>{n.push(s.runCleanups),s()}),()=>{for(;n.length;)n.pop()()}}var Ur={};function Wr(e,t){Ur[e]=t}function Gr(e,t){return Object.entries(Ur).forEach(([r,n])=>{Object.defineProperty(e,r,{get(){return(...i)=>n.bind(t)(...i)},enumerable:!1})}),e}var li={get reactive(){return T},get release(){return $},get effect(){return N},get raw(){return at},version:\"3.14.9\",flushAndStopDeferringMutations:nr,dontAutoEvaluateFunctions:ke,disableEffectScheduling:Gt,startObservingMutations:ue,stopObservingMutations:dt,setReactivityEngine:Jt,onAttributeRemoved:Oe,onAttributesAdded:Ae,closestDataStack:B,skipDuringClone:A,onlyDuringClone:Tr,addRootSelector:Le,addInitSelector:$e,interceptClone:H,addScopeToNode:k,deferMutations:rr,mapAttributes:ne,evaluateLater:x,interceptInit:vr,setEvaluator:ar,mergeProxies:z,extractProp:$r,findClosest:j,onElRemoved:te,closestRoot:Y,destroyTree:P,interceptor:Re,transition:Fe,setStyles:X,mutateDom:m,directive:d,entangle:Ve,throttle:He,debounce:Ke,evaluate:R,initTree:S,nextTick:ie,prefixed:C,prefix:cr,plugin:Fr,magic:y,store:zr,start:gr,clone:Nr,cloneNode:Mr,bound:Lr,$data:Ce,watch:ve,walk:D,data:Wr,bind:Vr},K=li;function Rt(e,t){let r=Object.create(null),n=e.split(\",\");for(let i=0;i<n.length;i++)r[n[i]]=!0;return t?i=>!!r[i.toLowerCase()]:i=>!!r[i]}var ui=\"itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly\";var Ls=Rt(ui+\",async,autofocus,autoplay,controls,default,defer,disabled,hidden,loop,open,required,reversed,scoped,seamless,checked,muted,multiple,selected\");var Jr=Object.freeze({}),$s=Object.freeze([]);var fi=Object.prototype.hasOwnProperty,ye=(e,t)=>fi.call(e,t),V=Array.isArray,oe=e=>Yr(e)===\"[object Map]\";var di=e=>typeof e==\"string\",qe=e=>typeof e==\"symbol\",be=e=>e!==null&&typeof e==\"object\";var pi=Object.prototype.toString,Yr=e=>pi.call(e),Mt=e=>Yr(e).slice(8,-1);var Ue=e=>di(e)&&e!==\"NaN\"&&e[0]!==\"-\"&&\"\"+parseInt(e,10)===e;var We=e=>{let t=Object.create(null);return r=>t[r]||(t[r]=e(r))},mi=/-(\\w)/g,js=We(e=>e.replace(mi,(t,r)=>r?r.toUpperCase():\"\")),hi=/\\B([A-Z])/g,Fs=We(e=>e.replace(hi,\"-$1\").toLowerCase()),Nt=We(e=>e.charAt(0).toUpperCase()+e.slice(1)),Bs=We(e=>e?`on${Nt(e)}`:\"\"),kt=(e,t)=>e!==t&&(e===e||t===t);var Dt=new WeakMap,we=[],L,Q=Symbol(\"iterate\"),Pt=Symbol(\"Map key iterate\");function _i(e){return e&&e._isEffect===!0}function rn(e,t=Jr){_i(e)&&(e=e.raw);let r=xi(e,t);return t.lazy||r(),r}function nn(e){e.active&&(on(e),e.options.onStop&&e.options.onStop(),e.active=!1)}var gi=0;function xi(e,t){let r=function(){if(!r.active)return e();if(!we.includes(r)){on(r);try{return bi(),we.push(r),L=r,e()}finally{we.pop(),sn(),L=we[we.length-1]}}};return r.id=gi++,r.allowRecurse=!!t.allowRecurse,r._isEffect=!0,r.active=!0,r.raw=e,r.deps=[],r.options=t,r}function on(e){let{deps:t}=e;if(t.length){for(let r=0;r<t.length;r++)t[r].delete(e);t.length=0}}var se=!0,Lt=[];function yi(){Lt.push(se),se=!1}function bi(){Lt.push(se),se=!0}function sn(){let e=Lt.pop();se=e===void 0?!0:e}function M(e,t,r){if(!se||L===void 0)return;let n=Dt.get(e);n||Dt.set(e,n=new Map);let i=n.get(r);i||n.set(r,i=new Set),i.has(L)||(i.add(L),L.deps.push(i),L.options.onTrack&&L.options.onTrack({effect:L,target:e,type:t,key:r}))}function U(e,t,r,n,i,o){let s=Dt.get(e);if(!s)return;let a=new Set,c=u=>{u&&u.forEach(p=>{(p!==L||p.allowRecurse)&&a.add(p)})};if(t===\"clear\")s.forEach(c);else if(r===\"length\"&&V(e))s.forEach((u,p)=>{(p===\"length\"||p>=n)&&c(u)});else switch(r!==void 0&&c(s.get(r)),t){case\"add\":V(e)?Ue(r)&&c(s.get(\"length\")):(c(s.get(Q)),oe(e)&&c(s.get(Pt)));break;case\"delete\":V(e)||(c(s.get(Q)),oe(e)&&c(s.get(Pt)));break;case\"set\":oe(e)&&c(s.get(Q));break}let l=u=>{u.options.onTrigger&&u.options.onTrigger({effect:u,target:e,key:r,type:t,newValue:n,oldValue:i,oldTarget:o}),u.options.scheduler?u.options.scheduler(u):u()};a.forEach(l)}var wi=Rt(\"__proto__,__v_isRef,__isVue\"),an=new Set(Object.getOwnPropertyNames(Symbol).map(e=>Symbol[e]).filter(qe)),Ei=cn();var vi=cn(!0);var Xr=Si();function Si(){let e={};return[\"includes\",\"indexOf\",\"lastIndexOf\"].forEach(t=>{e[t]=function(...r){let n=_(this);for(let o=0,s=this.length;o<s;o++)M(n,\"get\",o+\"\");let i=n[t](...r);return i===-1||i===!1?n[t](...r.map(_)):i}}),[\"push\",\"pop\",\"shift\",\"unshift\",\"splice\"].forEach(t=>{e[t]=function(...r){yi();let n=_(this)[t].apply(this,r);return sn(),n}}),e}function cn(e=!1,t=!1){return function(n,i,o){if(i===\"__v_isReactive\")return!e;if(i===\"__v_isReadonly\")return e;if(i===\"__v_raw\"&&o===(e?t?Bi:dn:t?Fi:fn).get(n))return n;let s=V(n);if(!e&&s&&ye(Xr,i))return Reflect.get(Xr,i,o);let a=Reflect.get(n,i,o);return(qe(i)?an.has(i):wi(i))||(e||M(n,\"get\",i),t)?a:It(a)?!s||!Ue(i)?a.value:a:be(a)?e?pn(a):et(a):a}}var Ai=Oi();function Oi(e=!1){return function(r,n,i,o){let s=r[n];if(!e&&(i=_(i),s=_(s),!V(r)&&It(s)&&!It(i)))return s.value=i,!0;let a=V(r)&&Ue(n)?Number(n)<r.length:ye(r,n),c=Reflect.set(r,n,i,o);return r===_(o)&&(a?kt(i,s)&&U(r,\"set\",n,i,s):U(r,\"add\",n,i)),c}}function Ci(e,t){let r=ye(e,t),n=e[t],i=Reflect.deleteProperty(e,t);return i&&r&&U(e,\"delete\",t,void 0,n),i}function Ti(e,t){let r=Reflect.has(e,t);return(!qe(t)||!an.has(t))&&M(e,\"has\",t),r}function Ri(e){return M(e,\"iterate\",V(e)?\"length\":Q),Reflect.ownKeys(e)}var Mi={get:Ei,set:Ai,deleteProperty:Ci,has:Ti,ownKeys:Ri},Ni={get:vi,set(e,t){return console.warn(`Set operation on key \"${String(t)}\" failed: target is readonly.`,e),!0},deleteProperty(e,t){return console.warn(`Delete operation on key \"${String(t)}\" failed: target is readonly.`,e),!0}};var $t=e=>be(e)?et(e):e,jt=e=>be(e)?pn(e):e,Ft=e=>e,Qe=e=>Reflect.getPrototypeOf(e);function Ge(e,t,r=!1,n=!1){e=e.__v_raw;let i=_(e),o=_(t);t!==o&&!r&&M(i,\"get\",t),!r&&M(i,\"get\",o);let{has:s}=Qe(i),a=n?Ft:r?jt:$t;if(s.call(i,t))return a(e.get(t));if(s.call(i,o))return a(e.get(o));e!==i&&e.get(t)}function Je(e,t=!1){let r=this.__v_raw,n=_(r),i=_(e);return e!==i&&!t&&M(n,\"has\",e),!t&&M(n,\"has\",i),e===i?r.has(e):r.has(e)||r.has(i)}function Ye(e,t=!1){return e=e.__v_raw,!t&&M(_(e),\"iterate\",Q),Reflect.get(e,\"size\",e)}function Zr(e){e=_(e);let t=_(this);return Qe(t).has.call(t,e)||(t.add(e),U(t,\"add\",e,e)),this}function Qr(e,t){t=_(t);let r=_(this),{has:n,get:i}=Qe(r),o=n.call(r,e);o?un(r,n,e):(e=_(e),o=n.call(r,e));let s=i.call(r,e);return r.set(e,t),o?kt(t,s)&&U(r,\"set\",e,t,s):U(r,\"add\",e,t),this}function en(e){let t=_(this),{has:r,get:n}=Qe(t),i=r.call(t,e);i?un(t,r,e):(e=_(e),i=r.call(t,e));let o=n?n.call(t,e):void 0,s=t.delete(e);return i&&U(t,\"delete\",e,void 0,o),s}function tn(){let e=_(this),t=e.size!==0,r=oe(e)?new Map(e):new Set(e),n=e.clear();return t&&U(e,\"clear\",void 0,void 0,r),n}function Xe(e,t){return function(n,i){let o=this,s=o.__v_raw,a=_(s),c=t?Ft:e?jt:$t;return!e&&M(a,\"iterate\",Q),s.forEach((l,u)=>n.call(i,c(l),c(u),o))}}function Ze(e,t,r){return function(...n){let i=this.__v_raw,o=_(i),s=oe(o),a=e===\"entries\"||e===Symbol.iterator&&s,c=e===\"keys\"&&s,l=i[e](...n),u=r?Ft:t?jt:$t;return!t&&M(o,\"iterate\",c?Pt:Q),{next(){let{value:p,done:h}=l.next();return h?{value:p,done:h}:{value:a?[u(p[0]),u(p[1])]:u(p),done:h}},[Symbol.iterator](){return this}}}}function q(e){return function(...t){{let r=t[0]?`on key \"${t[0]}\" `:\"\";console.warn(`${Nt(e)} operation ${r}failed: target is readonly.`,_(this))}return e===\"delete\"?!1:this}}function ki(){let e={get(o){return Ge(this,o)},get size(){return Ye(this)},has:Je,add:Zr,set:Qr,delete:en,clear:tn,forEach:Xe(!1,!1)},t={get(o){return Ge(this,o,!1,!0)},get size(){return Ye(this)},has:Je,add:Zr,set:Qr,delete:en,clear:tn,forEach:Xe(!1,!0)},r={get(o){return Ge(this,o,!0)},get size(){return Ye(this,!0)},has(o){return Je.call(this,o,!0)},add:q(\"add\"),set:q(\"set\"),delete:q(\"delete\"),clear:q(\"clear\"),forEach:Xe(!0,!1)},n={get(o){return Ge(this,o,!0,!0)},get size(){return Ye(this,!0)},has(o){return Je.call(this,o,!0)},add:q(\"add\"),set:q(\"set\"),delete:q(\"delete\"),clear:q(\"clear\"),forEach:Xe(!0,!0)};return[\"keys\",\"values\",\"entries\",Symbol.iterator].forEach(o=>{e[o]=Ze(o,!1,!1),r[o]=Ze(o,!0,!1),t[o]=Ze(o,!1,!0),n[o]=Ze(o,!0,!0)}),[e,r,t,n]}var[Di,Pi,Ii,Li]=ki();function ln(e,t){let r=t?e?Li:Ii:e?Pi:Di;return(n,i,o)=>i===\"__v_isReactive\"?!e:i===\"__v_isReadonly\"?e:i===\"__v_raw\"?n:Reflect.get(ye(r,i)&&i in n?r:n,i,o)}var $i={get:ln(!1,!1)};var ji={get:ln(!0,!1)};function un(e,t,r){let n=_(r);if(n!==r&&t.call(e,n)){let i=Mt(e);console.warn(`Reactive ${i} contains both the raw and reactive versions of the same object${i===\"Map\"?\" as keys\":\"\"}, which can lead to inconsistencies. Avoid differentiating between the raw and reactive versions of an object and only use the reactive version if possible.`)}}var fn=new WeakMap,Fi=new WeakMap,dn=new WeakMap,Bi=new WeakMap;function zi(e){switch(e){case\"Object\":case\"Array\":return 1;case\"Map\":case\"Set\":case\"WeakMap\":case\"WeakSet\":return 2;default:return 0}}function Ki(e){return e.__v_skip||!Object.isExtensible(e)?0:zi(Mt(e))}function et(e){return e&&e.__v_isReadonly?e:mn(e,!1,Mi,$i,fn)}function pn(e){return mn(e,!0,Ni,ji,dn)}function mn(e,t,r,n,i){if(!be(e))return console.warn(`value cannot be made reactive: ${String(e)}`),e;if(e.__v_raw&&!(t&&e.__v_isReactive))return e;let o=i.get(e);if(o)return o;let s=Ki(e);if(s===0)return e;let a=new Proxy(e,s===2?n:r);return i.set(e,a),a}function _(e){return e&&_(e.__v_raw)||e}function It(e){return Boolean(e&&e.__v_isRef===!0)}y(\"nextTick\",()=>ie);y(\"dispatch\",e=>J.bind(J,e));y(\"watch\",(e,{evaluateLater:t,cleanup:r})=>(n,i)=>{let o=t(n),a=ve(()=>{let c;return o(l=>c=l),c},i);r(a)});y(\"store\",Kr);y(\"data\",e=>Ce(e));y(\"root\",e=>Y(e));y(\"refs\",e=>(e._x_refs_proxy||(e._x_refs_proxy=z(Hi(e))),e._x_refs_proxy));function Hi(e){let t=[];return j(e,r=>{r._x_refs&&t.push(r._x_refs)}),t}var Bt={};function zt(e){return Bt[e]||(Bt[e]=0),++Bt[e]}function hn(e,t){return j(e,r=>{if(r._x_ids&&r._x_ids[t])return!0})}function _n(e,t){e._x_ids||(e._x_ids={}),e._x_ids[t]||(e._x_ids[t]=zt(t))}y(\"id\",(e,{cleanup:t})=>(r,n=null)=>{let i=`${r}${n?`-${n}`:\"\"}`;return Vi(e,i,t,()=>{let o=hn(e,r),s=o?o._x_ids[r]:zt(r);return n?`${r}-${s}-${n}`:`${r}-${s}`})});H((e,t)=>{e._x_id&&(t._x_id=e._x_id)});function Vi(e,t,r,n){if(e._x_id||(e._x_id={}),e._x_id[t])return e._x_id[t];let i=n();return e._x_id[t]=i,r(()=>{delete e._x_id[t]}),i}y(\"el\",e=>e);gn(\"Focus\",\"focus\",\"focus\");gn(\"Persist\",\"persist\",\"persist\");function gn(e,t,r){y(t,n=>E(`You can't use [$${t}] without first installing the \"${e}\" plugin here: https://alpinejs.dev/plugins/${r}`,n))}d(\"modelable\",(e,{expression:t},{effect:r,evaluateLater:n,cleanup:i})=>{let o=n(t),s=()=>{let u;return o(p=>u=p),u},a=n(`${t} = __placeholder`),c=u=>a(()=>{},{scope:{__placeholder:u}}),l=s();c(l),queueMicrotask(()=>{if(!e._x_model)return;e._x_removeModelListeners.default();let u=e._x_model.get,p=e._x_model.set,h=Ve({get(){return u()},set(w){p(w)}},{get(){return s()},set(w){c(w)}});i(h)})});d(\"teleport\",(e,{modifiers:t,expression:r},{cleanup:n})=>{e.tagName.toLowerCase()!==\"template\"&&E(\"x-teleport can only be used on a <template> tag\",e);let i=xn(r),o=e.content.cloneNode(!0).firstElementChild;e._x_teleport=o,o._x_teleportBack=e,e.setAttribute(\"data-teleport-template\",!0),o.setAttribute(\"data-teleport-target\",!0),e._x_forwardEvents&&e._x_forwardEvents.forEach(a=>{o.addEventListener(a,c=>{c.stopPropagation(),e.dispatchEvent(new c.constructor(c.type,c))})}),k(o,{},e);let s=(a,c,l)=>{l.includes(\"prepend\")?c.parentNode.insertBefore(a,c):l.includes(\"append\")?c.parentNode.insertBefore(a,c.nextSibling):c.appendChild(a)};m(()=>{s(o,i,t),A(()=>{S(o)})()}),e._x_teleportPutBack=()=>{let a=xn(r);m(()=>{s(e._x_teleport,a,t)})},n(()=>m(()=>{o.remove(),P(o)}))});var qi=document.createElement(\"div\");function xn(e){let t=A(()=>document.querySelector(e),()=>qi)();return t||E(`Cannot find x-teleport element for selector: \"${e}\"`),t}var yn=()=>{};yn.inline=(e,{modifiers:t},{cleanup:r})=>{t.includes(\"self\")?e._x_ignoreSelf=!0:e._x_ignore=!0,r(()=>{t.includes(\"self\")?delete e._x_ignoreSelf:delete e._x_ignore})};d(\"ignore\",yn);d(\"effect\",A((e,{expression:t},{effect:r})=>{r(x(e,t))}));function ae(e,t,r,n){let i=e,o=c=>n(c),s={},a=(c,l)=>u=>l(c,u);if(r.includes(\"dot\")&&(t=Ui(t)),r.includes(\"camel\")&&(t=Wi(t)),r.includes(\"passive\")&&(s.passive=!0),r.includes(\"capture\")&&(s.capture=!0),r.includes(\"window\")&&(i=window),r.includes(\"document\")&&(i=document),r.includes(\"debounce\")){let c=r[r.indexOf(\"debounce\")+1]||\"invalid-wait\",l=tt(c.split(\"ms\")[0])?Number(c.split(\"ms\")[0]):250;o=Ke(o,l)}if(r.includes(\"throttle\")){let c=r[r.indexOf(\"throttle\")+1]||\"invalid-wait\",l=tt(c.split(\"ms\")[0])?Number(c.split(\"ms\")[0]):250;o=He(o,l)}return r.includes(\"prevent\")&&(o=a(o,(c,l)=>{l.preventDefault(),c(l)})),r.includes(\"stop\")&&(o=a(o,(c,l)=>{l.stopPropagation(),c(l)})),r.includes(\"once\")&&(o=a(o,(c,l)=>{c(l),i.removeEventListener(t,o,s)})),(r.includes(\"away\")||r.includes(\"outside\"))&&(i=document,o=a(o,(c,l)=>{e.contains(l.target)||l.target.isConnected!==!1&&(e.offsetWidth<1&&e.offsetHeight<1||e._x_isShown!==!1&&c(l))})),r.includes(\"self\")&&(o=a(o,(c,l)=>{l.target===e&&c(l)})),(Ji(t)||wn(t))&&(o=a(o,(c,l)=>{Yi(l,r)||c(l)})),i.addEventListener(t,o,s),()=>{i.removeEventListener(t,o,s)}}function Ui(e){return e.replace(/-/g,\".\")}function Wi(e){return e.toLowerCase().replace(/-(\\w)/g,(t,r)=>r.toUpperCase())}function tt(e){return!Array.isArray(e)&&!isNaN(e)}function Gi(e){return[\" \",\"_\"].includes(e)?e:e.replace(/([a-z])([A-Z])/g,\"$1-$2\").replace(/[_\\s]/,\"-\").toLowerCase()}function Ji(e){return[\"keydown\",\"keyup\"].includes(e)}function wn(e){return[\"contextmenu\",\"click\",\"mouse\"].some(t=>e.includes(t))}function Yi(e,t){let r=t.filter(o=>![\"window\",\"document\",\"prevent\",\"stop\",\"once\",\"capture\",\"self\",\"away\",\"outside\",\"passive\"].includes(o));if(r.includes(\"debounce\")){let o=r.indexOf(\"debounce\");r.splice(o,tt((r[o+1]||\"invalid-wait\").split(\"ms\")[0])?2:1)}if(r.includes(\"throttle\")){let o=r.indexOf(\"throttle\");r.splice(o,tt((r[o+1]||\"invalid-wait\").split(\"ms\")[0])?2:1)}if(r.length===0||r.length===1&&bn(e.key).includes(r[0]))return!1;let i=[\"ctrl\",\"shift\",\"alt\",\"meta\",\"cmd\",\"super\"].filter(o=>r.includes(o));return r=r.filter(o=>!i.includes(o)),!(i.length>0&&i.filter(s=>((s===\"cmd\"||s===\"super\")&&(s=\"meta\"),e[`${s}Key`])).length===i.length&&(wn(e.type)||bn(e.key).includes(r[0])))}function bn(e){if(!e)return[];e=Gi(e);let t={ctrl:\"control\",slash:\"/\",space:\" \",spacebar:\" \",cmd:\"meta\",esc:\"escape\",up:\"arrow-up\",down:\"arrow-down\",left:\"arrow-left\",right:\"arrow-right\",period:\".\",comma:\",\",equal:\"=\",minus:\"-\",underscore:\"_\"};return t[e]=e,Object.keys(t).map(r=>{if(t[r]===e)return r}).filter(r=>r)}d(\"model\",(e,{modifiers:t,expression:r},{effect:n,cleanup:i})=>{let o=e;t.includes(\"parent\")&&(o=e.parentNode);let s=x(o,r),a;typeof r==\"string\"?a=x(o,`${r} = __placeholder`):typeof r==\"function\"&&typeof r()==\"string\"?a=x(o,`${r()} = __placeholder`):a=()=>{};let c=()=>{let h;return s(w=>h=w),En(h)?h.get():h},l=h=>{let w;s(F=>w=F),En(w)?w.set(h):a(()=>{},{scope:{__placeholder:h}})};typeof r==\"string\"&&e.type===\"radio\"&&m(()=>{e.hasAttribute(\"name\")||e.setAttribute(\"name\",r)});var u=e.tagName.toLowerCase()===\"select\"||[\"checkbox\",\"radio\"].includes(e.type)||t.includes(\"lazy\")?\"change\":\"input\";let p=I?()=>{}:ae(e,u,t,h=>{l(Kt(e,t,h,c()))});if(t.includes(\"fill\")&&([void 0,null,\"\"].includes(c())||ze(e)&&Array.isArray(c())||e.tagName.toLowerCase()===\"select\"&&e.multiple)&&l(Kt(e,t,{target:e},c())),e._x_removeModelListeners||(e._x_removeModelListeners={}),e._x_removeModelListeners.default=p,i(()=>e._x_removeModelListeners.default()),e.form){let h=ae(e.form,\"reset\",[],w=>{ie(()=>e._x_model&&e._x_model.set(Kt(e,t,{target:e},c())))});i(()=>h())}e._x_model={get(){return c()},set(h){l(h)}},e._x_forceModelUpdate=h=>{h===void 0&&typeof r==\"string\"&&r.match(/\\./)&&(h=\"\"),window.fromModel=!0,m(()=>ge(e,\"value\",h)),delete window.fromModel},n(()=>{let h=c();t.includes(\"unintrusive\")&&document.activeElement.isSameNode(e)||e._x_forceModelUpdate(h)})});function Kt(e,t,r,n){return m(()=>{if(r instanceof CustomEvent&&r.detail!==void 0)return r.detail!==null&&r.detail!==void 0?r.detail:r.target.value;if(ze(e))if(Array.isArray(n)){let i=null;return t.includes(\"number\")?i=Ht(r.target.value):t.includes(\"boolean\")?i=xe(r.target.value):i=r.target.value,r.target.checked?n.includes(i)?n:n.concat([i]):n.filter(o=>!Xi(o,i))}else return r.target.checked;else{if(e.tagName.toLowerCase()===\"select\"&&e.multiple)return t.includes(\"number\")?Array.from(r.target.selectedOptions).map(i=>{let o=i.value||i.text;return Ht(o)}):t.includes(\"boolean\")?Array.from(r.target.selectedOptions).map(i=>{let o=i.value||i.text;return xe(o)}):Array.from(r.target.selectedOptions).map(i=>i.value||i.text);{let i;return Ot(e)?r.target.checked?i=r.target.value:i=n:i=r.target.value,t.includes(\"number\")?Ht(i):t.includes(\"boolean\")?xe(i):t.includes(\"trim\")?i.trim():i}}})}function Ht(e){let t=e?parseFloat(e):null;return Zi(t)?t:e}function Xi(e,t){return e==t}function Zi(e){return!Array.isArray(e)&&!isNaN(e)}function En(e){return e!==null&&typeof e==\"object\"&&typeof e.get==\"function\"&&typeof e.set==\"function\"}d(\"cloak\",e=>queueMicrotask(()=>m(()=>e.removeAttribute(C(\"cloak\")))));$e(()=>`[${C(\"init\")}]`);d(\"init\",A((e,{expression:t},{evaluate:r})=>typeof t==\"string\"?!!t.trim()&&r(t,{},!1):r(t,{},!1)));d(\"text\",(e,{expression:t},{effect:r,evaluateLater:n})=>{let i=n(t);r(()=>{i(o=>{m(()=>{e.textContent=o})})})});d(\"html\",(e,{expression:t},{effect:r,evaluateLater:n})=>{let i=n(t);r(()=>{i(o=>{m(()=>{e.innerHTML=o,e._x_ignoreSelf=!0,S(e),delete e._x_ignoreSelf})})})});ne(Pe(\":\",Ie(C(\"bind:\"))));var vn=(e,{value:t,modifiers:r,expression:n,original:i},{effect:o,cleanup:s})=>{if(!t){let c={};qr(c),x(e,n)(u=>{Tt(e,u,i)},{scope:c});return}if(t===\"key\")return Qi(e,n);if(e._x_inlineBindings&&e._x_inlineBindings[t]&&e._x_inlineBindings[t].extract)return;let a=x(e,n);o(()=>a(c=>{c===void 0&&typeof n==\"string\"&&n.match(/\\./)&&(c=\"\"),m(()=>ge(e,t,c,r))})),s(()=>{e._x_undoAddedClasses&&e._x_undoAddedClasses(),e._x_undoAddedStyles&&e._x_undoAddedStyles()})};vn.inline=(e,{value:t,modifiers:r,expression:n})=>{t&&(e._x_inlineBindings||(e._x_inlineBindings={}),e._x_inlineBindings[t]={expression:n,extract:!1})};d(\"bind\",vn);function Qi(e,t){e._x_keyExpression=t}Le(()=>`[${C(\"data\")}]`);d(\"data\",(e,{expression:t},{cleanup:r})=>{if(eo(e))return;t=t===\"\"?\"{}\":t;let n={};fe(n,e);let i={};Gr(i,n);let o=R(e,t,{scope:i});(o===void 0||o===!0)&&(o={}),fe(o,e);let s=T(o);Te(s);let a=k(e,s);s.init&&R(e,s.init),r(()=>{s.destroy&&R(e,s.destroy),a()})});H((e,t)=>{e._x_dataStack&&(t._x_dataStack=e._x_dataStack,t.setAttribute(\"data-has-alpine-state\",!0))});function eo(e){return I?Be?!0:e.hasAttribute(\"data-has-alpine-state\"):!1}d(\"show\",(e,{modifiers:t,expression:r},{effect:n})=>{let i=x(e,r);e._x_doHide||(e._x_doHide=()=>{m(()=>{e.style.setProperty(\"display\",\"none\",t.includes(\"important\")?\"important\":void 0)})}),e._x_doShow||(e._x_doShow=()=>{m(()=>{e.style.length===1&&e.style.display===\"none\"?e.removeAttribute(\"style\"):e.style.removeProperty(\"display\")})});let o=()=>{e._x_doHide(),e._x_isShown=!1},s=()=>{e._x_doShow(),e._x_isShown=!0},a=()=>setTimeout(s),c=he(p=>p?s():o(),p=>{typeof e._x_toggleAndCascadeWithTransitions==\"function\"?e._x_toggleAndCascadeWithTransitions(e,p,s,o):p?a():o()}),l,u=!0;n(()=>i(p=>{!u&&p===l||(t.includes(\"immediate\")&&(p?a():o()),c(p),l=p,u=!1)}))});d(\"for\",(e,{expression:t},{effect:r,cleanup:n})=>{let i=ro(t),o=x(e,i.items),s=x(e,e._x_keyExpression||\"index\");e._x_prevKeys=[],e._x_lookup={},r(()=>to(e,i,o,s)),n(()=>{Object.values(e._x_lookup).forEach(a=>m(()=>{P(a),a.remove()})),delete e._x_prevKeys,delete e._x_lookup})});function to(e,t,r,n){let i=s=>typeof s==\"object\"&&!Array.isArray(s),o=e;r(s=>{no(s)&&s>=0&&(s=Array.from(Array(s).keys(),f=>f+1)),s===void 0&&(s=[]);let a=e._x_lookup,c=e._x_prevKeys,l=[],u=[];if(i(s))s=Object.entries(s).map(([f,g])=>{let b=Sn(t,g,f,s);n(v=>{u.includes(v)&&E(\"Duplicate key on x-for\",e),u.push(v)},{scope:{index:f,...b}}),l.push(b)});else for(let f=0;f<s.length;f++){let g=Sn(t,s[f],f,s);n(b=>{u.includes(b)&&E(\"Duplicate key on x-for\",e),u.push(b)},{scope:{index:f,...g}}),l.push(g)}let p=[],h=[],w=[],F=[];for(let f=0;f<c.length;f++){let g=c[f];u.indexOf(g)===-1&&w.push(g)}c=c.filter(f=>!w.includes(f));let Ee=\"template\";for(let f=0;f<u.length;f++){let g=u[f],b=c.indexOf(g);if(b===-1)c.splice(f,0,g),p.push([Ee,f]);else if(b!==f){let v=c.splice(f,1)[0],O=c.splice(b-1,1)[0];c.splice(f,0,O),c.splice(b,0,v),h.push([v,O])}else F.push(g);Ee=g}for(let f=0;f<w.length;f++){let g=w[f];g in a&&(m(()=>{P(a[g]),a[g].remove()}),delete a[g])}for(let f=0;f<h.length;f++){let[g,b]=h[f],v=a[g],O=a[b],ee=document.createElement(\"div\");m(()=>{O||E('x-for \":key\" is undefined or invalid',o,b,a),O.after(ee),v.after(O),O._x_currentIfEl&&O.after(O._x_currentIfEl),ee.before(v),v._x_currentIfEl&&v.after(v._x_currentIfEl),ee.remove()}),O._x_refreshXForScope(l[u.indexOf(b)])}for(let f=0;f<p.length;f++){let[g,b]=p[f],v=g===\"template\"?o:a[g];v._x_currentIfEl&&(v=v._x_currentIfEl);let O=l[b],ee=u[b],ce=document.importNode(o.content,!0).firstElementChild,qt=T(O);k(ce,qt,o),ce._x_refreshXForScope=On=>{Object.entries(On).forEach(([Cn,Tn])=>{qt[Cn]=Tn})},m(()=>{v.after(ce),A(()=>S(ce))()}),typeof ee==\"object\"&&E(\"x-for key cannot be an object, it must be a string or an integer\",o),a[ee]=ce}for(let f=0;f<F.length;f++)a[F[f]]._x_refreshXForScope(l[u.indexOf(F[f])]);o._x_prevKeys=u})}function ro(e){let t=/,([^,\\}\\]]*)(?:,([^,\\}\\]]*))?$/,r=/^\\s*\\(|\\)\\s*$/g,n=/([\\s\\S]*?)\\s+(?:in|of)\\s+([\\s\\S]*)/,i=e.match(n);if(!i)return;let o={};o.items=i[2].trim();let s=i[1].replace(r,\"\").trim(),a=s.match(t);return a?(o.item=s.replace(t,\"\").trim(),o.index=a[1].trim(),a[2]&&(o.collection=a[2].trim())):o.item=s,o}function Sn(e,t,r,n){let i={};return/^\\[.*\\]$/.test(e.item)&&Array.isArray(t)?e.item.replace(\"[\",\"\").replace(\"]\",\"\").split(\",\").map(s=>s.trim()).forEach((s,a)=>{i[s]=t[a]}):/^\\{.*\\}$/.test(e.item)&&!Array.isArray(t)&&typeof t==\"object\"?e.item.replace(\"{\",\"\").replace(\"}\",\"\").split(\",\").map(s=>s.trim()).forEach(s=>{i[s]=t[s]}):i[e.item]=t,e.index&&(i[e.index]=r),e.collection&&(i[e.collection]=n),i}function no(e){return!Array.isArray(e)&&!isNaN(e)}function An(){}An.inline=(e,{expression:t},{cleanup:r})=>{let n=Y(e);n._x_refs||(n._x_refs={}),n._x_refs[t]=e,r(()=>delete n._x_refs[t])};d(\"ref\",An);d(\"if\",(e,{expression:t},{effect:r,cleanup:n})=>{e.tagName.toLowerCase()!==\"template\"&&E(\"x-if can only be used on a <template> tag\",e);let i=x(e,t),o=()=>{if(e._x_currentIfEl)return e._x_currentIfEl;let a=e.content.cloneNode(!0).firstElementChild;return k(a,{},e),m(()=>{e.after(a),A(()=>S(a))()}),e._x_currentIfEl=a,e._x_undoIf=()=>{m(()=>{P(a),a.remove()}),delete e._x_currentIfEl},a},s=()=>{e._x_undoIf&&(e._x_undoIf(),delete e._x_undoIf)};r(()=>i(a=>{a?o():s()})),n(()=>e._x_undoIf&&e._x_undoIf())});d(\"id\",(e,{expression:t},{evaluate:r})=>{r(t).forEach(i=>_n(e,i))});H((e,t)=>{e._x_ids&&(t._x_ids=e._x_ids)});ne(Pe(\"@\",Ie(C(\"on:\"))));d(\"on\",A((e,{value:t,modifiers:r,expression:n},{cleanup:i})=>{let o=n?x(e,n):()=>{};e.tagName.toLowerCase()===\"template\"&&(e._x_forwardEvents||(e._x_forwardEvents=[]),e._x_forwardEvents.includes(t)||e._x_forwardEvents.push(t));let s=ae(e,t,r,a=>{o(()=>{},{scope:{$event:a},params:[a]})});i(()=>s())}));rt(\"Collapse\",\"collapse\",\"collapse\");rt(\"Intersect\",\"intersect\",\"intersect\");rt(\"Focus\",\"trap\",\"focus\");rt(\"Mask\",\"mask\",\"mask\");function rt(e,t,r){d(t,n=>E(`You can't use [x-${t}] without first installing the \"${e}\" plugin here: https://alpinejs.dev/plugins/${r}`,n))}K.setEvaluator(xt);K.setReactivityEngine({reactive:et,effect:rn,release:nn,raw:_});var Vt=K;window.Alpine=Vt;queueMicrotask(()=>{Vt.start()});})();","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/zero/webui/js/api.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/zero/webui/js/components.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'DOMParser' is not defined.","line":35,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":35,"endColumn":33},{"ruleId":"no-undef","severity":2,"message":"'URL' is not defined.","line":55,"column":37,"nodeType":"Identifier","messageId":"undef","endLine":55,"endColumn":40},{"ruleId":"no-undef","severity":2,"message":"'URL' is not defined.","line":80,"column":45,"nodeType":"Identifier","messageId":"undef","endLine":80,"endColumn":48},{"ruleId":"no-undef","severity":2,"message":"'Blob' is not defined.","line":94,"column":32,"nodeType":"Identifier","messageId":"undef","endLine":94,"endColumn":36},{"ruleId":"no-undef","severity":2,"message":"'URL' is not defined.","line":97,"column":31,"nodeType":"Identifier","messageId":"undef","endLine":97,"endColumn":34},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":101,"column":19,"nodeType":"MemberExpression","messageId":"unexpected","endLine":101,"endColumn":32,"suggestions":[{"fix":{"range":[3402,3453],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-undef","severity":2,"message":"'URL' is not defined.","line":104,"column":32,"nodeType":"Identifier","messageId":"undef","endLine":104,"endColumn":35},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":164,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":164,"endColumn":18,"suggestions":[{"fix":{"range":[5308,5359],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":186,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":186,"endColumn":24,"suggestions":[{"fix":{"range":[6012,6076],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":193,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":193,"endColumn":18,"suggestions":[{"fix":{"range":[6193,6243],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"prefer-const","severity":2,"message":"'attrs' is never reassigned. Use 'const' instead.","line":200,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":200,"endColumn":12,"fix":{"range":[6382,6397],"text":"const attrs = {};"}},{"ruleId":"prefer-const","severity":2,"message":"'attr' is never reassigned. Use 'const' instead.","line":205,"column":16,"nodeType":"Identifier","messageId":"useConst","endLine":205,"endColumn":20,"fix":{"range":[6517,6525],"text":"const attr"}},{"ruleId":"no-unused-vars","severity":2,"message":"'_e' is defined but never used.","line":209,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":209,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'MutationObserver' is not defined.","line":230,"column":22,"nodeType":"Identifier","messageId":"undef","endLine":230,"endColumn":38}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":2,"fixableWarningCount":0,"source":"// Import a component into a target element\n// Import a component and recursively load its nested components\n// Returns the parsed document for additional processing\n\n// cache object to store loaded components\nconst componentCache = {};\n\nexport async function importComponent(path, targetElement) {\n  try {\n    if (!targetElement) {\n      throw new Error(\"Target element is required\");\n    }\n\n    // Show loading indicator\n    targetElement.innerHTML = '<div class=\"loading\"></div>';\n\n    // full component url\n    const componentUrl = \"components/\" + path;\n\n    // get html from cache or fetch it\n    let html;\n    if (componentCache[componentUrl]) {\n      html = componentCache[componentUrl];\n    } else {\n      const response = await fetch(componentUrl);\n      if (!response.ok) {\n        throw new Error(\n          `Error loading component ${path}: ${response.statusText}`\n        );\n      }\n      html = await response.text();\n      // store in cache\n      componentCache[componentUrl] = html;\n    }\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(html, \"text/html\");\n\n    const allNodes = [\n      ...doc.querySelectorAll(\"style\"),\n      ...doc.querySelectorAll(\"script\"),\n      ...doc.body.childNodes,\n    ];\n\n    const loadPromises = [];\n    let blobCounter = 0;\n\n    for (const node of allNodes) {\n      if (node.nodeName === \"SCRIPT\") {\n        const isModule =\n          node.type === \"module\" || node.getAttribute(\"type\") === \"module\";\n\n        if (isModule) {\n          if (node.src) {\n            // For <script type=\"module\" src=\"...\" use dynamic import\n            const resolvedUrl = new URL(\n              node.src,\n              globalThis.location.origin\n            ).toString();\n\n            // Check if module is already in cache\n            if (!componentCache[resolvedUrl]) {\n              const modulePromise = import(resolvedUrl);\n              componentCache[resolvedUrl] = modulePromise;\n              loadPromises.push(modulePromise);\n            }\n          } else {\n            const virtualUrl = `${componentUrl.replaceAll(\n              \"/\",\n              \"_\"\n            )}.${++blobCounter}.js`;\n\n            // For inline module scripts, use cache or create blob\n            if (!componentCache[virtualUrl]) {\n              // Transform relative import paths to absolute URLs\n              let content = node.textContent.replace(\n                /import\\s+([^'\"]+)\\s+from\\s+[\"']([^\"']+)[\"']/g,\n                (match, bindings, importPath) => {\n                  // Convert relative OR root-based (e.g. /src/...) to absolute URLs\n                  if (!/^https?:\\/\\//.test(importPath)) {\n                    const absoluteUrl = new URL(\n                      importPath,\n                      globalThis.location.origin\n                    ).href;\n                    return `import ${bindings} from \"${absoluteUrl}\"`;\n                  }\n                  return match;\n                }\n              );\n\n              // Add sourceURL to the content\n              content += `\\n//# sourceURL=${virtualUrl}`;\n\n              // Create a Blob from the rewritten content\n              const blob = new Blob([content], {\n                type: \"text/javascript\",\n              });\n              const blobUrl = URL.createObjectURL(blob);\n\n              const modulePromise = import(blobUrl)\n                .catch((err) => {\n                  console.error(\"Failed to load inline module\", err);\n                  throw err;\n                })\n                .finally(() => URL.revokeObjectURL(blobUrl));\n\n              componentCache[virtualUrl] = modulePromise;\n              loadPromises.push(modulePromise);\n            }\n          }\n        } else {\n          // Non-module script\n          const script = document.createElement(\"script\");\n          Array.from(node.attributes || []).forEach((attr) => {\n            script.setAttribute(attr.name, attr.value);\n          });\n          script.textContent = node.textContent;\n\n          if (script.src) {\n            const promise = new Promise((resolve, reject) => {\n              script.onload = resolve;\n              script.onerror = reject;\n            });\n            loadPromises.push(promise);\n          }\n\n          targetElement.appendChild(script);\n        }\n      } else if (\n        node.nodeName === \"STYLE\" ||\n        (node.nodeName === \"LINK\" && node.rel === \"stylesheet\")\n      ) {\n        const clone = node.cloneNode(true);\n\n        if (clone.tagName === \"LINK\" && clone.rel === \"stylesheet\") {\n          const promise = new Promise((resolve, reject) => {\n            clone.onload = resolve;\n            clone.onerror = reject;\n          });\n          loadPromises.push(promise);\n        }\n\n        targetElement.appendChild(clone);\n      } else {\n        const clone = node.cloneNode(true);\n        targetElement.appendChild(clone);\n      }\n    }\n\n    // Wait for all tracked external scripts/styles to finish loading\n    await Promise.all(loadPromises);\n\n    // Remove loading indicator\n    const loadingEl = targetElement.querySelector(\".loading\");\n    if (loadingEl) {\n      targetElement.removeChild(loadingEl);\n    }\n\n    // // Load any nested components\n    // await loadComponents([targetElement]);\n\n    // Return parsed document\n    return doc;\n  } catch (error) {\n    console.error(\"Error importing component:\", error);\n    throw error;\n  }\n}\n\n// Load all x-component tags starting from root elements\nexport async function loadComponents(roots = [document.documentElement]) {\n  try {\n    // Convert single root to array if needed\n    const rootElements = Array.isArray(roots) ? roots : [roots];\n\n    // Find all top-level components and load them in parallel\n    const components = rootElements.flatMap((root) =>\n      Array.from(root.querySelectorAll(\"x-component\"))\n    );\n\n    if (components.length === 0) return;\n\n    await Promise.all(\n      components.map(async (component) => {   \n        const path = component.getAttribute(\"path\");\n        if (!path) {\n          console.error(\"x-component missing path attribute:\", component);\n          return;\n        }\n        await importComponent(path, component);\n      })\n    );\n  } catch (error) {\n    console.error(\"Error loading components:\", error);\n  }\n}\n\n// Function to traverse parents and collect x-component attributes\nexport function getParentAttributes(el) {\n  let element = el;\n  let attrs = {};\n\n  while (element) {\n    if (element.tagName.toLowerCase() === 'x-component') {\n      // Get all attributes\n      for (let attr of element.attributes) {\n        try {\n          // Try to parse as JSON first\n          attrs[attr.name] = JSON.parse(attr.value);\n        } catch(_e) {\n          // If not JSON, use raw value\n          attrs[attr.name] = attr.value;\n        }\n      }\n    }\n    element = element.parentElement;\n  }\n  return attrs;\n}\n// expose as global for x-components in Alpine\nglobalThis.xAttrs = getParentAttributes;\n\n// Initialize when DOM is ready\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', () => loadComponents());\n} else {\n  loadComponents();\n}\n\n// Watch for DOM changes to dynamically load x-components\nconst observer = new MutationObserver((mutations) => {\n  for (const mutation of mutations) {\n    for (const node of mutation.addedNodes) {\n      if (node.nodeType === 1) {\n        // ELEMENT_NODE\n        // Check if this node or its descendants contain x-component(s)\n        if (node.matches?.(\"x-component\")) {\n          importComponent(node.getAttribute(\"path\"), node);\n        } else if (node.querySelectorAll) {\n          loadComponents([node]);\n        }\n      }\n    }\n  }\n});\nobserver.observe(document.body, { childList: true, subtree: true });\n","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/zero/webui/js/file_browser.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'Alpine' is not defined.","line":19,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":19,"endColumn":27},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":52,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":52,"endColumn":22,"suggestions":[{"fix":{"range":[1406,1468],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'data' is assigned a value but never used.","line":128,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":128,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"data"},"fix":{"range":[3463,3498],"text":""},"desc":"Remove unused variable 'data'."}]},{"ruleId":"no-undef","severity":2,"message":"'data' is not defined.","line":188,"column":15,"nodeType":"Identifier","messageId":"undef","endLine":188,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'Alpine' is not defined.","line":250,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":250,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'openFileLink' is not defined.","line":266,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":266,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'openFileLink' is not defined.","line":286,"column":23,"nodeType":"Identifier","messageId":"undef","endLine":286,"endColumn":35}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const fileBrowserModalProxy = {\n  isOpen: false,\n  isLoading: false,\n\n  browser: {\n    title: \"File Browser\",\n    currentPath: \"\",\n    entries: [],\n    parentPath: \"\",\n    sortBy: \"name\",\n    sortDirection: \"asc\",\n  },\n\n  // Initialize navigation history\n  history: [],\n\n  async openModal(path) {\n    const modalEl = document.getElementById(\"fileBrowserModal\");\n    const modalAD = Alpine.$data(modalEl);\n\n    modalAD.isOpen = true;\n    modalAD.isLoading = true;\n    modalAD.history = []; // reset history when opening modal\n\n    // Initialize currentPath to root if it's empty\n    if (path) modalAD.browser.currentPath = path;\n    else if (!modalAD.browser.currentPath)\n      modalAD.browser.currentPath = \"$WORK_DIR\";\n\n    await modalAD.fetchFiles(modalAD.browser.currentPath);\n  },\n\n  isArchive(filename) {\n    const archiveExts = [\"zip\", \"tar\", \"gz\", \"rar\", \"7z\"];\n    const ext = filename.split(\".\").pop().toLowerCase();\n    return archiveExts.includes(ext);\n  },\n\n  async fetchFiles(path = \"\") {\n    this.isLoading = true;\n    try {\n      const response = await fetch(\n        `/get_work_dir_files?path=${encodeURIComponent(path)}`\n      );\n\n      if (response.ok) {\n        const data = await response.json();\n        this.browser.entries = data.data.entries;\n        this.browser.currentPath = data.data.current_path;\n        this.browser.parentPath = data.data.parent_path;\n      } else {\n        console.error(\"Error fetching files:\", await response.text());\n        this.browser.entries = [];\n      }\n    } catch (error) {\n      window.toastFetchError(\"Error fetching files\", error);\n      this.browser.entries = [];\n    } finally {\n      this.isLoading = false;\n    }\n  },\n\n  async navigateToFolder(path) {\n    // Push current path to history before navigating\n    if (this.browser.currentPath !== path) {\n      this.history.push(this.browser.currentPath);\n    }\n    await this.fetchFiles(path);\n  },\n\n  async navigateUp() {\n    if (this.browser.parentPath !== \"\") {\n      // Push current path to history before navigating up\n      this.history.push(this.browser.currentPath);\n      await this.fetchFiles(this.browser.parentPath);\n    }\n  },\n\n  sortFiles(entries) {\n    return [...entries].sort((a, b) => {\n      // Folders always come first\n      if (a.is_dir !== b.is_dir) {\n        return a.is_dir ? -1 : 1;\n      }\n\n      const direction = this.browser.sortDirection === \"asc\" ? 1 : -1;\n      switch (this.browser.sortBy) {\n        case \"name\":\n          return direction * a.name.localeCompare(b.name);\n        case \"size\":\n          return direction * (a.size - b.size);\n        case \"date\":\n          return direction * (new Date(a.modified) - new Date(b.modified));\n        default:\n          return 0;\n      }\n    });\n  },\n\n  toggleSort(column) {\n    if (this.browser.sortBy === column) {\n      this.browser.sortDirection =\n        this.browser.sortDirection === \"asc\" ? \"desc\" : \"asc\";\n    } else {\n      this.browser.sortBy = column;\n      this.browser.sortDirection = \"asc\";\n    }\n  },\n\n  async deleteFile(file) {\n    if (!confirm(`Are you sure you want to delete ${file.name}?`)) {\n      return;\n    }\n\n    try {\n      const response = await fetch(\"/delete_work_dir_file\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          path: file.path,\n          currentPath: this.browser.currentPath,\n        }),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        this.browser.entries = this.browser.entries.filter(\n          (entry) => entry.path !== file.path\n        );\n        alert(\"File deleted successfully.\");\n      } else {\n        alert(`Error deleting file: ${await response.text()}`);\n      }\n    } catch (error) {\n      window.toastFetchError(\"Error deleting file\", error);\n      alert(\"Error deleting file\");\n    }\n  },\n\n  async handleFileUpload(event) {\n    try {\n      const files = event.target.files;\n      if (!files.length) return;\n\n      const formData = new FormData();\n      formData.append(\"path\", this.browser.currentPath);\n\n      for (let i = 0; i < files.length; i++) {\n        const ext = files[i].name.split(\".\").pop().toLowerCase();\n        if (![\"zip\", \"tar\", \"gz\", \"rar\", \"7z\"].includes(ext)) {\n          if (files[i].size > 100 * 1024 * 1024) {\n            // 100MB\n            alert(\n              `File ${files[i].name} exceeds the maximum allowed size of 100MB.`\n            );\n            continue;\n          }\n        }\n        formData.append(\"files[]\", files[i]);\n      }\n\n      // Proceed with upload after validation\n      const response = await fetch(\"/upload_work_dir_files\", {\n        method: \"POST\",\n        body: formData,\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        // Update the file list with new data\n        this.browser.entries = data.data.entries.map((entry) => ({\n          ...entry,\n          uploadStatus: data.failed.includes(entry.name) ? \"failed\" : \"success\",\n        }));\n        this.browser.currentPath = data.data.current_path;\n        this.browser.parentPath = data.data.parent_path;\n\n        // Show success message\n        if (data.failed && data.failed.length > 0) {\n          const failedFiles = data.failed\n            .map((file) => `${file.name}: ${file.error}`)\n            .join(\"\\n\");\n          alert(`Some files failed to upload:\\n${failedFiles}`);\n        }\n      } else {\n        alert(data.message);\n      }\n    } catch (error) {\n      window.toastFetchError(\"Error uploading files\", error);\n      alert(\"Error uploading files\");\n    }\n  },\n\n  async downloadFile(file) {\n    try {\n      const downloadUrl = `/download_work_dir_file?path=${encodeURIComponent(\n        file.path\n      )}`;\n\n      const response = await fetch(downloadUrl);\n\n      if (!response.ok) {\n        throw new Error(\"Network response was not ok\");\n      }\n\n      const blob = await response.blob();\n\n      const link = document.createElement(\"a\");\n      link.href = window.URL.createObjectURL(blob);\n      link.download = file.name;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(link.href);\n    } catch (error) {\n      window.toastFetchError(\"Error downloading file\", error);\n      alert(\"Error downloading file\");\n    }\n  },\n\n  // Helper Functions\n  formatFileSize(size) {\n    if (size === 0) return \"0 Bytes\";\n    const k = 1024;\n    const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\"];\n    const i = Math.floor(Math.log(size) / Math.log(k));\n    return parseFloat((size / Math.pow(k, i)).toFixed(2)) + \" \" + sizes[i];\n  },\n\n  formatDate(dateString) {\n    const options = {\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    };\n    return new Date(dateString).toLocaleDateString(undefined, options);\n  },\n\n  handleClose() {\n    this.isOpen = false;\n  },\n};\n\n// Wait for Alpine to be ready\ndocument.addEventListener(\"alpine:init\", () => {\n  Alpine.data(\"fileBrowserModalProxy\", () => ({\n    init() {\n      Object.assign(this, fileBrowserModalProxy);\n      // Ensure immediate file fetch when modal opens\n      this.$watch(\"isOpen\", async (value) => {\n        if (value) {\n          await this.fetchFiles(this.browser.currentPath);\n        }\n      });\n    },\n  }));\n});\n\n// Keep the global assignment for backward compatibility\nwindow.fileBrowserModalProxy = fileBrowserModalProxy;\n\nopenFileLink = async function (path) {\n  try {\n    const resp = await window.sendJsonData(\"/file_info\", { path });\n    if (!resp.exists) {\n      window.toast(\"File does not exist.\", \"error\");\n      return;\n    }\n\n    if (resp.is_dir) {\n      fileBrowserModalProxy.openModal(resp.abs_path);\n    } else {\n      fileBrowserModalProxy.downloadFile({\n        path: resp.abs_path,\n        name: resp.file_name,\n      });\n    }\n  } catch (e) {\n    window.toastFetchError(\"Error opening file\", e);\n  }\n};\nwindow.openFileLink = openFileLink;\n","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/zero/webui/js/history.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'ace' is not defined.","line":38,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":38,"endColumn":27}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { getContext } from \"../index.js\";\n\nexport async function openHistoryModal() {\n    try {\n        const hist = await window.sendJsonData(\"/history_get\", { context: getContext() });\n        // const data = JSON.stringify(hist.history, null, 4);\n        const data = hist.history\n        const size = hist.tokens\n        await showEditorModal(data, \"markdown\", `History ~${size} tokens`, \"Conversation history visible to the LLM. History is compressed to fit into the context window over time.\");\n    } catch (e) {\n        window.toastFetchError(\"Error fetching history\", e)\n        return\n    }\n}\n\nexport async function openCtxWindowModal() {\n    try {\n        const win = await window.sendJsonData(\"/ctx_window_get\", { context: getContext() });\n        const data = win.content\n        const size = win.tokens\n        await showEditorModal(data, \"markdown\", `Context window ~${size} tokens`, \"Data passed to the LLM during last interaction. Contains system message, conversation history and RAG.\");\n    } catch (e) {\n        window.toastFetchError(\"Error fetching context\", e)\n        return\n    }\n}\n\nasync function showEditorModal(data, type = \"json\", title, description = \"\") {\n    // Generate the HTML with JSON Viewer container\n    const html = `<div id=\"json-viewer-container\"></div>`;\n\n    // Open the modal with the generated HTML\n    await window.genericModalProxy.openModal(title, description, html, [\"history-viewer\"]);\n\n    // Initialize the JSON Viewer after the modal is rendered\n    const container = document.getElementById(\"json-viewer-container\");\n    if (container) {\n        const editor = ace.edit(\"json-viewer-container\");\n\n        const dark = localStorage.getItem('darkMode')\n        if (dark != \"false\") {\n            editor.setTheme(\"ace/theme/github_dark\");\n        } else {\n            editor.setTheme(\"ace/theme/tomorrow\");\n        }\n\n        editor.session.setMode(\"ace/mode/\" + type);\n        editor.setValue(data);\n        editor.clearSelection();\n        // editor.session.$toggleFoldWidget(5, {})\n    }\n}\n\nwindow.openHistoryModal = openHistoryModal;\nwindow.openCtxWindowModal = openCtxWindowModal;\n","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/zero/webui/js/image_modal.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'URL' is not defined.","line":17,"column":28,"nodeType":"Identifier","messageId":"undef","endLine":17,"endColumn":31},{"ruleId":"no-undef","severity":2,"message":"'Image' is not defined.","line":44,"column":31,"nodeType":"Identifier","messageId":"undef","endLine":44,"endColumn":36},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":58,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":58,"endColumn":24,"suggestions":[{"fix":{"range":[1973,2020],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Singleton interval ID for image refresh\nlet activeIntervalId = null;\n\nexport async function openImageModal(src, refreshInterval = 0) {\n  try {\n    let imgSrc = src;\n    \n    // Clear any existing refresh interval\n    if (activeIntervalId !== null) {\n      clearInterval(activeIntervalId);\n      activeIntervalId = null;\n    }\n    \n    if (refreshInterval > 0) {\n      // Add or update timestamp to bypass cache\n      const addTimestamp = (url) => {\n        const urlObj = new URL(url, window.location.origin);\n        urlObj.searchParams.set('t', Date.now());\n        return urlObj.toString();\n      };\n\n      // Check if image viewer is still active\n      const isImageViewerActive = () => {\n        const container = document.querySelector('#image-viewer-container');\n        if (!container) return false;\n        \n        // Check if element or any parent is hidden\n        let element = container;\n        while (element) {\n          const style = window.getComputedStyle(element);\n          if (style.display === 'none' || style.visibility === 'hidden' || style.opacity === '0') {\n            return false;\n          }\n          element = element.parentElement;\n        }\n        return true;\n      };\n\n      // Preload next image before displaying\n      const preloadAndUpdate = async (currentImg) => {\n        const nextSrc = addTimestamp(src);\n        // Create a promise that resolves when the image is loaded\n        const preloadPromise = new Promise((resolve, reject) => {\n          const tempImg = new Image();\n          tempImg.onload = () => resolve(nextSrc);\n          tempImg.onerror = reject;\n          tempImg.src = nextSrc;\n        });\n        \n        try {\n          // Wait for preload to complete\n          const loadedSrc = await preloadPromise;\n          // Check if this interval is still the active one\n          if (currentImg && isImageViewerActive()) {\n            currentImg.src = loadedSrc;\n          }\n        } catch (err) {\n          console.error('Failed to preload image:', err);\n        }\n      };\n      \n      imgSrc = addTimestamp(src);\n      \n      // Set up periodic refresh with preloading\n      activeIntervalId = setInterval(() => {\n        if (!isImageViewerActive()) {\n          clearInterval(activeIntervalId);\n          activeIntervalId = null;\n          return;\n        }\n        const img = document.querySelector('.image-viewer-img');\n        if (img) {\n          preloadAndUpdate(img);\n        }\n      }, refreshInterval);\n    }\n\n    const html = `<div id=\"image-viewer-container\"><img class=\"image-viewer-img\" src=\"${imgSrc}\" /></div>`;\n    const fileName = src.split(\"/\").pop();\n    \n    // Open the modal with the generated HTML\n    await window.genericModalProxy.openModal(fileName, \"\", html);\n  } catch (e) {\n    window.toastFetchError(\"Error fetching history\", e);\n    return;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/zero/webui/js/initFw.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'_modals' is defined but never used.","line":1,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"_modals"},"fix":{"range":[7,25],"text":""},"desc":"Remove unused variable '_modals'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'_components' is defined but never used.","line":2,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"_components"},"fix":{"range":[47,69],"text":""},"desc":"Remove unused variable '_components'."}]},{"ruleId":"no-undef","severity":2,"message":"'Alpine' is not defined.","line":10,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":10,"endColumn":11},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":18,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":18,"endColumn":18,"suggestions":[{"fix":{"range":[464,511],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as _modals from \"./modals.js\";\nimport * as _components from \"./components.js\";\n\n// Import Alpine.js directly\nimport \"./alpine.min.js\";\n\n// Wait for Alpine to be available\nif (typeof Alpine !== 'undefined') {\n    // add x-destroy directive\n    Alpine.directive(\n      \"destroy\",\n      (el, { expression }, { evaluateLater, cleanup }) => {\n        const onDestroy = evaluateLater(expression);\n        cleanup(() => onDestroy());\n      }\n    );\n} else {\n    console.error('Alpine.js not loaded properly');\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/zero/webui/js/messages.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":32,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":32,"endColumn":20,"suggestions":[{"fix":{"range":[1069,1112],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-undef","severity":2,"message":"'renderMathInElement' is not defined.","line":119,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":119,"endColumn":26},{"ruleId":"no-unused-vars","severity":2,"message":"'kvps' is assigned a value but never used.","line":192,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":192,"endColumn":7,"suggestions":[{"messageId":"removeVar","data":{"varName":"kvps"},"fix":{"range":[4368,4383],"text":""},"desc":"Remove unused variable 'kvps'."}]},{"ruleId":"no-undef","severity":2,"message":"'messageContent' is not defined.","line":219,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":219,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'latex' is assigned a value but never used.","line":237,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":237,"endColumn":8,"suggestions":[{"messageId":"removeVar","data":{"varName":"latex"},"fix":{"range":[4975,4992],"text":""},"desc":"Remove unused variable 'latex'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'kvps' is assigned a value but never used.","line":354,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":354,"endColumn":7,"suggestions":[{"messageId":"removeVar","data":{"varName":"kvps"},"fix":{"range":[8408,8423],"text":""},"desc":"Remove unused variable 'kvps'."}]},{"ruleId":"prefer-const","severity":2,"message":"'key' is never reassigned. Use 'const' instead.","line":505,"column":15,"nodeType":"Identifier","messageId":"useConst","endLine":505,"endColumn":18,"fix":{"range":[10471,10487],"text":"const [key, value]"}},{"ruleId":"prefer-const","severity":2,"message":"'value' is never reassigned. Use 'const' instead.","line":505,"column":20,"nodeType":"Identifier","messageId":"useConst","endLine":505,"endColumn":25,"fix":{"range":[10471,10487],"text":"const [key, value]"}},{"ruleId":"no-undef","severity":2,"message":"'renderMathInElement' is not defined.","line":558,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":558,"endColumn":32},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":613,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":613,"endColumn":18,"suggestions":[{"fix":{"range":[13816,13859],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'args' is defined but never used.","line":638,"column":36,"nodeType":"Identifier","messageId":"unusedVar","endLine":638,"endColumn":40,"suggestions":[{"messageId":"removeVar","data":{"varName":"args"},"fix":{"range":[14369,14378],"text":""},"desc":"Remove unused variable 'args'."}]},{"ruleId":"prefer-const","severity":2,"message":"'part' is never reassigned. Use 'const' instead.","line":644,"column":14,"nodeType":"Identifier","messageId":"useConst","endLine":644,"endColumn":18,"fix":{"range":[14500,14508],"text":"const part"}}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":3,"fixableWarningCount":0,"source":"// copy button\nimport { openImageModal } from \"./image_modal.js\";\n\nfunction createCopyButton() {\n  const button = document.createElement(\"button\");\n  button.className = \"copy-button\";\n  button.textContent = \"Copy\";\n\n  button.addEventListener(\"click\", async function (e) {\n    e.stopPropagation();\n    const container = this.closest(\".msg-content, .kvps-row, .message-text\");\n    let textToCopy;\n\n    if (container.classList.contains(\"kvps-row\")) {\n      textToCopy = container.querySelector(\".kvps-val\").textContent;\n    } else if (container.classList.contains(\"message-text\")) {\n      textToCopy = container.querySelector(\"span\").textContent;\n    } else {\n      textToCopy = container.querySelector(\"span\").textContent;\n    }\n\n    try {\n      await navigator.clipboard.writeText(textToCopy);\n      const originalText = button.textContent;\n      button.classList.add(\"copied\");\n      button.textContent = \"Copied!\";\n      setTimeout(() => {\n        button.classList.remove(\"copied\");\n        button.textContent = originalText;\n      }, 2000);\n    } catch (err) {\n      console.error(\"Failed to copy text:\", err);\n    }\n  });\n\n  return button;\n}\n\nfunction addCopyButtonToElement(element) {\n  if (!element.querySelector(\".copy-button\")) {\n    element.appendChild(createCopyButton());\n  }\n}\n\nexport function getHandler(type) {\n  switch (type) {\n    case \"user\":\n      return drawMessageUser;\n    case \"agent\":\n      return drawMessageAgent;\n    case \"response\":\n      return drawMessageResponse;\n    case \"tool\":\n      return drawMessageTool;\n    case \"code_exe\":\n      return drawMessageCodeExe;\n    case \"browser\":\n      return drawMessageBrowser;\n    case \"warning\":\n      return drawMessageWarning;\n    case \"rate_limit\":\n      return drawMessageWarning;\n    case \"error\":\n      return drawMessageError;\n    case \"info\":\n      return drawMessageInfo;\n    case \"util\":\n      return drawMessageUtil;\n    case \"hint\":\n      return drawMessageInfo;\n    default:\n      return drawMessageDefault;\n  }\n}\n\n// draw a message with a specific type\nexport function _drawMessage(\n  messageContainer,\n  heading,\n  content,\n  temp,\n  followUp,\n  kvps = null,\n  messageClasses = [],\n  contentClasses = [],\n  latex = false\n) {\n  const messageDiv = document.createElement(\"div\");\n  messageDiv.classList.add(\"message\", ...messageClasses);\n\n  if (heading) {\n    const headingElement = document.createElement(\"h4\");\n    headingElement.textContent = heading;\n    messageDiv.appendChild(headingElement);\n  }\n\n  drawKvps(messageDiv, kvps, latex);\n\n  if (content && content.trim().length > 0) {\n    const preElement = document.createElement(\"pre\");\n    preElement.classList.add(\"msg-content\", ...contentClasses);\n    preElement.style.whiteSpace = \"pre-wrap\";\n    preElement.style.wordBreak = \"break-word\";\n\n    const spanElement = document.createElement(\"span\");\n    spanElement.innerHTML = convertHTML(content);\n\n    // Add click handler for small screens\n    spanElement.addEventListener(\"click\", () => {\n      copyText(spanElement.textContent, spanElement);\n    });\n\n    preElement.appendChild(spanElement);\n    addCopyButtonToElement(preElement);\n    messageDiv.appendChild(preElement);\n\n    // Render LaTeX math within the span\n    if (window.renderMathInElement && latex) {\n      renderMathInElement(spanElement, {\n        delimiters: [{ left: \"$\", right: \"$\", display: true }],\n        throwOnError: false,\n      });\n    }\n  }\n\n  messageContainer.appendChild(messageDiv);\n\n  if (followUp) {\n    messageContainer.classList.add(\"message-followup\");\n  }\n\n  return messageDiv;\n}\n\nexport function drawMessageDefault(\n  messageContainer,\n  id,\n  type,\n  heading,\n  content,\n  temp,\n  kvps = null\n) {\n  _drawMessage(\n    messageContainer,\n    heading,\n    content,\n    temp,\n    false,\n    kvps,\n    [\"message-ai\", \"message-default\"],\n    [\"msg-json\"],\n    false\n  );\n}\n\nexport function drawMessageAgent(\n  messageContainer,\n  id,\n  type,\n  heading,\n  content,\n  temp,\n  kvps = null\n) {\n  let kvpsFlat = null;\n  if (kvps) {\n    kvpsFlat = { ...kvps, ...(kvps[\"tool_args\"] || {}) };\n    delete kvpsFlat[\"tool_args\"];\n  }\n\n  _drawMessage(\n    messageContainer,\n    heading,\n    content,\n    temp,\n    false,\n    kvpsFlat,\n    [\"message-ai\", \"message-agent\"],\n    [\"msg-json\"],\n    false\n  );\n}\n\nexport function drawMessageResponse(\n  messageContainer,\n  id,\n  type,\n  heading,\n  content,\n  temp,\n  kvps = null\n) {\n  _drawMessage(\n    messageContainer,\n    heading,\n    content,\n    temp,\n    true,\n    null,\n    [\"message-ai\", \"message-agent-response\"],\n    [],\n    true\n  );\n}\n\nexport function drawMessageDelegation(\n  messageContainer,\n  id,\n  type,\n  heading,\n  content,\n  temp,\n  kvps = null\n) {\n  _drawMessage(\n    messageContainer,\n    heading,\n    messageContent,\n    temp,\n    true,\n    kvps,\n    [\"message-ai\", \"message-agent\", \"message-agent-delegation\"],\n    [],\n    true\n  );\n}\n\nexport function drawMessageUser(\n  messageContainer,\n  id,\n  type,\n  heading,\n  content,\n  temp,\n  kvps = null,\n  latex = false\n) {\n  const messageDiv = document.createElement(\"div\");\n  messageDiv.classList.add(\"message\", \"message-user\");\n\n  const headingElement = document.createElement(\"h4\");\n  headingElement.textContent = \"User message\";\n  messageDiv.appendChild(headingElement);\n\n  if (content && content.trim().length > 0) {\n    const textDiv = document.createElement(\"div\");\n    textDiv.classList.add(\"message-text\");\n\n    // Create a span for the content\n    const spanElement = document.createElement(\"span\");\n    spanElement.innerHTML = convertHTML(content);\n    textDiv.appendChild(spanElement);\n\n    // Add click handler\n    textDiv.addEventListener(\"click\", () => {\n      copyText(content, textDiv);\n    });\n\n    addCopyButtonToElement(textDiv);\n    messageDiv.appendChild(textDiv);\n  }\n\n  // Handle attachments\n  if (kvps && kvps.attachments && kvps.attachments.length > 0) {\n    const attachmentsContainer = document.createElement(\"div\");\n    attachmentsContainer.classList.add(\"attachments-container\");\n\n    kvps.attachments.forEach((attachment) => {\n      const attachmentDiv = document.createElement(\"div\");\n      attachmentDiv.classList.add(\"attachment-item\");\n\n      if (typeof attachment === \"string\") {\n        // attachment is filename\n        const filename = attachment;\n        const extension = filename.split(\".\").pop().toUpperCase();\n\n        attachmentDiv.classList.add(\"file-type\");\n        attachmentDiv.innerHTML = `\n                    <div class=\"file-preview\">\n                        <span class=\"filename\">${filename}</span>\n                        <span class=\"extension\">${extension}</span>\n                    </div>\n                `;\n      } else if (attachment.type === \"image\") {\n        // Existing logic for images\n        const imgWrapper = document.createElement(\"div\");\n        imgWrapper.classList.add(\"image-wrapper\");\n\n        const img = document.createElement(\"img\");\n        img.src = attachment.url;\n        img.alt = attachment.name;\n        img.classList.add(\"attachment-preview\");\n\n        const fileInfo = document.createElement(\"div\");\n        fileInfo.classList.add(\"file-info\");\n        fileInfo.innerHTML = `\n                    <span class=\"filename\">${attachment.name}</span>\n                    <span class=\"extension\">${attachment.extension.toUpperCase()}</span>\n                `;\n\n        imgWrapper.appendChild(img);\n        attachmentDiv.appendChild(imgWrapper);\n        attachmentDiv.appendChild(fileInfo);\n      } else {\n        // Existing logic for non-image files\n        attachmentDiv.classList.add(\"file-type\");\n        attachmentDiv.innerHTML = `\n                    <div class=\"file-preview\">\n                        <span class=\"filename\">${attachment.name}</span>\n                        <span class=\"extension\">${attachment.extension.toUpperCase()}</span>\n                    </div>\n                `;\n      }\n\n      attachmentsContainer.appendChild(attachmentDiv);\n    });\n\n    messageDiv.appendChild(attachmentsContainer);\n  }\n\n  messageContainer.appendChild(messageDiv);\n}\n\nexport function drawMessageTool(\n  messageContainer,\n  id,\n  type,\n  heading,\n  content,\n  temp,\n  kvps = null\n) {\n  _drawMessage(\n    messageContainer,\n    heading,\n    content,\n    temp,\n    true,\n    kvps,\n    [\"message-ai\", \"message-tool\"],\n    [\"msg-output\"],\n    false\n  );\n}\n\nexport function drawMessageCodeExe(\n  messageContainer,\n  id,\n  type,\n  heading,\n  content,\n  temp,\n  kvps = null\n) {\n  _drawMessage(\n    messageContainer,\n    heading,\n    content,\n    temp,\n    true,\n    null,\n    [\"message-ai\", \"message-code-exe\"],\n    [],\n    false\n  );\n}\n\nexport function drawMessageBrowser(\n  messageContainer,\n  id,\n  type,\n  heading,\n  content,\n  temp,\n  kvps = null\n) {\n  _drawMessage(\n    messageContainer,\n    heading,\n    content,\n    temp,\n    true,\n    kvps,\n    [\"message-ai\", \"message-browser\"],\n    [\"msg-json\"],\n    false\n  );\n}\n\nexport function drawMessageAgentPlain(\n  classes,\n  messageContainer,\n  id,\n  type,\n  heading,\n  content,\n  temp,\n  kvps = null\n) {\n  _drawMessage(\n    messageContainer,\n    heading,\n    content,\n    temp,\n    false,\n    kvps,\n    [...classes],\n    [],\n    false\n  );\n  messageContainer.classList.add(\"center-container\");\n}\n\nexport function drawMessageInfo(\n  messageContainer,\n  id,\n  type,\n  heading,\n  content,\n  temp,\n  kvps = null\n) {\n  return drawMessageAgentPlain(\n    [\"message-info\"],\n    messageContainer,\n    id,\n    type,\n    heading,\n    content,\n    temp,\n    kvps\n  );\n}\n\nexport function drawMessageUtil(\n  messageContainer,\n  id,\n  type,\n  heading,\n  content,\n  temp,\n  kvps = null\n) {\n  _drawMessage(\n    messageContainer,\n    heading,\n    content,\n    temp,\n    false,\n    kvps,\n    [\"message-util\"],\n    [\"msg-json\"],\n    false\n  );\n  messageContainer.classList.add(\"center-container\");\n}\n\nexport function drawMessageWarning(\n  messageContainer,\n  id,\n  type,\n  heading,\n  content,\n  temp,\n  kvps = null\n) {\n  return drawMessageAgentPlain(\n    [\"message-warning\"],\n    messageContainer,\n    id,\n    type,\n    heading,\n    content,\n    temp,\n    kvps\n  );\n}\n\nexport function drawMessageError(\n  messageContainer,\n  id,\n  type,\n  heading,\n  content,\n  temp,\n  kvps = null\n) {\n  return drawMessageAgentPlain(\n    [\"message-error\"],\n    messageContainer,\n    id,\n    type,\n    heading,\n    content,\n    temp,\n    kvps\n  );\n}\n\nfunction drawKvps(container, kvps, latex) {\n  if (kvps) {\n    const table = document.createElement(\"table\");\n    table.classList.add(\"msg-kvps\");\n    for (let [key, value] of Object.entries(kvps)) {\n      const row = table.insertRow();\n      row.classList.add(\"kvps-row\");\n      if (key === \"thoughts\" || key === \"reflection\")\n        row.classList.add(\"msg-thoughts\");\n\n      const th = row.insertCell();\n      th.textContent = convertToTitleCase(key);\n      th.classList.add(\"kvps-key\");\n\n      const td = row.insertCell();\n\n      if (Array.isArray(value)) {\n        for (const item of value) {\n          addValue(item);\n        }\n      } else {\n        addValue(value);\n      }\n\n      function addValue(value) {\n        if (typeof value === \"object\") value = JSON.stringify(value, null, 2);\n\n        if (typeof value === \"string\" && value.startsWith(\"img://\")) {\n          const imgElement = document.createElement(\"img\");\n          imgElement.classList.add(\"kvps-img\");\n          imgElement.src = value.replace(\"img://\", \"/image_get?path=\");\n          imgElement.alt = \"Image Attachment\";\n          td.appendChild(imgElement);\n\n          // Add click handler and cursor change\n          imgElement.style.cursor = \"pointer\";\n          imgElement.addEventListener(\"click\", () => {\n            openImageModal(imgElement.src, 1000);\n          });\n\n          td.appendChild(imgElement);\n        } else {\n          const pre = document.createElement(\"pre\");\n          pre.classList.add(\"kvps-val\");\n          //   if (row.classList.contains(\"msg-thoughts\")) {\n          const span = document.createElement(\"span\");\n          span.innerHTML = convertHTML(value);\n          pre.appendChild(span);\n          td.appendChild(pre);\n          addCopyButtonToElement(row);\n\n          // Add click handler\n          span.addEventListener(\"click\", () => {\n            copyText(span.textContent, span);\n          });\n\n          if (window.renderMathInElement && latex) {\n            renderMathInElement(span, {\n              delimiters: [{ left: \"$\", right: \"$\", display: true }],\n              throwOnError: false,\n            });\n          }\n        }\n      }\n      //   } else {\n      //     pre.textContent = value;\n\n      //     // Add click handler\n      //     pre.addEventListener(\"click\", () => {\n      //       copyText(value, pre);\n      //     });\n\n      //     td.appendChild(pre);\n      //     addCopyButtonToElement(row);\n      //   }\n    }\n    container.appendChild(table);\n  }\n}\n\nfunction convertToTitleCase(str) {\n  return str\n    .replace(/_/g, \" \") // Replace underscores with spaces\n    .toLowerCase() // Convert the entire string to lowercase\n    .replace(/\\b\\w/g, function (match) {\n      return match.toUpperCase(); // Capitalize the first letter of each word\n    });\n}\n\nfunction convertImageTags(content) {\n  // Regular expression to match <image> tags and extract base64 content\n  const imageTagRegex = /<image>(.*?)<\\/image>/g;\n\n  // Replace <image> tags with <img> tags with base64 source\n  const updatedContent = content.replace(\n    imageTagRegex,\n    (match, base64Content) => {\n      return `<img src=\"data:image/jpeg;base64,${base64Content}\" alt=\"Image Attachment\" style=\"max-width: 250px !important;\"/>`;\n    }\n  );\n\n  return updatedContent;\n}\n\nasync function copyText(text, element) {\n  try {\n    await navigator.clipboard.writeText(text);\n    element.classList.add(\"copied\");\n    setTimeout(() => {\n      element.classList.remove(\"copied\");\n    }, 2000);\n  } catch (err) {\n    console.error(\"Failed to copy text:\", err);\n  }\n}\n\nfunction convertHTML(str) {\n  if (typeof str !== \"string\") str = JSON.stringify(str, null, 2);\n\n  let result = escapeHTML(str);\n  result = convertPathsToLinks(result);\n  result = convertImageTags(result);\n  return result;\n}\n\nfunction escapeHTML(str) {\n  const escapeChars = {\n    \"&\": \"&amp;\",\n    \"<\": \"&lt;\",\n    \">\": \"&gt;\",\n    \"'\": \"&#39;\",\n    '\"': \"&quot;\",\n  };\n  return str.replace(/[&<>'\"]/g, (char) => escapeChars[char]);\n}\n\nfunction convertPathsToLinks(str) {\n  function generateLinks(match, ...args) {\n    const parts = match.split(\"/\");\n\n    if (!parts[0]) parts.shift();\n    let conc = \"\";\n    let html = \"\";\n    for (let part of parts) {\n      conc += \"/\" + part;\n      html += `/<a href=\"#\" class=\"path-link\" onclick=\"openFileLink('${conc}');\">${part}</a>`;\n    }\n    return html;\n  }\n\n  const prefix = `(?:^|[ \\`'\"\\\\n]|&#39;|&quot;)`; // Use a non-capturing group for OR logic\n  const folder = `[a-zA-Z0-9_\\\\/.\\\\-]`; // Characters allowed in folder chain\n  const file = `[a-zA-Z0-9_\\\\-\\\\/]`; // Characters allowed in file names\n  const suffix = `(?<!\\\\.)`;\n\n  const regex = new RegExp(`(?<=${prefix})\\\\/${folder}*${file}${suffix}`, \"g\");\n\n  return str.replace(regex, generateLinks);\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/zero/webui/js/modal.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'Event' is not defined.","line":28,"column":37,"nodeType":"Identifier","messageId":"undef","endLine":28,"endColumn":42},{"ruleId":"no-undef","severity":2,"message":"'Alpine' is not defined.","line":83,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":83,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'Alpine' is not defined.","line":88,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":88,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'Alpine' is not defined.","line":101,"column":25,"nodeType":"Identifier","messageId":"undef","endLine":101,"endColumn":31},{"ruleId":"no-undef","severity":2,"message":"'Alpine' is not defined.","line":119,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":119,"endColumn":11},{"ruleId":"no-unused-vars","severity":2,"message":"'value' is defined but never used.","line":123,"column":42,"nodeType":"Identifier","messageId":"unusedVar","endLine":123,"endColumn":47,"suggestions":[{"messageId":"removeVar","data":{"varName":"value"},"fix":{"range":[3506,3511],"text":""},"desc":"Remove unused variable 'value'."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const fullScreenInputModalProxy = {\n    isOpen: false,\n    inputText: '',\n    wordWrap: true,\n    undoStack: [],\n    redoStack: [],\n    maxStackSize: 100,\n    lastSavedState: '',\n\n    openModal() {\n        const chatInput = document.getElementById('chat-input');\n        this.inputText = chatInput.value;\n        this.lastSavedState = this.inputText;\n        this.isOpen = true;\n        this.undoStack = [];\n        this.redoStack = [];\n        \n        // Focus the full screen input after a short delay to ensure the modal is rendered\n        setTimeout(() => {\n            const fullScreenInput = document.getElementById('full-screen-input');\n            fullScreenInput.focus();\n        }, 100);\n    },\n\n    handleClose() {\n        const chatInput = document.getElementById('chat-input');\n        chatInput.value = this.inputText;\n        chatInput.dispatchEvent(new Event('input')); // Trigger input event for textarea auto-resize\n        this.isOpen = false;\n    },\n\n    updateHistory() {\n        // Don't save if the text hasn't changed\n        if (this.lastSavedState === this.inputText) return;\n        \n        this.undoStack.push(this.lastSavedState);\n        if (this.undoStack.length > this.maxStackSize) {\n            this.undoStack.shift();\n        }\n        this.redoStack = [];\n        this.lastSavedState = this.inputText;\n    },\n\n    undo() {\n        if (!this.canUndo) return;\n        \n        this.redoStack.push(this.inputText);\n        this.inputText = this.undoStack.pop();\n        this.lastSavedState = this.inputText;\n    },\n\n    redo() {\n        if (!this.canRedo) return;\n        \n        this.undoStack.push(this.inputText);\n        this.inputText = this.redoStack.pop();\n        this.lastSavedState = this.inputText;\n    },\n\n    clearText() {\n        if (this.inputText) {\n            this.updateHistory(); // Save current state before clearing\n            this.inputText = '';\n            this.lastSavedState = '';\n        }\n    },\n\n    toggleWrap() {\n        this.wordWrap = !this.wordWrap;\n    },\n\n    get canUndo() {\n        return this.undoStack.length > 0;\n    },\n\n    get canRedo() {\n        return this.redoStack.length > 0;\n    }\n};\n\n// Register the full screen input modal with Alpine as a store\ndocument.addEventListener('alpine:init', () => {\n    Alpine.store('fullScreenInputModal', fullScreenInputModalProxy);\n});\n\n// Also register as a component for x-data usage\ndocument.addEventListener('alpine:init', () => {\n    Alpine.data('fullScreenInputModalProxy', () => fullScreenInputModalProxy);\n});\n\nconst genericModalProxy = {\n    isOpen: false,\n    isLoading: false,\n    title: '',\n    description: '',\n    html: '',\n\n    async openModal(title, description, html, contentClasses = []) {\n        const modalEl = document.getElementById('genericModal');\n        const modalContent = document.getElementById('viewer');\n        const modalAD = Alpine.$data(modalEl);\n\n        modalAD.isOpen = true;\n        modalAD.title = title\n        modalAD.description = description\n        modalAD.html = html\n\n        modalContent.className = 'modal-content';\n        modalContent.classList.add(...contentClasses);\n    },\n\n    handleClose() {\n        this.isOpen = false;\n    }\n}\n\n// Wait for Alpine to be ready\ndocument.addEventListener('alpine:init', () => {\n    Alpine.data('genericModalProxy', () => ({\n        init() {\n            Object.assign(this, genericModalProxy);\n            // Ensure immediate file fetch when modal opens\n            this.$watch('isOpen', async (value) => {\n               // what now?\n            });\n        }\n    }));\n});\n\n// Keep the global assignment for backward compatibility\nwindow.genericModalProxy = genericModalProxy;","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/zero/webui/js/modals.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'MutationObserver' is not defined.","line":111,"column":11,"nodeType":"Identifier","messageId":"undef","endLine":111,"endColumn":27},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":133,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":133,"endColumn":24,"suggestions":[{"fix":{"range":[4092,4145],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":146,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":146,"endColumn":20,"suggestions":[{"fix":{"range":[4545,4598],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Import the component loader and page utilities\nimport { importComponent } from \"/js/components.js\";\n\n// Modal functionality\nconst modalStack = [];\n\n// Create a single backdrop for all modals\nconst backdrop = document.createElement(\"div\");\nbackdrop.className = \"modal-backdrop\";\nbackdrop.style.display = \"none\";\nbackdrop.style.backdropFilter = \"blur(5px)\";\n\n// Make sure we only close when clicking directly on the backdrop, not its children\nbackdrop.addEventListener(\"click\", (event) => {\n  if (event.target === backdrop) {\n    closeModal();\n  }\n});\ndocument.body.appendChild(backdrop);\n\n// Function to update z-index for all modals and backdrop\nfunction updateModalZIndexes() {\n  // Base z-index for modals\n  const baseZIndex = 3000;\n\n  // Update z-index for all modals\n  modalStack.forEach((modal, index) => {\n    // For first modal, z-index is baseZIndex\n    // For second modal, z-index is baseZIndex + 20\n    // This leaves room for the backdrop between them\n    modal.element.style.zIndex = baseZIndex + index * 20;\n  });\n\n  // Always show backdrop\n  backdrop.style.display = \"block\";\n\n  if (modalStack.length > 1) {\n    // For multiple modals, position backdrop between the top two\n    const topModalIndex = modalStack.length - 1;\n    const previousModalZIndex = baseZIndex + (topModalIndex - 1) * 20;\n    backdrop.style.zIndex = previousModalZIndex + 10;\n  } else if (modalStack.length === 1) {\n    // For single modal, position backdrop below it\n    backdrop.style.zIndex = baseZIndex - 1;\n  } else {\n    // No modals, hide backdrop\n    backdrop.style.display = \"none\";\n  }\n}\n\n// Function to create a new modal element\nfunction createModalElement(name) {\n  // Create modal element\n  const newModal = document.createElement(\"div\");\n  newModal.className = \"modal\";\n  newModal.modalName = name; // save name to the object\n\n  // Add click handler to the modal element to close when clicking outside content\n  newModal.addEventListener(\"click\", (event) => {\n    // Only close if clicking directly on the modal container, not its content\n    if (event.target === newModal) {\n      closeModal();\n    }\n  });\n\n\n  // Create modal structure\n  newModal.innerHTML = `\n    <div class=\"modal-inner\">\n      <div class=\"modal-header\">\n        <h2 class=\"modal-title\"></h2>\n        <button class=\"modal-close\">&times;</button>\n      </div>\n      <div class=\"modal-scroll\">\n        <div class=\"modal-bd\"></div>\n      </div>\n    </div>\n  `;\n\n  // Setup close button handler for this specific modal\n  const close_button = newModal.querySelector(\".modal-close\");\n  close_button.addEventListener(\"click\", () => closeModal());\n\n\n  // Add modal to DOM\n  document.body.appendChild(newModal);\n\n  // Show the modal\n  newModal.classList.add(\"show\");\n\n  // Update modal z-indexes\n  updateModalZIndexes();\n\n  return {\n    element: newModal,\n    title: newModal.querySelector(\".modal-title\"),\n    body: newModal.querySelector(\".modal-bd\"),\n    close: close_button,\n    styles: [],\n    scripts: [],\n  };\n}\n\n// Function to open modal with content from URL\nexport function openModal(modalPath) {\n  return new Promise((resolve) => {\n    try {\n      // Create new modal instance\n      const modal = createModalElement();\n\n      new MutationObserver(\n        (_, o) =>\n          !document.contains(modal.element) && (o.disconnect(), resolve())\n      ).observe(document.body, { childList: true, subtree: true });\n\n      // Set a loading state\n      modal.body.innerHTML = '<div class=\"loading\">Loading...</div>';\n\n      // Already added to stack above\n\n      // Use importComponent to load the modal content\n      // This handles all HTML, styles, scripts and nested components\n      // Updated path to use the new folder structure with modal.html\n      const componentPath = modalPath; // `modals/${modalPath}/modal.html`;\n\n      // Use importComponent which now returns the parsed document\n      importComponent(componentPath, modal.body)\n        .then((doc) => {\n          // Set the title from the document\n          modal.title.innerHTML = doc.title || modalPath;\n        })\n        .catch((error) => {\n          console.error(\"Error loading modal content:\", error);\n          modal.body.innerHTML = `<div class=\"error\">Failed to load modal content: ${error.message}</div>`;\n        });\n\n      // Add modal to stack and show it\n      // Add modal to stack\n      modalStack.push(modal);\n      modal.element.classList.add(\"show\");\n      document.body.style.overflow = \"hidden\";\n\n      // Update modal z-indexes\n      updateModalZIndexes();\n    } catch (error) {\n      console.error(\"Error loading modal content:\", error);\n      resolve();\n    }\n  });\n}\n\n// Function to close modal\nexport function closeModal(modalName = null) {\n  if (modalStack.length === 0) return;\n\n  let modalIndex = modalStack.length - 1; // Default to last modal\n  let modal;\n\n  if (modalName) {\n    // Find the modal with the specified name in the stack\n    modalIndex = modalStack.findIndex((modal) => modal.modalName === modalName);\n    if (modalIndex === -1) return; // Modal not found in stack\n\n    // Get the modal from stack at the found index\n    modal = modalStack[modalIndex];\n    // Remove the modal from stack\n    modalStack.splice(modalIndex, 1);\n  } else {\n    // Just remove the last modal\n    modal = modalStack.pop();\n  }\n\n  // Remove modal-specific styles and scripts immediately\n  modal.styles.forEach((styleId) => {\n    document.querySelector(`[data-modal-style=\"${styleId}\"]`)?.remove();\n  });\n  modal.scripts.forEach((scriptId) => {\n    document.querySelector(`[data-modal-script=\"${scriptId}\"]`)?.remove();\n  });\n\n  // First remove the show class to trigger the transition\n  modal.element.classList.remove(\"show\");\n\n  // Remove the modal element from DOM after animation\n  modal.element.addEventListener(\n    \"transitionend\",\n    () => {\n      // Make sure the modal is completely removed from the DOM\n      if (modal.element.parentNode) {\n        modal.element.parentNode.removeChild(modal.element);\n      }\n    },\n    { once: true }\n  );\n\n  // Fallback in case the transition event doesn't fire\n  setTimeout(() => {\n    if (modal.element.parentNode) {\n      modal.element.parentNode.removeChild(modal.element);\n    }\n  }, 500); // 500ms should be enough for the transition to complete\n\n  // Handle backdrop visibility and body overflow\n  if (modalStack.length === 0) {\n    // Hide backdrop when no modals are left\n    backdrop.style.display = \"none\";\n    document.body.style.overflow = \"\";\n  } else {\n    // Update modal z-indexes\n    updateModalZIndexes();\n  }\n}\n\n// Function to scroll to element by ID within the last modal\nexport function scrollModal(id) {\n  if (!id) return;\n\n  // Get the last modal in the stack\n  const lastModal = modalStack[modalStack.length - 1].element;\n  if (!lastModal) return;\n\n  // Find the modal container and target element\n  const modalContainer = lastModal.querySelector(\".modal-scroll\");\n  const targetElement = lastModal.querySelector(`#${id}`);\n\n  if (modalContainer && targetElement) {\n    modalContainer.scrollTo({\n      top: targetElement.offsetTop - 20, // 20px padding from top\n      behavior: \"smooth\",\n    });\n  }\n}\n\n// Make scrollModal globally available\nglobalThis.scrollModal = scrollModal;\n\n// Handle modal content loading from clicks\ndocument.addEventListener(\"click\", async (e) => {\n  const modalTrigger = e.target.closest(\"[data-modal-content]\");\n  if (modalTrigger) {\n    e.preventDefault();\n    if (\n      modalTrigger.hasAttribute(\"disabled\") ||\n      modalTrigger.classList.contains(\"disabled\")\n    ) {\n      return;\n    }\n    const modalPath = modalTrigger.getAttribute(\"href\");\n    await openModal(modalPath);\n  }\n});\n\n// Close modal on escape key (closes only the top modal)\ndocument.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Escape\" && modalStack.length > 0) {\n    closeModal();\n  }\n});\n\n// also export as global function\nglobalThis.openModal = openModal;\nglobalThis.closeModal = closeModal;\nglobalThis.scrollModal = scrollModal;\n","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/zero/webui/js/scheduler.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":66,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":66,"endColumn":20,"suggestions":[{"fix":{"range":[2667,2710],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'newTasks' is defined but never used.","line":145,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":145,"endColumn":43,"suggestions":[{"messageId":"removeVar","data":{"varName":"newTasks"},"fix":{"range":[5350,5358],"text":""},"desc":"Remove unused variable 'newTasks'."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":198,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":198,"endColumn":28,"suggestions":[{"fix":{"range":[7112,7167],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":218,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":218,"endColumn":28,"suggestions":[{"fix":{"range":[7882,7940],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":222,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":222,"endColumn":24,"suggestions":[{"fix":{"range":[7992,8029],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":236,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":236,"endColumn":24,"suggestions":[{"fix":{"range":[8482,8519],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":277,"column":21,"nodeType":"MemberExpression","messageId":"unexpected","endLine":277,"endColumn":34,"suggestions":[{"fix":{"range":[9823,9886],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":280,"column":21,"nodeType":"MemberExpression","messageId":"unexpected","endLine":280,"endColumn":34,"suggestions":[{"fix":{"range":[10001,10075],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":286,"column":29,"nodeType":"MemberExpression","messageId":"unexpected","endLine":286,"endColumn":42,"suggestions":[{"fix":{"range":[10363,10416],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":290,"column":29,"nodeType":"MemberExpression","messageId":"unexpected","endLine":290,"endColumn":42,"suggestions":[{"fix":{"range":[10555,10597],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":294,"column":29,"nodeType":"MemberExpression","messageId":"unexpected","endLine":294,"endColumn":42,"suggestions":[{"fix":{"range":[10736,10778],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":298,"column":29,"nodeType":"MemberExpression","messageId":"unexpected","endLine":298,"endColumn":42,"suggestions":[{"fix":{"range":[10917,10959],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":305,"column":25,"nodeType":"MemberExpression","messageId":"unexpected","endLine":305,"endColumn":37,"suggestions":[{"fix":{"range":[11181,11265],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":314,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":314,"endColumn":30,"suggestions":[{"fix":{"range":[11500,11546],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":396,"column":25,"nodeType":"MemberExpression","messageId":"unexpected","endLine":396,"endColumn":37,"suggestions":[{"fix":{"range":[14514,14588],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":399,"column":21,"nodeType":"MemberExpression","messageId":"unexpected","endLine":399,"endColumn":34,"suggestions":[{"fix":{"range":[14665,14731],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":485,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":485,"endColumn":24,"suggestions":[{"fix":{"range":[17954,17998],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":486,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":486,"endColumn":24,"suggestions":[{"fix":{"range":[18011,18067],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"prefer-const","severity":2,"message":"'scheduleObj' is never reassigned. Use 'const' instead.","line":494,"column":21,"nodeType":"Identifier","messageId":"useConst","endLine":494,"endColumn":32,"fix":{"range":[18459,18705],"text":"const scheduleObj = {\n                    minute: '*',\n                    hour: '*',\n                    day: '*',\n                    month: '*',\n                    weekday: '*',\n                    timezone: getUserTimezone()\n                };"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":556,"column":21,"nodeType":"MemberExpression","messageId":"unexpected","endLine":556,"endColumn":32,"suggestions":[{"fix":{"range":[21246,21321],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":559,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":559,"endColumn":28,"suggestions":[{"fix":{"range":[21357,21426],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":602,"column":21,"nodeType":"MemberExpression","messageId":"unexpected","endLine":602,"endColumn":32,"suggestions":[{"fix":{"range":[22962,23022],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"prefer-const","severity":2,"message":"'taskData' is never reassigned. Use 'const' instead.","line":666,"column":17,"nodeType":"Identifier","messageId":"useConst","endLine":666,"endColumn":25},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":710,"column":25,"nodeType":"MemberExpression","messageId":"unexpected","endLine":710,"endColumn":36,"suggestions":[{"fix":{"range":[27887,27962],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":713,"column":21,"nodeType":"MemberExpression","messageId":"unexpected","endLine":713,"endColumn":32,"suggestions":[{"fix":{"range":[28006,28072],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":747,"column":33,"nodeType":"MemberExpression","messageId":"unexpected","endLine":747,"endColumn":45,"suggestions":[{"fix":{"range":[29602,29665],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":750,"column":29,"nodeType":"MemberExpression","messageId":"unexpected","endLine":750,"endColumn":41,"suggestions":[{"fix":{"range":[29766,29822],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":768,"column":21,"nodeType":"MemberExpression","messageId":"unexpected","endLine":768,"endColumn":32,"suggestions":[{"fix":{"range":[30490,30569],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":784,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":784,"endColumn":28,"suggestions":[{"fix":{"range":[31144,31229],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":808,"column":21,"nodeType":"MemberExpression","messageId":"unexpected","endLine":808,"endColumn":32,"suggestions":[{"fix":{"range":[32187,32248],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":869,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":869,"endColumn":30,"suggestions":[{"fix":{"range":[34607,34650],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":898,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":898,"endColumn":30,"suggestions":[{"fix":{"range":[35605,35649],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":944,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":944,"endColumn":30,"suggestions":[{"fix":{"range":[37279,37331],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":991,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":991,"endColumn":30,"suggestions":[{"fix":{"range":[39076,39121],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'filteredTasks'.","line":1029,"column":13,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":1029,"endColumn":26},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1032,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1032,"endColumn":29,"suggestions":[{"fix":{"range":[40738,40789],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'attachmentsText'.","line":1095,"column":13,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":1095,"endColumn":28},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'attachmentsText'.","line":1106,"column":13,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":1106,"endColumn":28},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1118,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1118,"endColumn":26,"suggestions":[{"fix":{"range":[44145,44199],"text":""},"messageId":"removeConsole","data":{"propertyName":"group"},"desc":"Remove the console.group()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1119,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1119,"endColumn":24,"suggestions":[{"fix":{"range":[44212,44252],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1120,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1120,"endColumn":24,"suggestions":[{"fix":{"range":[44265,44312],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1121,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1121,"endColumn":24,"suggestions":[{"fix":{"range":[44325,44374],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1122,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1122,"endColumn":24,"suggestions":[{"fix":{"range":[44387,44432],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1123,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1123,"endColumn":24,"suggestions":[{"fix":{"range":[44445,44498],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1127,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1127,"endColumn":30,"suggestions":[{"fix":{"range":[44604,44668],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1128,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1128,"endColumn":33,"suggestions":[{"fix":{"range":[44685,44704],"text":""},"messageId":"removeConsole","data":{"propertyName":"groupEnd"},"desc":"Remove the console.groupEnd()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1132,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1132,"endColumn":24,"suggestions":[{"fix":{"range":[44756,44817],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1135,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1135,"endColumn":26,"suggestions":[{"fix":{"range":[44869,44906],"text":""},"messageId":"removeConsole","data":{"propertyName":"group"},"desc":"Remove the console.group()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1141,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1141,"endColumn":28,"suggestions":[{"fix":{"range":[45188,45254],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1143,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1143,"endColumn":29,"suggestions":[{"fix":{"range":[45283,45302],"text":""},"messageId":"removeConsole","data":{"propertyName":"groupEnd"},"desc":"Remove the console.groupEnd()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1146,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1146,"endColumn":26,"suggestions":[{"fix":{"range":[45355,45393],"text":""},"messageId":"removeConsole","data":{"propertyName":"group"},"desc":"Remove the console.group()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1152,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1152,"endColumn":28,"suggestions":[{"fix":{"range":[45687,45755],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1154,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1154,"endColumn":29,"suggestions":[{"fix":{"range":[45784,45803],"text":""},"messageId":"removeConsole","data":{"propertyName":"groupEnd"},"desc":"Remove the console.groupEnd()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1157,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1157,"endColumn":24,"suggestions":[{"fix":{"range":[45860,45919],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1159,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1159,"endColumn":29,"suggestions":[{"fix":{"range":[45933,45952],"text":""},"messageId":"removeConsole","data":{"propertyName":"groupEnd"},"desc":"Remove the console.groupEnd()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1164,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1164,"endColumn":26,"suggestions":[{"fix":{"range":[46042,46097],"text":""},"messageId":"removeConsole","data":{"propertyName":"group"},"desc":"Remove the console.group()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1167,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1167,"endColumn":24,"suggestions":[{"fix":{"range":[46142,46174],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1168,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1168,"endColumn":24,"suggestions":[{"fix":{"range":[46187,46573],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1181,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1181,"endColumn":30,"suggestions":[{"fix":{"range":[46654,46711],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1182,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1182,"endColumn":33,"suggestions":[{"fix":{"range":[46728,46747],"text":""},"messageId":"removeConsole","data":{"propertyName":"groupEnd"},"desc":"Remove the console.groupEnd()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1187,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1187,"endColumn":30,"suggestions":[{"fix":{"range":[46849,46932],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1188,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1188,"endColumn":33,"suggestions":[{"fix":{"range":[46949,46968],"text":""},"messageId":"removeConsole","data":{"propertyName":"groupEnd"},"desc":"Remove the console.groupEnd()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1193,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1193,"endColumn":26,"suggestions":[{"fix":{"range":[47045,47072],"text":""},"messageId":"removeConsole","data":{"propertyName":"group"},"desc":"Remove the console.group()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1194,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1194,"endColumn":24,"suggestions":[{"fix":{"range":[47085,47128],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1196,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1196,"endColumn":30,"suggestions":[{"fix":{"range":[47186,47381],"text":""},"messageId":"removeConsole","data":{"propertyName":"table"},"desc":"Remove the console.table()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1204,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1204,"endColumn":28,"suggestions":[{"fix":{"range":[47447,47524],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1206,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1206,"endColumn":28,"suggestions":[{"fix":{"range":[47562,47596],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1208,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1208,"endColumn":29,"suggestions":[{"fix":{"range":[47623,47642],"text":""},"messageId":"removeConsole","data":{"propertyName":"groupEnd"},"desc":"Remove the console.groupEnd()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1211,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1211,"endColumn":26,"suggestions":[{"fix":{"range":[47686,47718],"text":""},"messageId":"removeConsole","data":{"propertyName":"group"},"desc":"Remove the console.group()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1213,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1213,"endColumn":24,"suggestions":[{"fix":{"range":[47785,47831],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1215,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1215,"endColumn":30,"suggestions":[{"fix":{"range":[47892,48090],"text":""},"messageId":"removeConsole","data":{"propertyName":"table"},"desc":"Remove the console.table()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1222,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1222,"endColumn":28,"suggestions":[{"fix":{"range":[48128,48161],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1224,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1224,"endColumn":29,"suggestions":[{"fix":{"range":[48188,48207],"text":""},"messageId":"removeConsole","data":{"propertyName":"groupEnd"},"desc":"Remove the console.groupEnd()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1227,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1227,"endColumn":26,"suggestions":[{"fix":{"range":[48263,48297],"text":""},"messageId":"removeConsole","data":{"propertyName":"group"},"desc":"Remove the console.group()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1231,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1231,"endColumn":29,"suggestions":[{"fix":{"range":[48427,48492],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1235,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1235,"endColumn":28,"suggestions":[{"fix":{"range":[48626,48681],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1239,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1239,"endColumn":28,"suggestions":[{"fix":{"range":[48818,48875],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1246,"column":21,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1246,"endColumn":32,"suggestions":[{"fix":{"range":[49171,49238],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1253,"column":21,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1253,"endColumn":32,"suggestions":[{"fix":{"range":[49511,49581],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1262,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1262,"endColumn":29,"suggestions":[{"fix":{"range":[49921,49984],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1266,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1266,"endColumn":29,"suggestions":[{"fix":{"range":[50053,50117],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1269,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1269,"endColumn":29,"suggestions":[{"fix":{"range":[50145,50164],"text":""},"messageId":"removeConsole","data":{"propertyName":"groupEnd"},"desc":"Remove the console.groupEnd()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1271,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1271,"endColumn":29,"suggestions":[{"fix":{"range":[50178,50197],"text":""},"messageId":"removeConsole","data":{"propertyName":"groupEnd"},"desc":"Remove the console.groupEnd()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1289,"column":21,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1289,"endColumn":32,"suggestions":[{"fix":{"range":[50948,51008],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1293,"column":21,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1293,"endColumn":33,"suggestions":[{"fix":{"range":[51078,51142],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"no-undef","severity":2,"message":"'flatpickr' is not defined.","line":1341,"column":28,"nodeType":"Identifier","messageId":"undef","endLine":1341,"endColumn":37},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1425,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1425,"endColumn":16,"suggestions":[{"fix":{"range":[56768,56833],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1428,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1428,"endColumn":16,"suggestions":[{"fix":{"range":[56907,56969],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1445,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1445,"endColumn":24,"suggestions":[{"fix":{"range":[57675,57749],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1464,"column":21,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1464,"endColumn":32,"suggestions":[{"fix":{"range":[58663,58711],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1593,"column":25,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1593,"endColumn":38,"suggestions":[{"fix":{"range":[64109,64157],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1603,"column":21,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1603,"endColumn":34,"suggestions":[{"fix":{"range":[64447,64513],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1607,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1607,"endColumn":24,"suggestions":[{"fix":{"range":[64566,64604],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1617,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1617,"endColumn":16,"suggestions":[{"fix":{"range":[64785,64867],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1622,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1622,"endColumn":20,"suggestions":[{"fix":{"range":[65040,65121],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-undef","severity":2,"message":"'Alpine' is not defined.","line":1623,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":1623,"endColumn":15},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1629,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1629,"endColumn":16,"suggestions":[{"fix":{"range":[65359,65432],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-undef","severity":2,"message":"'Alpine' is not defined.","line":1649,"column":35,"nodeType":"Identifier","messageId":"undef","endLine":1649,"endColumn":41},{"ruleId":"no-undef","severity":2,"message":"'Alpine' is not defined.","line":1660,"column":47,"nodeType":"Identifier","messageId":"undef","endLine":1660,"endColumn":53},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1666,"column":29,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1666,"endColumn":42,"suggestions":[{"fix":{"range":[67080,67149],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1672,"column":29,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1672,"endColumn":42,"suggestions":[{"fix":{"range":[67376,67447],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1675,"column":25,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1675,"endColumn":38,"suggestions":[{"fix":{"range":[67527,67587],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1679,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1679,"endColumn":30,"suggestions":[{"fix":{"range":[67679,67737],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":93,"fixableErrorCount":1,"fixableWarningCount":0,"source":"/**\n * Task Scheduler Component for Settings Modal\n * Manages scheduled and ad-hoc tasks through a dedicated settings tab\n */\n\nimport { formatDateTime, getUserTimezone } from './time-utils.js';\nimport { switchFromContext } from '../index.js';\n\n// Ensure the showToast function is available\n// if (typeof window.showToast !== 'function') {\n//     window.showToast = function(message, type = 'info') {\n//         console.log(`[Toast ${type}]: ${message}`);\n//         // Create toast element if not already present\n//         let toastContainer = document.getElementById('toast-container');\n//         if (!toastContainer) {\n//             toastContainer = document.createElement('div');\n//             toastContainer.id = 'toast-container';\n//             toastContainer.style.position = 'fixed';\n//             toastContainer.style.bottom = '20px';\n//             toastContainer.style.right = '20px';\n//             toastContainer.style.zIndex = '9999';\n//             document.body.appendChild(toastContainer);\n//         }\n\n//         // Create the toast\n//         const toast = document.createElement('div');\n//         toast.className = `toast toast-${type}`;\n//         toast.style.padding = '10px 15px';\n//         toast.style.margin = '5px 0';\n//         toast.style.backgroundColor = type === 'error' ? '#f44336' :\n//                                     type === 'success' ? '#4CAF50' :\n//                                     type === 'warning' ? '#ff9800' : '#2196F3';\n//         toast.style.color = 'white';\n//         toast.style.borderRadius = '4px';\n//         toast.style.boxShadow = '0 2px 5px rgba(0,0,0,0.2)';\n//         toast.style.width = 'auto';\n//         toast.style.maxWidth = '300px';\n//         toast.style.wordWrap = 'break-word';\n\n//         toast.innerHTML = message;\n\n//         // Add to container\n//         toastContainer.appendChild(toast);\n\n//         // Auto remove after 3 seconds\n//         setTimeout(() => {\n//             if (toast.parentNode) {\n//                 toast.style.opacity = '0';\n//                 toast.style.transition = 'opacity 0.5s ease';\n//                 setTimeout(() => {\n//                     if (toast.parentNode) {\n//                         toast.parentNode.removeChild(toast);\n//                     }\n//                 }, 500);\n//             }\n//         }, 3000);\n//     };\n// }\n\n// Add this near the top of the scheduler.js file, outside of any function\nconst showToast = function(message, type = 'info') {\n    // Use the global toast function if available, otherwise fallback to console\n    if (typeof window.toast === 'function') {\n        window.toast(message, type);\n    } else {\n        console.log(`Toast (${type}): ${message}`);\n    }\n};\n\n// Define the full component implementation\nconst fullComponentImplementation = function() {\n    return {\n        tasks: [],\n        isLoading: true,\n        selectedTask: null,\n        expandedTaskId: null,\n        sortField: 'name',\n        sortDirection: 'asc',\n        filterType: 'all',  // all, scheduled, adhoc, planned\n        filterState: 'all',  // all, idle, running, disabled, error\n        pollingInterval: null,\n        pollingActive: false, // Track if polling is currently active\n        editingTask: {\n            name: '',\n            type: 'scheduled',\n            state: 'idle',\n            schedule: {\n                minute: '*',\n                hour: '*',\n                day: '*',\n                month: '*',\n                weekday: '*',\n                timezone: getUserTimezone()\n            },\n            token: '',\n            plan: {\n                todo: [],\n                in_progress: null,\n                done: []\n            },\n            system_prompt: '',\n            prompt: '',\n            attachments: []\n        },\n        isCreating: false,\n        isEditing: false,\n        showLoadingState: false,\n        viewMode: 'list', // Controls whether to show list or detail view\n        selectedTaskForDetail: null, // Task object for detail view\n        attachmentsText: '',\n        filteredTasks: [],\n        hasNoTasks: true, // Add explicit reactive property\n\n        // Initialize the component\n        init() {\n            // Initialize component data\n            this.tasks = [];\n            this.isLoading = true;\n            this.hasNoTasks = true; // Add explicit reactive property\n            this.filterType = 'all';\n            this.filterState = 'all';\n            this.sortField = 'name';\n            this.sortDirection = 'asc';\n            this.pollingInterval = null;\n            this.pollingActive = false;\n\n            // Start polling for tasks\n            this.startPolling();\n\n            // Refresh initial data\n            this.fetchTasks();\n\n            // Set up event handler for tab selection to ensure view is refreshed when tab becomes visible\n            document.addEventListener('click', (event) => {\n                // Check if a tab was clicked\n                const clickedTab = event.target.closest('.settings-tab');\n                if (clickedTab && clickedTab.getAttribute('data-tab') === 'scheduler') {\n                    setTimeout(() => {\n                        this.fetchTasks();\n                    }, 100);\n                }\n            });\n\n            // Watch for changes to the tasks array to update UI\n            this.$watch('tasks', (newTasks) => {\n                this.updateTasksUI();\n            });\n\n            this.$watch('filterType', () => {\n                this.updateTasksUI();\n            });\n\n            this.$watch('filterState', () => {\n                this.updateTasksUI();\n            });\n\n            // Set up default configuration\n            this.viewMode = localStorage.getItem('scheduler_view_mode') || 'list';\n            this.selectedTask = null;\n            this.expandedTaskId = null;\n            this.editingTask = {\n                name: '',\n                type: 'scheduled',\n                state: 'idle',\n                schedule: {\n                    minute: '*',\n                    hour: '*',\n                    day: '*',\n                    month: '*',\n                    weekday: '*',\n                    timezone: getUserTimezone()\n                },\n                token: this.generateRandomToken ? this.generateRandomToken() : '',\n                plan: {\n                    todo: [],\n                    in_progress: null,\n                    done: []\n                },\n                system_prompt: '',\n                prompt: '',\n                attachments: []\n            };\n\n            // Initialize Flatpickr for date/time pickers after Alpine is fully initialized\n            this.$nextTick(() => {\n                // Wait until DOM is updated\n                setTimeout(() => {\n                    if (this.isCreating) {\n                        this.initFlatpickr('create');\n                    } else if (this.isEditing) {\n                        this.initFlatpickr('edit');\n                    }\n                }, 100);\n            });\n\n            // Cleanup on component destruction\n            this.$cleanup = () => {\n                console.log('Cleaning up schedulerSettings component');\n                this.stopPolling();\n\n                // Clean up any Flatpickr instances\n                const createInput = document.getElementById('newPlannedTime-create');\n                if (createInput && createInput._flatpickr) {\n                    createInput._flatpickr.destroy();\n                }\n\n                const editInput = document.getElementById('newPlannedTime-edit');\n                if (editInput && editInput._flatpickr) {\n                    editInput._flatpickr.destroy();\n                }\n            };\n        },\n\n        // Start polling for task updates\n        startPolling() {\n            // Don't start if already polling\n            if (this.pollingInterval) {\n                console.log('Polling already active, not starting again');\n                return;\n            }\n\n            console.log('Starting task polling');\n            this.pollingActive = true;\n\n            // Fetch immediately, then set up interval for every 2 seconds\n            this.fetchTasks();\n            this.pollingInterval = setInterval(() => {\n                if (this.pollingActive) {\n                    this.fetchTasks();\n                }\n            }, 2000); // Poll every 2 seconds as requested\n        },\n\n        // Stop polling when tab is inactive\n        stopPolling() {\n            console.log('Stopping task polling');\n            this.pollingActive = false;\n\n            if (this.pollingInterval) {\n                clearInterval(this.pollingInterval);\n                this.pollingInterval = null;\n            }\n        },\n\n        // Fetch tasks from API\n        async fetchTasks() {\n            // Don't fetch if polling is inactive (prevents race conditions)\n            if (!this.pollingActive && this.pollingInterval) {\n                return;\n            }\n\n            // Don't fetch while creating/editing a task\n            if (this.isCreating || this.isEditing) {\n                return;\n            }\n\n            this.isLoading = true;\n            try {\n                const response = await fetch('/scheduler_tasks_list', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        timezone: getUserTimezone()\n                    })\n                });\n\n                if (!response.ok) {\n                    throw new Error('Failed to fetch tasks');\n                }\n\n                const data = await response.json();\n\n                // Check if data.tasks exists and is an array\n                if (!data || !data.tasks) {\n                    console.error('Invalid response: data.tasks is missing', data);\n                    this.tasks = [];\n                } else if (!Array.isArray(data.tasks)) {\n                    console.error('Invalid response: data.tasks is not an array', data.tasks);\n                    this.tasks = [];\n                } else {\n                    // Verify each task has necessary properties\n                    const validTasks = data.tasks.filter(task => {\n                        if (!task || typeof task !== 'object') {\n                            console.error('Invalid task (not an object):', task);\n                            return false;\n                        }\n                        if (!task.uuid) {\n                            console.error('Task missing uuid:', task);\n                            return false;\n                        }\n                        if (!task.name) {\n                            console.error('Task missing name:', task);\n                            return false;\n                        }\n                        if (!task.type) {\n                            console.error('Task missing type:', task);\n                            return false;\n                        }\n                        return true;\n                    });\n\n                    if (validTasks.length !== data.tasks.length) {\n                        console.warn(`Filtered out ${data.tasks.length - validTasks.length} invalid tasks`);\n                    }\n\n                    this.tasks = validTasks;\n\n                    // Update UI using the shared function\n                    this.updateTasksUI();\n                }\n            } catch (error) {\n                console.error('Error fetching tasks:', error);\n                // Only show toast for errors on manual refresh, not during polling\n                if (!this.pollingInterval) {\n                    showToast('Failed to fetch tasks: ' + error.message, 'error');\n                }\n                // Reset tasks to empty array on error\n                this.tasks = [];\n            } finally {\n                this.isLoading = false;\n            }\n        },\n\n        // Change sort field/direction\n        changeSort(field) {\n            if (this.sortField === field) {\n                // Toggle direction if already sorting by this field\n                this.sortDirection = this.sortDirection === 'asc' ? 'desc' : 'asc';\n            } else {\n                // Set new sort field and default to ascending\n                this.sortField = field;\n                this.sortDirection = 'asc';\n            }\n        },\n\n        // Toggle expanded task row\n        toggleTaskExpand(taskId) {\n            if (this.expandedTaskId === taskId) {\n                this.expandedTaskId = null;\n            } else {\n                this.expandedTaskId = taskId;\n            }\n        },\n\n        // Show task detail view\n        showTaskDetail(taskId) {\n            const task = this.tasks.find(t => t.uuid === taskId);\n            if (!task) {\n                showToast('Task not found', 'error');\n                return;\n            }\n\n            // Create a copy of the task to avoid modifying the original\n            this.selectedTaskForDetail = JSON.parse(JSON.stringify(task));\n\n            // Ensure attachments is always an array\n            if (!this.selectedTaskForDetail.attachments) {\n                this.selectedTaskForDetail.attachments = [];\n            }\n\n            this.viewMode = 'detail';\n        },\n\n        // Close detail view and return to list\n        closeTaskDetail() {\n            this.selectedTaskForDetail = null;\n            this.viewMode = 'list';\n        },\n\n        // Format date for display\n        formatDate(dateString) {\n            if (!dateString) return 'Never';\n            return formatDateTime(dateString, 'full');\n        },\n\n        // Format plan for display\n        formatPlan(task) {\n            if (!task || !task.plan) return 'No plan';\n\n            const todoCount = Array.isArray(task.plan.todo) ? task.plan.todo.length : 0;\n            const inProgress = task.plan.in_progress ? 'Yes' : 'No';\n            const doneCount = Array.isArray(task.plan.done) ? task.plan.done.length : 0;\n\n            let nextRun = '';\n            if (Array.isArray(task.plan.todo) && task.plan.todo.length > 0) {\n                try {\n                    const nextTime = new Date(task.plan.todo[0]);\n\n                    // Verify it's a valid date before formatting\n                    if (!isNaN(nextTime.getTime())) {\n                        nextRun = formatDateTime(nextTime, 'short');\n                    } else {\n                        nextRun = 'Invalid date';\n                        console.warn(`Invalid date format in plan.todo[0]: ${task.plan.todo[0]}`);\n                    }\n                } catch (error) {\n                    console.error(`Error formatting next run time: ${error.message}`);\n                    nextRun = 'Error';\n                }\n            } else {\n                nextRun = 'None';\n            }\n\n            return `Next: ${nextRun}\\nTodo: ${todoCount}\\nIn Progress: ${inProgress}\\nDone: ${doneCount}`;\n        },\n\n        // Format schedule for display\n        formatSchedule(task) {\n            if (!task.schedule) return 'None';\n\n            let schedule = '';\n            if (typeof task.schedule === 'string') {\n                schedule = task.schedule;\n            } else if (typeof task.schedule === 'object') {\n                // Display only the cron parts, not the timezone\n                schedule = `${task.schedule.minute || '*'} ${task.schedule.hour || '*'} ${task.schedule.day || '*'} ${task.schedule.month || '*'} ${task.schedule.weekday || '*'}`;\n            }\n\n            return schedule;\n        },\n\n        // Get CSS class for state badge\n        getStateBadgeClass(state) {\n            switch (state) {\n                case 'idle': return 'scheduler-status-idle';\n                case 'running': return 'scheduler-status-running';\n                case 'disabled': return 'scheduler-status-disabled';\n                case 'error': return 'scheduler-status-error';\n                default: return '';\n            }\n        },\n\n        // Create a new task\n        startCreateTask() {\n            this.isCreating = true;\n            this.isEditing = false;\n            document.querySelector('[x-data=\"schedulerSettings\"]')?.setAttribute('data-editing-state', 'creating');\n            this.editingTask = {\n                name: '',\n                type: 'scheduled', // Default to scheduled\n                state: 'idle', // Initialize with idle state\n                schedule: {\n                    minute: '*',\n                    hour: '*',\n                    day: '*',\n                    month: '*',\n                    weekday: '*',\n                    timezone: getUserTimezone()\n                },\n                token: this.generateRandomToken(), // Generate token even for scheduled tasks to prevent undefined errors\n                plan: { // Initialize plan for all task types to prevent undefined errors\n                    todo: [],\n                    in_progress: null,\n                    done: []\n                },\n                system_prompt: '',\n                prompt: '',\n                attachments: [], // Always initialize as an empty array\n            };\n\n            // Set up Flatpickr after the component is visible\n            this.$nextTick(() => {\n                this.initFlatpickr('create');\n            });\n        },\n\n        // Edit an existing task\n        async startEditTask(taskId) {\n            const task = this.tasks.find(t => t.uuid === taskId);\n            if (!task) {\n                showToast('Task not found', 'error');\n                return;\n            }\n\n            this.isCreating = false;\n            this.isEditing = true;\n            document.querySelector('[x-data=\"schedulerSettings\"]')?.setAttribute('data-editing-state', 'editing');\n\n            // Create a deep copy to avoid modifying the original\n            this.editingTask = JSON.parse(JSON.stringify(task));\n\n            // Debug log\n            console.log('Task data for editing:', task);\n            console.log('Attachments from task:', task.attachments);\n\n            // Ensure state is set with a default if missing\n            if (!this.editingTask.state) this.editingTask.state = 'idle';\n\n            // Always initialize schedule to prevent UI errors\n            // All task types need this structure for the form to work properly\n            if (!this.editingTask.schedule || typeof this.editingTask.schedule === 'string') {\n                let scheduleObj = {\n                    minute: '*',\n                    hour: '*',\n                    day: '*',\n                    month: '*',\n                    weekday: '*',\n                    timezone: getUserTimezone()\n                };\n\n                // If it's a string, parse it\n                if (typeof this.editingTask.schedule === 'string') {\n                    const parts = this.editingTask.schedule.split(' ');\n                    if (parts.length >= 5) {\n                        scheduleObj.minute = parts[0] || '*';\n                        scheduleObj.hour = parts[1] || '*';\n                        scheduleObj.day = parts[2] || '*';\n                        scheduleObj.month = parts[3] || '*';\n                        scheduleObj.weekday = parts[4] || '*';\n                    }\n                }\n\n                this.editingTask.schedule = scheduleObj;\n            } else {\n                // Ensure timezone exists in the schedule\n                if (!this.editingTask.schedule.timezone) {\n                    this.editingTask.schedule.timezone = getUserTimezone();\n                }\n            }\n\n            // Ensure attachments is always an array\n            if (!this.editingTask.attachments) {\n                this.editingTask.attachments = [];\n            } else if (typeof this.editingTask.attachments === 'string') {\n                // Handle case where attachments might be stored as a string\n                this.editingTask.attachments = this.editingTask.attachments\n                    .split('\\n')\n                    .map(line => line.trim())\n                    .filter(line => line.length > 0);\n            } else if (!Array.isArray(this.editingTask.attachments)) {\n                // If not an array or string, set to empty array\n                this.editingTask.attachments = [];\n            }\n\n            // Ensure appropriate properties are initialized based on task type\n            if (this.editingTask.type === 'scheduled') {\n                // Initialize token for scheduled tasks to prevent undefined errors if UI accesses it\n                if (!this.editingTask.token) {\n                    this.editingTask.token = '';\n                }\n\n                // Initialize plan stub for scheduled tasks to prevent undefined errors\n                if (!this.editingTask.plan) {\n                    this.editingTask.plan = {\n                        todo: [],\n                        in_progress: null,\n                        done: []\n                    };\n                }\n            } else if (this.editingTask.type === 'adhoc') {\n                // Initialize token if it doesn't exist\n                if (!this.editingTask.token) {\n                    this.editingTask.token = this.generateRandomToken();\n                    console.log('Generated new token for adhoc task:', this.editingTask.token);\n                }\n\n                console.log('Setting token for adhoc task:', this.editingTask.token);\n\n                // Initialize plan stub for adhoc tasks to prevent undefined errors\n                if (!this.editingTask.plan) {\n                    this.editingTask.plan = {\n                        todo: [],\n                        in_progress: null,\n                        done: []\n                    };\n                }\n            } else if (this.editingTask.type === 'planned') {\n                // Initialize plan if it doesn't exist\n                if (!this.editingTask.plan) {\n                    this.editingTask.plan = {\n                        todo: [],\n                        in_progress: null,\n                        done: []\n                    };\n                }\n\n                // Ensure todo is an array\n                if (!Array.isArray(this.editingTask.plan.todo)) {\n                    this.editingTask.plan.todo = [];\n                }\n\n                // Initialize token to prevent undefined errors\n                if (!this.editingTask.token) {\n                    this.editingTask.token = '';\n                }\n            }\n\n            // Set up Flatpickr after the component is visible and task data is loaded\n            this.$nextTick(() => {\n                this.initFlatpickr('edit');\n            });\n        },\n\n        // Cancel editing\n        cancelEdit() {\n            // Clean up Flatpickr instances\n            const destroyFlatpickr = (inputId) => {\n                const input = document.getElementById(inputId);\n                if (input && input._flatpickr) {\n                    console.log(`Destroying Flatpickr instance for ${inputId}`);\n                    input._flatpickr.destroy();\n\n                    // Also remove any wrapper elements that might have been created\n                    const wrapper = input.closest('.scheduler-flatpickr-wrapper');\n                    if (wrapper && wrapper.parentNode) {\n                        // Move the input back to its original position\n                        wrapper.parentNode.insertBefore(input, wrapper);\n                        // Remove the wrapper\n                        wrapper.parentNode.removeChild(wrapper);\n                    }\n\n                    // Remove any added classes\n                    input.classList.remove('scheduler-flatpickr-input');\n                }\n            };\n\n            if (this.isCreating) {\n                destroyFlatpickr('newPlannedTime-create');\n            } else if (this.isEditing) {\n                destroyFlatpickr('newPlannedTime-edit');\n            }\n\n            // Reset to initial state but keep default values to prevent errors\n            this.editingTask = {\n                name: '',\n                type: 'scheduled',\n                state: 'idle', // Initialize with idle state\n                schedule: {\n                    minute: '*',\n                    hour: '*',\n                    day: '*',\n                    month: '*',\n                    weekday: '*',\n                    timezone: getUserTimezone()\n                },\n                token: '',\n                plan: { // Initialize plan for planned tasks\n                    todo: [],\n                    in_progress: null,\n                    done: []\n                },\n                system_prompt: '',\n                prompt: '',\n                attachments: [], // Always initialize as an empty array\n            };\n            this.isCreating = false;\n            this.isEditing = false;\n            document.querySelector('[x-data=\"schedulerSettings\"]')?.removeAttribute('data-editing-state');\n        },\n\n        // Save task (create new or update existing)\n        async saveTask() {\n            // Validate task data\n            if (!this.editingTask.name.trim() || !this.editingTask.prompt.trim()) {\n                // showToast('Task name and prompt are required', 'error');\n                alert('Task name and prompt are required');\n                return;\n            }\n\n            try {\n                let apiEndpoint, taskData;\n\n                // Prepare task data\n                taskData = {\n                    name: this.editingTask.name,\n                    system_prompt: this.editingTask.system_prompt || '',\n                    prompt: this.editingTask.prompt || '',\n                    state: this.editingTask.state || 'idle', // Include state in task data\n                    timezone: getUserTimezone()\n                };\n\n                // Process attachments - now always stored as array\n                taskData.attachments = Array.isArray(this.editingTask.attachments)\n                    ? this.editingTask.attachments\n                        .map(line => typeof line === 'string' ? line.trim() : line)\n                        .filter(line => line && line.trim().length > 0)\n                    : [];\n\n                // Handle task type specific data\n                if (this.editingTask.type === 'scheduled') {\n                    // Ensure schedule is properly formatted as an object\n                    if (typeof this.editingTask.schedule === 'string') {\n                        // Parse string schedule into object\n                        const parts = this.editingTask.schedule.split(' ');\n                        taskData.schedule = {\n                            minute: parts[0] || '*',\n                            hour: parts[1] || '*',\n                            day: parts[2] || '*',\n                            month: parts[3] || '*',\n                            weekday: parts[4] || '*',\n                            timezone: getUserTimezone() // Add timezone to schedule object\n                        };\n                    } else {\n                        // Use object schedule directly but ensure timezone is included\n                        taskData.schedule = {\n                            ...this.editingTask.schedule,\n                            timezone: this.editingTask.schedule.timezone || getUserTimezone()\n                        };\n                    }\n                    // Don't send token or plan for scheduled tasks\n                    delete taskData.token;\n                    delete taskData.plan;\n                } else if (this.editingTask.type === 'adhoc') {\n                    // Ad-hoc task with token\n                    // Ensure token is a non-empty string, generate a new one if needed\n                    if (!this.editingTask.token) {\n                        this.editingTask.token = this.generateRandomToken();\n                        console.log('Generated new token for adhoc task:', this.editingTask.token);\n                    }\n\n                    console.log('Setting token in taskData:', this.editingTask.token);\n                    taskData.token = this.editingTask.token;\n\n                    // Don't send schedule or plan for adhoc tasks\n                    delete taskData.schedule;\n                    delete taskData.plan;\n                } else if (this.editingTask.type === 'planned') {\n                    // Planned task with plan\n                    // Make sure plan exists and has required properties\n                    if (!this.editingTask.plan) {\n                        this.editingTask.plan = {\n                            todo: [],\n                            in_progress: null,\n                            done: []\n                        };\n                    }\n\n                    // Ensure todo and done are arrays\n                    if (!Array.isArray(this.editingTask.plan.todo)) {\n                        this.editingTask.plan.todo = [];\n                    }\n\n                    if (!Array.isArray(this.editingTask.plan.done)) {\n                        this.editingTask.plan.done = [];\n                    }\n\n                    // Validate each date in the todo list to ensure it's a valid ISO string\n                    const validatedTodo = [];\n                    for (const dateStr of this.editingTask.plan.todo) {\n                        try {\n                            const date = new Date(dateStr);\n                            if (!isNaN(date.getTime())) {\n                                validatedTodo.push(date.toISOString());\n                            } else {\n                                console.warn(`Skipping invalid date in todo list: ${dateStr}`);\n                            }\n                        } catch (error) {\n                            console.warn(`Error processing date: ${error.message}`);\n                        }\n                    }\n\n                    // Replace with validated list\n                    this.editingTask.plan.todo = validatedTodo;\n\n                    // Sort the todo items by date (earliest first)\n                    this.editingTask.plan.todo.sort();\n\n                    // Set the plan in taskData\n                    taskData.plan = {\n                        todo: this.editingTask.plan.todo,\n                        in_progress: this.editingTask.plan.in_progress,\n                        done: this.editingTask.plan.done || []\n                    };\n\n                    // Log the plan data for debugging\n                    console.log('Planned task plan data:', JSON.stringify(taskData.plan, null, 2));\n\n                    // Don't send schedule or token for planned tasks\n                    delete taskData.schedule;\n                    delete taskData.token;\n                }\n\n                // Determine if creating or updating\n                if (this.isCreating) {\n                    apiEndpoint = '/scheduler_task_create';\n                } else {\n                    apiEndpoint = '/scheduler_task_update';\n                    taskData.task_id = this.editingTask.uuid;\n                }\n\n                // Debug: Log the final task data being sent\n                console.log('Final task data being sent to API:', JSON.stringify(taskData, null, 2));\n\n                // Make API request\n                const response = await fetch(apiEndpoint, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify(taskData)\n                });\n\n                if (!response.ok) {\n                    const errorData = await response.json();\n                    throw new Error(errorData.error || 'Failed to save task');\n                }\n\n                // Parse response data to get the created/updated task\n                const responseData = await response.json();\n\n                // Show success message\n                showToast(this.isCreating ? 'Task created successfully' : 'Task updated successfully', 'success');\n\n                // Immediately update the UI if the response includes the task\n                if (responseData && responseData.task) {\n                    console.log('Task received in response:', responseData.task);\n\n                    // Update the tasks array\n                    if (this.isCreating) {\n                        // For new tasks, add to the array\n                        this.tasks = [...this.tasks, responseData.task];\n                    } else {\n                        // For updated tasks, replace the existing one\n                        this.tasks = this.tasks.map(t =>\n                            t.uuid === responseData.task.uuid ? responseData.task : t\n                        );\n                    }\n\n                    // Update UI using the shared function\n                    this.updateTasksUI();\n                } else {\n                    // Fallback to fetching tasks if no task in response\n                    await this.fetchTasks();\n                }\n\n                // Clean up Flatpickr instances\n                const destroyFlatpickr = (inputId) => {\n                    const input = document.getElementById(inputId);\n                    if (input && input._flatpickr) {\n                        input._flatpickr.destroy();\n                    }\n                };\n\n                if (this.isCreating) {\n                    destroyFlatpickr('newPlannedTime-create');\n                } else if (this.isEditing) {\n                    destroyFlatpickr('newPlannedTime-edit');\n                }\n\n                // Reset task data and form state\n                this.editingTask = {\n                    name: '',\n                    type: 'scheduled',\n                    state: 'idle',\n                    schedule: {\n                        minute: '*',\n                        hour: '*',\n                        day: '*',\n                        month: '*',\n                        weekday: '*',\n                        timezone: getUserTimezone()\n                    },\n                    token: '',\n                    plan: {\n                        todo: [],\n                        in_progress: null,\n                        done: []\n                    },\n                    system_prompt: '',\n                    prompt: '',\n                    attachments: []\n                };\n                this.isCreating = false;\n                this.isEditing = false;\n                document.querySelector('[x-data=\"schedulerSettings\"]')?.removeAttribute('data-editing-state');\n            } catch (error) {\n                console.error('Error saving task:', error);\n                showToast('Failed to save task: ' + error.message, 'error');\n            }\n        },\n\n        // Run a task\n        async runTask(taskId) {\n            try {\n                const response = await fetch('/scheduler_task_run', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        task_id: taskId,\n                        timezone: getUserTimezone()\n                    })\n                });\n\n                if (!response.ok) {\n                    const errorData = await response.json();\n                    throw new Error(errorData.error || 'Failed to run task');\n                }\n\n                showToast('Task started successfully', 'success');\n\n                // Refresh task list\n                this.fetchTasks();\n            } catch (error) {\n                console.error('Error running task:', error);\n                showToast('Failed to run task: ' + error.message, 'error');\n            }\n        },\n\n        // Reset a task's state\n        async resetTaskState(taskId) {\n            try {\n                const task = this.tasks.find(t => t.uuid === taskId);\n                if (!task) {\n                    showToast('Task not found', 'error');\n                    return;\n                }\n\n                // Check if task is already in idle state\n                if (task.state === 'idle') {\n                    showToast('Task is already in idle state', 'info');\n                    return;\n                }\n\n                this.showLoadingState = true;\n\n                // Call API to update the task state\n                const response = await fetch('/scheduler_task_update', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        task_id: taskId,\n                        state: 'idle',  // Always reset to idle state\n                        timezone: getUserTimezone()\n                    })\n                });\n\n                if (!response.ok) {\n                    const errorData = await response.json();\n                    throw new Error(errorData.error || 'Failed to reset task state');\n                }\n\n                showToast('Task state reset to idle', 'success');\n\n                // Refresh task list\n                await this.fetchTasks();\n                this.showLoadingState = false;\n            } catch (error) {\n                console.error('Error resetting task state:', error);\n                showToast('Failed to reset task state: ' + error.message, 'error');\n                this.showLoadingState = false;\n            }\n        },\n\n        // Delete a task\n        async deleteTask(taskId) {\n            // Confirm deletion\n            if (!confirm('Are you sure you want to delete this task? This action cannot be undone.')) {\n                return;\n            }\n\n            try {\n\n                // if we delete selected context, switch to another first\n                switchFromContext(taskId);\n\n                const response = await fetch('/scheduler_task_delete', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        task_id: taskId,\n                        timezone: getUserTimezone()\n                    })\n                });\n\n                if (!response.ok) {\n                    const errorData = await response.json();\n                    throw new Error(errorData.error || 'Failed to delete task');\n                }\n\n                showToast('Task deleted successfully', 'success');\n                \n                // If we were viewing the detail of the deleted task, close the detail view\n                if (this.selectedTaskForDetail && this.selectedTaskForDetail.uuid === taskId) {\n                    this.closeTaskDetail();\n                }\n\n                // Immediately update UI without waiting for polling\n                this.tasks = this.tasks.filter(t => t.uuid !== taskId);\n\n                // Update UI using the shared function\n                this.updateTasksUI();\n            } catch (error) {\n                console.error('Error deleting task:', error);\n                showToast('Failed to delete task: ' + error.message, 'error');\n            }\n        },\n\n        // Initialize datetime input with default value (30 minutes from now)\n        initDateTimeInput(event) {\n            if (!event.target.value) {\n                const now = new Date();\n                now.setMinutes(now.getMinutes() + 30);\n\n                // Format as YYYY-MM-DDThh:mm\n                const year = now.getFullYear();\n                const month = String(now.getMonth() + 1).padStart(2, '0');\n                const day = String(now.getDate()).padStart(2, '0');\n                const hours = String(now.getHours()).padStart(2, '0');\n                const minutes = String(now.getMinutes()).padStart(2, '0');\n\n                event.target.value = `${year}-${month}-${day}T${hours}:${minutes}`;\n\n                // If using Flatpickr, update it as well\n                if (event.target._flatpickr) {\n                    event.target._flatpickr.setDate(event.target.value);\n                }\n            }\n        },\n\n        // Generate a random token for ad-hoc tasks\n        generateRandomToken() {\n            const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n            let token = '';\n            for (let i = 0; i < 16; i++) {\n                token += characters.charAt(Math.floor(Math.random() * characters.length));\n            }\n            return token;\n        },\n\n        // Getter for filtered tasks\n        get filteredTasks() {\n            // Make sure we have tasks to filter\n            if (!Array.isArray(this.tasks)) {\n                console.warn('Tasks is not an array:', this.tasks);\n                return [];\n            }\n\n            let filtered = [...this.tasks];\n\n            // Apply type filter with case-insensitive comparison\n            if (this.filterType && this.filterType !== 'all') {\n                filtered = filtered.filter(task => {\n                    if (!task.type) return false;\n                    return String(task.type).toLowerCase() === this.filterType.toLowerCase();\n                });\n            }\n\n            // Apply state filter with case-insensitive comparison\n            if (this.filterState && this.filterState !== 'all') {\n                filtered = filtered.filter(task => {\n                    if (!task.state) return false;\n                    return String(task.state).toLowerCase() === this.filterState.toLowerCase();\n                });\n            }\n\n            // Sort the filtered tasks\n            return this.sortTasks(filtered);\n        },\n\n        // Sort the tasks based on sort field and direction\n        sortTasks(tasks) {\n            if (!Array.isArray(tasks) || tasks.length === 0) {\n                return tasks;\n            }\n\n            return [...tasks].sort((a, b) => {\n                if (!this.sortField) return 0;\n\n                const fieldA = a[this.sortField];\n                const fieldB = b[this.sortField];\n\n                // Handle cases where fields might be undefined\n                if (fieldA === undefined && fieldB === undefined) return 0;\n                if (fieldA === undefined) return 1;\n                if (fieldB === undefined) return -1;\n\n                // For dates, convert to timestamps\n                if (this.sortField === 'createdAt' || this.sortField === 'updatedAt') {\n                    const dateA = new Date(fieldA).getTime();\n                    const dateB = new Date(fieldB).getTime();\n                    return this.sortDirection === 'asc' ? dateA - dateB : dateB - dateA;\n                }\n\n                // For string comparisons\n                if (typeof fieldA === 'string' && typeof fieldB === 'string') {\n                    return this.sortDirection === 'asc'\n                        ? fieldA.localeCompare(fieldB)\n                        : fieldB.localeCompare(fieldA);\n                }\n\n                // For numerical comparisons\n                return this.sortDirection === 'asc' ? fieldA - fieldB : fieldB - fieldA;\n            });\n        },\n\n        // Computed property for attachments text representation\n        get attachmentsText() {\n            // Ensure we always have an array to work with\n            const attachments = Array.isArray(this.editingTask.attachments)\n                ? this.editingTask.attachments\n                : [];\n\n            // Join array items with newlines\n            return attachments.join('\\n');\n        },\n\n        // Setter for attachments text - preserves empty lines during editing\n        set attachmentsText(value) {\n            if (typeof value === 'string') {\n                // Just split by newlines without filtering to preserve editing experience\n                this.editingTask.attachments = value.split('\\n');\n            } else {\n                // Fallback to empty array if not a string\n                this.editingTask.attachments = [];\n            }\n        },\n\n        // Debug method to test filtering logic\n        testFiltering() {\n            console.group('SchedulerSettings Debug: Filter Test');\n            console.log('Current Filter Settings:');\n            console.log('- Filter Type:', this.filterType);\n            console.log('- Filter State:', this.filterState);\n            console.log('- Sort Field:', this.sortField);\n            console.log('- Sort Direction:', this.sortDirection);\n\n            // Check if tasks is an array\n            if (!Array.isArray(this.tasks)) {\n                console.error('ERROR: this.tasks is not an array!', this.tasks);\n                console.groupEnd();\n                return;\n            }\n\n            console.log(`Raw Tasks (${this.tasks.length}):`, this.tasks);\n\n            // Test filtering by type\n            console.group('Filter by Type Test');\n            ['all', 'adhoc', 'scheduled', 'recurring'].forEach(type => {\n                const filtered = this.tasks.filter(task =>\n                    type === 'all' ||\n                    (task.type && String(task.type).toLowerCase() === type)\n                );\n                console.log(`Type \"${type}\": ${filtered.length} tasks`, filtered);\n            });\n            console.groupEnd();\n\n            // Test filtering by state\n            console.group('Filter by State Test');\n            ['all', 'idle', 'running', 'completed', 'failed'].forEach(state => {\n                const filtered = this.tasks.filter(task =>\n                    state === 'all' ||\n                    (task.state && String(task.state).toLowerCase() === state)\n                );\n                console.log(`State \"${state}\": ${filtered.length} tasks`, filtered);\n            });\n            console.groupEnd();\n\n            // Show current filtered tasks\n            console.log('Current Filtered Tasks:', this.filteredTasks);\n\n            console.groupEnd();\n        },\n\n        // New comprehensive debug method\n        debugTasks() {\n            console.group('SchedulerSettings Comprehensive Debug');\n\n            // Component state\n            console.log('Component State:');\n            console.log({\n                filterType: this.filterType,\n                filterState: this.filterState,\n                sortField: this.sortField,\n                sortDirection: this.sortDirection,\n                isLoading: this.isLoading,\n                isEditing: this.isEditing,\n                isCreating: this.isCreating,\n                viewMode: this.viewMode\n            });\n\n            // Tasks validation\n            if (!this.tasks) {\n                console.error('ERROR: this.tasks is undefined or null!');\n                console.groupEnd();\n                return;\n            }\n\n            if (!Array.isArray(this.tasks)) {\n                console.error('ERROR: this.tasks is not an array!', typeof this.tasks, this.tasks);\n                console.groupEnd();\n                return;\n            }\n\n            // Raw tasks\n            console.group('Raw Tasks');\n            console.log(`Count: ${this.tasks.length}`);\n            if (this.tasks.length > 0) {\n                console.table(this.tasks.map(t => ({\n                    uuid: t.uuid,\n                    name: t.name,\n                    type: t.type,\n                    state: t.state\n                })));\n\n                // Inspect first task in detail\n                console.log('First Task Structure:', JSON.stringify(this.tasks[0], null, 2));\n            } else {\n                console.log('No tasks available');\n            }\n            console.groupEnd();\n\n            // Filtered tasks\n            console.group('Filtered Tasks');\n            const filteredTasks = this.filteredTasks;\n            console.log(`Count: ${filteredTasks.length}`);\n            if (filteredTasks.length > 0) {\n                console.table(filteredTasks.map(t => ({\n                    uuid: t.uuid,\n                    name: t.name,\n                    type: t.type,\n                    state: t.state\n                })));\n            } else {\n                console.log('No filtered tasks');\n            }\n            console.groupEnd();\n\n            // Check for potential issues\n            console.group('Potential Issues');\n\n            // Check for case mismatches\n            if (this.tasks.length > 0 && filteredTasks.length === 0) {\n                console.warn('Filter seems to exclude all tasks. Checking why:');\n\n                // Check type values\n                const uniqueTypes = [...new Set(this.tasks.map(t => t.type))];\n                console.log('Unique task types in data:', uniqueTypes);\n\n                // Check state values\n                const uniqueStates = [...new Set(this.tasks.map(t => t.state))];\n                console.log('Unique task states in data:', uniqueStates);\n\n                // Check for exact mismatches\n                if (this.filterType !== 'all') {\n                    const typeMatch = this.tasks.some(t =>\n                        t.type && String(t.type).toLowerCase() === this.filterType.toLowerCase()\n                    );\n                    console.log(`Type \"${this.filterType}\" matches found:`, typeMatch);\n                }\n\n                if (this.filterState !== 'all') {\n                    const stateMatch = this.tasks.some(t =>\n                        t.state && String(t.state).toLowerCase() === this.filterState.toLowerCase()\n                    );\n                    console.log(`State \"${this.filterState}\" matches found:`, stateMatch);\n                }\n            }\n\n            // Check for undefined or null values\n            const hasUndefinedType = this.tasks.some(t => t.type === undefined || t.type === null);\n            const hasUndefinedState = this.tasks.some(t => t.state === undefined || t.state === null);\n\n            if (hasUndefinedType) {\n                console.warn('Some tasks have undefined or null type values!');\n            }\n\n            if (hasUndefinedState) {\n                console.warn('Some tasks have undefined or null state values!');\n            }\n\n            console.groupEnd();\n\n            console.groupEnd();\n        },\n\n        // Initialize Flatpickr datetime pickers for both create and edit forms\n        /**\n         * Initialize Flatpickr date/time pickers for scheduler forms\n         *\n         * @param {string} mode - Which pickers to initialize: 'all', 'create', or 'edit'\n         * @returns {void}\n         */\n        initFlatpickr(mode = 'all') {\n            const initPicker = (inputId, refName, wrapperClass, options = {}) => {\n                // Try to get input using Alpine.js x-ref first (more reliable)\n                let input = this.$refs[refName];\n\n                // Fall back to getElementById if x-ref is not available\n                if (!input) {\n                    input = document.getElementById(inputId);\n                    console.log(`Using getElementById fallback for ${inputId}`);\n                }\n\n                if (!input) {\n                    console.warn(`Input element ${inputId} not found by ID or ref`);\n                    return null;\n                }\n\n                // Create a wrapper around the input\n                const wrapper = document.createElement('div');\n                wrapper.className = wrapperClass || 'scheduler-flatpickr-wrapper';\n                wrapper.style.overflow = 'visible'; // Ensure dropdown can escape container\n\n                // Replace the input with our wrapped version\n                input.parentNode.insertBefore(wrapper, input);\n                wrapper.appendChild(input);\n                input.classList.add('scheduler-flatpickr-input');\n\n                // Default options\n                const defaultOptions = {\n                    dateFormat: \"Y-m-d H:i\",\n                    enableTime: true,\n                    time_24hr: true,\n                    static: false, // Not static so it will float\n                    appendTo: document.body, // Append to body to avoid overflow issues\n                    theme: \"scheduler-theme\",\n                    allowInput: true,\n                    positionElement: wrapper, // Position relative to wrapper\n                    onOpen: function(selectedDates, dateStr, instance) {\n                        // Ensure calendar is properly positioned and visible\n                        instance.calendarContainer.style.zIndex = '9999';\n                        instance.calendarContainer.style.position = 'absolute';\n                        instance.calendarContainer.style.visibility = 'visible';\n                        instance.calendarContainer.style.opacity = '1';\n\n                        // Add class to calendar container for our custom styling\n                        instance.calendarContainer.classList.add('scheduler-theme');\n                    },\n                    // Set default date to 30 minutes from now if no date selected\n                    onReady: function(selectedDates, dateStr, instance) {\n                        if (!dateStr) {\n                            const now = new Date();\n                            now.setMinutes(now.getMinutes() + 30);\n                            instance.setDate(now, true);\n                        }\n                    }\n                };\n\n                // Merge options\n                const mergedOptions = {...defaultOptions, ...options};\n\n                // Initialize flatpickr\n                const fp = flatpickr(input, mergedOptions);\n\n                // Add a clear button\n                const clearButton = document.createElement('button');\n                clearButton.className = 'scheduler-flatpickr-clear';\n                clearButton.innerHTML = '×';\n                clearButton.type = 'button';\n                clearButton.addEventListener('click', (e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    if (fp) {\n                        fp.clear();\n                    }\n                });\n                wrapper.appendChild(clearButton);\n\n                return fp;\n            };\n\n            // Clear any existing Flatpickr instances to prevent duplication\n            if (mode === 'all' || mode === 'create') {\n                const createInput = document.getElementById('newPlannedTime-create');\n                if (createInput && createInput._flatpickr) {\n                    createInput._flatpickr.destroy();\n                }\n            }\n\n            if (mode === 'all' || mode === 'edit') {\n                const editInput = document.getElementById('newPlannedTime-edit');\n                if (editInput && editInput._flatpickr) {\n                    editInput._flatpickr.destroy();\n                }\n            }\n\n            // Initialize new instances\n            if (mode === 'all' || mode === 'create') {\n                initPicker('newPlannedTime-create', 'plannedTimeCreate', 'scheduler-flatpickr-wrapper', {\n                    minuteIncrement: 5,\n                    defaultHour: new Date().getHours(),\n                    defaultMinute: Math.ceil(new Date().getMinutes() / 5) * 5\n                });\n            }\n\n            if (mode === 'all' || mode === 'edit') {\n                initPicker('newPlannedTime-edit', 'plannedTimeEdit', 'scheduler-flatpickr-wrapper', {\n                    minuteIncrement: 5,\n                    defaultHour: new Date().getHours(),\n                    defaultMinute: Math.ceil(new Date().getMinutes() / 5) * 5\n                });\n            }\n        },\n\n        // Update tasks UI\n        updateTasksUI() {\n            // First update filteredTasks if that method exists\n            if (typeof this.updateFilteredTasks === 'function') {\n                this.updateFilteredTasks();\n            }\n\n            // Wait for UI to update\n            this.$nextTick(() => {\n                // Get empty state and task list elements\n                const emptyElement = document.querySelector('.scheduler-empty');\n                const tableElement = document.querySelector('.scheduler-task-list');\n\n                // Calculate visibility state based on filtered tasks\n                const hasFilteredTasks = Array.isArray(this.filteredTasks) && this.filteredTasks.length > 0;\n\n                // Update visibility directly\n                if (emptyElement) {\n                    emptyElement.style.display = !hasFilteredTasks ? '' : 'none';\n                }\n\n                if (tableElement) {\n                    tableElement.style.display = hasFilteredTasks ? '' : 'none';\n                }\n            });\n        }\n    };\n};\n\n\n// Only define the component if it doesn't already exist or extend the existing one\nif (!window.schedulerSettings) {\n    console.log('Defining schedulerSettings component from scratch');\n    window.schedulerSettings = fullComponentImplementation;\n} else {\n    console.log('Extending existing schedulerSettings component');\n    // Store the original function\n    const originalSchedulerSettings = window.schedulerSettings;\n\n    // Replace with enhanced version that merges the pre-initialized stub with the full implementation\n    window.schedulerSettings = function() {\n        // Get the base pre-initialized component\n        const baseComponent = originalSchedulerSettings();\n\n        // Create a backup of the original init function\n        const originalInit = baseComponent.init || function() {};\n\n        // Create our enhanced init function that adds the missing functionality\n        baseComponent.init = function() {\n            // Call the original init if it exists\n            originalInit.call(this);\n\n            console.log('Enhanced init running: adding missing methods to component');\n\n            // Get the full implementation\n            const fullImpl = fullComponentImplementation();\n\n            // Add essential methods directly\n            const essentialMethods = [\n                'fetchTasks', 'startPolling', 'stopPolling',\n                'startCreateTask', 'startEditTask', 'cancelEdit',\n                'saveTask', 'runTask', 'resetTaskState', 'deleteTask',\n                'toggleTaskExpand', 'showTaskDetail', 'closeTaskDetail',\n                'changeSort', 'formatDate', 'formatPlan', 'formatSchedule',\n                'getStateBadgeClass', 'generateRandomToken', 'testFiltering',\n                'debugTasks', 'sortTasks', 'initFlatpickr', 'initDateTimeInput',\n                'updateTasksUI'\n            ];\n\n            essentialMethods.forEach(method => {\n                if (typeof this[method] !== 'function' && typeof fullImpl[method] === 'function') {\n                    console.log(`Adding missing method: ${method}`);\n                    this[method] = fullImpl[method];\n                }\n            });\n\n            // hack to expose deleteTask\n            window.deleteTaskGlobal = this.deleteTask.bind(this);\n\n            // Make sure we have a filteredTasks array initialized\n            this.filteredTasks = [];\n\n            // Initialize essential properties if missing\n            if (!Array.isArray(this.tasks)) {\n                this.tasks = [];\n            }\n\n            // Make sure attachmentsText getter/setter are defined\n            if (!Object.getOwnPropertyDescriptor(this, 'attachmentsText')?.get) {\n                Object.defineProperty(this, 'attachmentsText', {\n                    get: function() {\n                        // Ensure we always have an array to work with\n                        const attachments = Array.isArray(this.editingTask?.attachments)\n                            ? this.editingTask.attachments\n                            : [];\n\n                        // Join array items with newlines\n                        return attachments.join('\\n');\n                    },\n                    set: function(value) {\n                        if (!this.editingTask) {\n                            this.editingTask = { attachments: [] };\n                        }\n\n                        if (typeof value === 'string') {\n                            // Just split by newlines without filtering to preserve editing experience\n                            this.editingTask.attachments = value.split('\\n');\n                        } else {\n                            // Fallback to empty array if not a string\n                            this.editingTask.attachments = [];\n                        }\n                    }\n                });\n            }\n\n            // Add methods for updating filteredTasks directly\n            if (typeof this.updateFilteredTasks !== 'function') {\n                this.updateFilteredTasks = function() {\n                    // Make sure we have tasks to filter\n                    if (!Array.isArray(this.tasks)) {\n                        this.filteredTasks = [];\n                        return;\n                    }\n\n                    let filtered = [...this.tasks];\n\n                    // Apply type filter with case-insensitive comparison\n                    if (this.filterType && this.filterType !== 'all') {\n                        filtered = filtered.filter(task => {\n                            if (!task.type) return false;\n                            return String(task.type).toLowerCase() === this.filterType.toLowerCase();\n                        });\n                    }\n\n                    // Apply state filter with case-insensitive comparison\n                    if (this.filterState && this.filterState !== 'all') {\n                        filtered = filtered.filter(task => {\n                            if (!task.state) return false;\n                            return String(task.state).toLowerCase() === this.filterState.toLowerCase();\n                        });\n                    }\n\n                    // Sort the filtered tasks\n                    if (typeof this.sortTasks === 'function') {\n                        filtered = this.sortTasks(filtered);\n                    }\n\n                    // Directly update the filteredTasks property\n                    this.filteredTasks = filtered;\n                };\n            }\n\n            // Set up watchers to update filtered tasks when dependencies change\n            this.$nextTick(() => {\n                // Update filtered tasks when raw tasks change\n                this.$watch('tasks', () => {\n                    this.updateFilteredTasks();\n                });\n\n                // Update filtered tasks when filter type changes\n                this.$watch('filterType', () => {\n                    this.updateFilteredTasks();\n                });\n\n                // Update filtered tasks when filter state changes\n                this.$watch('filterState', () => {\n                    this.updateFilteredTasks();\n                });\n\n                // Update filtered tasks when sort field or direction changes\n                this.$watch('sortField', () => {\n                    this.updateFilteredTasks();\n                });\n\n                this.$watch('sortDirection', () => {\n                    this.updateFilteredTasks();\n                });\n\n                // Initial update\n                this.updateFilteredTasks();\n\n                // Set up watcher for task type changes to initialize Flatpickr for planned tasks\n                this.$watch('editingTask.type', (newType) => {\n                    if (newType === 'planned') {\n                        this.$nextTick(() => {\n                            // Reinitialize Flatpickr when switching to planned task type\n                            if (this.isCreating) {\n                                this.initFlatpickr('create');\n                            } else if (this.isEditing) {\n                                this.initFlatpickr('edit');\n                            }\n                        });\n                    }\n                });\n\n                // Initialize Flatpickr\n                this.$nextTick(() => {\n                    if (typeof this.initFlatpickr === 'function') {\n                        this.initFlatpickr();\n                    } else {\n                        console.error('initFlatpickr is not available');\n                    }\n                });\n            });\n\n            // Try fetching tasks after a short delay\n            setTimeout(() => {\n                if (typeof this.fetchTasks === 'function') {\n                    this.fetchTasks();\n                } else {\n                    console.error('fetchTasks still not available after enhancement');\n                }\n            }, 100);\n\n            console.log('Enhanced init complete');\n        };\n\n        return baseComponent;\n    };\n}\n\n// Force Alpine.js to register the component immediately\nif (window.Alpine) {\n    // Alpine is already loaded, register now\n    console.log('Alpine already loaded, registering schedulerSettings component now');\n    window.Alpine.data('schedulerSettings', window.schedulerSettings);\n} else {\n    // Wait for Alpine to load\n    document.addEventListener('alpine:init', () => {\n        console.log('Alpine:init - immediately registering schedulerSettings component');\n        Alpine.data('schedulerSettings', window.schedulerSettings);\n    });\n}\n\n// Add a document ready event handler to ensure the scheduler tab can be clicked on first load\ndocument.addEventListener('DOMContentLoaded', function() {\n    console.log('DOMContentLoaded - setting up scheduler tab click handler');\n    // Setup scheduler tab click handling\n    const setupSchedulerTab = () => {\n        const settingsModal = document.getElementById('settingsModal');\n        if (!settingsModal) {\n            setTimeout(setupSchedulerTab, 100);\n            return;\n        }\n\n        // Create a global event listener for clicks on the scheduler tab\n        document.addEventListener('click', function(e) {\n            // Find if the click was on the scheduler tab or its children\n            const schedulerTab = e.target.closest('.settings-tab[title=\"Task Scheduler\"]');\n            if (!schedulerTab) return;\n\n            e.preventDefault();\n            e.stopPropagation();\n\n            // Get the settings modal data\n            try {\n                const modalData = Alpine.$data(settingsModal);\n                if (modalData.activeTab !== 'scheduler') {\n                    // Directly call the modal's switchTab method\n                    modalData.switchTab('scheduler');\n                }\n\n                // Force start polling and fetch tasks immediately when tab is selected\n                setTimeout(() => {\n                    // Get the scheduler component data\n                    const schedulerElement = document.querySelector('[x-data=\"schedulerSettings\"]');\n                    if (schedulerElement) {\n                        const schedulerData = Alpine.$data(schedulerElement);\n\n                        // Force fetch tasks and start polling\n                        if (typeof schedulerData.fetchTasks === 'function') {\n                            schedulerData.fetchTasks();\n                        } else {\n                            console.error('fetchTasks is not a function on scheduler component');\n                        }\n\n                        if (typeof schedulerData.startPolling === 'function') {\n                            schedulerData.startPolling();\n                        } else {\n                            console.error('startPolling is not a function on scheduler component');\n                        }\n                    } else {\n                        console.error('Could not find scheduler component element');\n                    }\n                }, 100);\n            } catch (err) {\n                console.error('Error handling scheduler tab click:', err);\n            }\n        }, true); // Use capture phase to intercept before Alpine.js handlers\n    };\n\n    // Initialize the tab handling\n    setupSchedulerTab();\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/zero/webui/js/settings.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'settingsModalProxy' is assigned a value but never used.","line":2,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"settingsModalProxy"},"fix":{"range":[1,11843],"text":""},"desc":"Remove unused variable 'settingsModalProxy'."}]},{"ruleId":"no-undef","severity":2,"message":"'Alpine' is not defined.","line":28,"column":23,"nodeType":"Identifier","messageId":"undef","endLine":28,"endColumn":29},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":44,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":44,"endColumn":28,"suggestions":[{"fix":{"range":[1454,1520],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-undef","severity":2,"message":"'Alpine' is not defined.","line":47,"column":43,"nodeType":"Identifier","messageId":"undef","endLine":47,"endColumn":49},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":74,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":74,"endColumn":28,"suggestions":[{"fix":{"range":[2957,3025],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-undef","severity":2,"message":"'Alpine' is not defined.","line":77,"column":40,"nodeType":"Identifier","messageId":"undef","endLine":77,"endColumn":46},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":88,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":88,"endColumn":20,"suggestions":[{"fix":{"range":[3527,3565],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-undef","severity":2,"message":"'Alpine' is not defined.","line":90,"column":25,"nodeType":"Identifier","messageId":"undef","endLine":90,"endColumn":31},{"ruleId":"no-undef","severity":2,"message":"'Alpine' is not defined.","line":93,"column":23,"nodeType":"Identifier","messageId":"undef","endLine":93,"endColumn":29},{"ruleId":"no-undef","severity":2,"message":"'sendJsonData' is not defined.","line":101,"column":31,"nodeType":"Identifier","messageId":"undef","endLine":101,"endColumn":43},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":131,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":131,"endColumn":28,"suggestions":[{"fix":{"range":[5095,5146],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":151,"column":21,"nodeType":"MemberExpression","messageId":"unexpected","endLine":151,"endColumn":32,"suggestions":[{"fix":{"range":[6006,6079],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":152,"column":21,"nodeType":"MemberExpression","messageId":"unexpected","endLine":152,"endColumn":32,"suggestions":[{"fix":{"range":[6100,6248],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":157,"column":25,"nodeType":"MemberExpression","messageId":"unexpected","endLine":157,"endColumn":36,"suggestions":[{"fix":{"range":[6413,6492],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-undef","severity":2,"message":"'Alpine' is not defined.","line":160,"column":51,"nodeType":"Identifier","messageId":"undef","endLine":160,"endColumn":57},{"ruleId":"no-undef","severity":2,"message":"'Alpine' is not defined.","line":179,"column":43,"nodeType":"Identifier","messageId":"undef","endLine":179,"endColumn":49},{"ruleId":"no-undef","severity":2,"message":"'MutationObserver' is not defined.","line":195,"column":38,"nodeType":"Identifier","messageId":"undef","endLine":195,"endColumn":54},{"ruleId":"no-undef","severity":2,"message":"'Alpine' is not defined.","line":218,"column":29,"nodeType":"Identifier","messageId":"undef","endLine":218,"endColumn":35},{"ruleId":"no-undef","severity":2,"message":"'resp' is not defined.","line":220,"column":17,"nodeType":"Identifier","messageId":"undef","endLine":220,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'CustomEvent' is not defined.","line":225,"column":40,"nodeType":"Identifier","messageId":"undef","endLine":225,"endColumn":51},{"ruleId":"no-undef","severity":2,"message":"'resp' is not defined.","line":225,"column":82,"nodeType":"Identifier","messageId":"undef","endLine":225,"endColumn":86},{"ruleId":"no-undef","severity":2,"message":"'resp' is not defined.","line":228,"column":23,"nodeType":"Identifier","messageId":"undef","endLine":228,"endColumn":27},{"ruleId":"no-undef","severity":2,"message":"'Alpine' is not defined.","line":241,"column":23,"nodeType":"Identifier","messageId":"undef","endLine":241,"endColumn":29},{"ruleId":"no-undef","severity":2,"message":"'Alpine' is not defined.","line":263,"column":23,"nodeType":"Identifier","messageId":"undef","endLine":263,"endColumn":29},{"ruleId":"no-undef","severity":2,"message":"'Alpine' is not defined.","line":277,"column":35,"nodeType":"Identifier","messageId":"undef","endLine":277,"endColumn":41},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":279,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":279,"endColumn":28,"suggestions":[{"fix":{"range":[11488,11545],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":286,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":286,"endColumn":20,"suggestions":[{"fix":{"range":[11668,11711],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-undef","severity":2,"message":"'openModal' is not defined.","line":289,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":289,"endColumn":22},{"ruleId":"no-undef","severity":2,"message":"'Alpine' is not defined.","line":313,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":313,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'Alpine' is not defined.","line":323,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":323,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'Alpine' is not defined.","line":332,"column":34,"nodeType":"Identifier","messageId":"undef","endLine":332,"endColumn":40},{"ruleId":"no-undef","severity":2,"message":"'Alpine' is not defined.","line":353,"column":31,"nodeType":"Identifier","messageId":"undef","endLine":353,"endColumn":37},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":374,"column":29,"nodeType":"MemberExpression","messageId":"unexpected","endLine":374,"endColumn":42,"suggestions":[{"fix":{"range":[14464,14510],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":377,"column":25,"nodeType":"MemberExpression","messageId":"unexpected","endLine":377,"endColumn":38,"suggestions":[{"fix":{"range":[14590,14654],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":380,"column":21,"nodeType":"MemberExpression","messageId":"unexpected","endLine":380,"endColumn":34,"suggestions":[{"fix":{"range":[14731,14780],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":444,"column":21,"nodeType":"MemberExpression","messageId":"unexpected","endLine":444,"endColumn":34,"suggestions":[{"fix":{"range":[17552,17599],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":458,"column":21,"nodeType":"MemberExpression","messageId":"unexpected","endLine":458,"endColumn":33,"suggestions":[{"fix":{"range":[18178,18231],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":504,"column":21,"nodeType":"MemberExpression","messageId":"unexpected","endLine":504,"endColumn":34,"suggestions":[{"fix":{"range":[19921,19969],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-undef","severity":2,"message":"'Alpine' is not defined.","line":553,"column":43,"nodeType":"Identifier","messageId":"undef","endLine":553,"endColumn":49},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":555,"column":25,"nodeType":"MemberExpression","messageId":"unexpected","endLine":555,"endColumn":36,"suggestions":[{"fix":{"range":[22093,22150],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":24,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nconst settingsModalProxy = {\n    isOpen: false,\n    settings: {},\n    resolvePromise: null,\n    activeTab: 'agent', // Default tab\n    provider: 'serveo',\n\n    // Computed property for filtered sections\n    get filteredSections() {\n        if (!this.settings || !this.settings.sections) return [];\n        const filteredSections = this.settings.sections.filter(section => section.tab === this.activeTab);\n\n        // If no sections match the current tab (or all tabs are missing), show all sections\n        if (filteredSections.length === 0) {\n            return this.settings.sections;\n        }\n\n        return filteredSections;\n    },\n\n    // Switch tab method\n    switchTab(tabName) {\n        // Update our component state\n        this.activeTab = tabName;\n\n        // Update the store safely\n        const store = Alpine.store('root');\n        if (store) {\n            store.activeTab = tabName;\n        }\n\n        localStorage.setItem('settingsActiveTab', tabName);\n\n        // Auto-scroll active tab into view after a short delay to ensure DOM updates\n        setTimeout(() => {\n            const activeTab = document.querySelector('.settings-tab.active');\n            if (activeTab) {\n                activeTab.scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'center' });\n            }\n\n            // When switching to the scheduler tab, initialize Flatpickr components\n            if (tabName === 'scheduler') {\n                console.log('Switching to scheduler tab, initializing Flatpickr');\n                const schedulerElement = document.querySelector('[x-data=\"schedulerSettings\"]');\n                if (schedulerElement) {\n                    const schedulerData = Alpine.$data(schedulerElement);\n                    if (schedulerData) {\n                        // Start polling\n                        if (typeof schedulerData.startPolling === 'function') {\n                            schedulerData.startPolling();\n                        }\n\n                        // Initialize Flatpickr if editing or creating\n                        if (typeof schedulerData.initFlatpickr === 'function') {\n                            // Check if we're creating or editing and initialize accordingly\n                            if (schedulerData.isCreating) {\n                                schedulerData.initFlatpickr('create');\n                            } else if (schedulerData.isEditing) {\n                                schedulerData.initFlatpickr('edit');\n                            }\n                        }\n\n                        // Force an immediate fetch\n                        if (typeof schedulerData.fetchTasks === 'function') {\n                            schedulerData.fetchTasks();\n                        }\n                    }\n                }\n            }\n            \n            // When switching to the tunnel tab, initialize tunnelSettings\n            if (tabName === 'tunnel') {\n                console.log('Switching to tunnel tab, initializing tunnelSettings');\n                const tunnelElement = document.querySelector('[x-data=\"tunnelSettings\"]');\n                if (tunnelElement) {\n                    const tunnelData = Alpine.$data(tunnelElement);\n                    if (tunnelData && typeof tunnelData.checkTunnelStatus === 'function') {\n                        // Check tunnel status\n                        tunnelData.checkTunnelStatus();\n                    }\n                }\n            }\n        }, 10);\n    },\n\n    async openModal() {\n        console.log('Settings modal opening');\n        const modalEl = document.getElementById('settingsModal');\n        const modalAD = Alpine.$data(modalEl);\n\n        // First, ensure the store is updated properly\n        const store = Alpine.store('root');\n        if (store) {\n            // Set isOpen first to ensure proper state\n            store.isOpen = true;\n        }\n\n        //get settings from backend\n        try {\n            const set = await sendJsonData(\"/settings_get\", null);\n\n            // First load the settings data without setting the active tab\n            const settings = {\n                \"title\": \"Settings\",\n                \"buttons\": [\n                    {\n                        \"id\": \"save\",\n                        \"title\": \"Save\",\n                        \"classes\": \"btn btn-ok\"\n                    },\n                    {\n                        \"id\": \"cancel\",\n                        \"title\": \"Cancel\",\n                        \"type\": \"secondary\",\n                        \"classes\": \"btn btn-cancel\"\n                    }\n                ],\n                \"sections\": set.settings.sections\n            }\n\n            // Update modal data\n            modalAD.isOpen = true;\n            modalAD.settings = settings;\n\n            // Now set the active tab after the modal is open\n            // This ensures Alpine reactivity works as expected\n            setTimeout(() => {\n                // Get stored tab or default to 'agent'\n                const savedTab = localStorage.getItem('settingsActiveTab') || 'agent';\n                console.log(`Setting initial tab to: ${savedTab}`);\n\n                // Directly set the active tab\n                modalAD.activeTab = savedTab;\n\n                // Also update the store\n                if (store) {\n                    store.activeTab = savedTab;\n                }\n\n                localStorage.setItem('settingsActiveTab', savedTab);\n\n                // Add a small delay *after* setting the tab to ensure scrolling works\n                setTimeout(() => {\n                    const activeTabElement = document.querySelector('.settings-tab.active');\n                    if (activeTabElement) {\n                        activeTabElement.scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'center' });\n                    }\n                    // Debug log\n                    const schedulerTab = document.querySelector('.settings-tab[title=\"Task Scheduler\"]');\n                    console.log(`Current active tab after direct set: ${modalAD.activeTab}`);\n                    console.log('Scheduler tab active after direct initialization?',\n                        schedulerTab && schedulerTab.classList.contains('active'));\n\n                    // Explicitly start polling if we're on the scheduler tab\n                    if (modalAD.activeTab === 'scheduler') {\n                        console.log('Settings opened directly to scheduler tab, initializing polling');\n                        const schedulerElement = document.querySelector('[x-data=\"schedulerSettings\"]');\n                        if (schedulerElement) {\n                            const schedulerData = Alpine.$data(schedulerElement);\n                            if (schedulerData && typeof schedulerData.startPolling === 'function') {\n                                schedulerData.startPolling();\n                                // Also force an immediate fetch\n                                if (typeof schedulerData.fetchTasks === 'function') {\n                                    schedulerData.fetchTasks();\n                                }\n                            }\n                        }\n                    }\n                }, 10); // Small delay just for scrolling\n\n            }, 5); // Keep a minimal delay for modal opening reactivity\n\n            // Add a watcher to disable the Save button when a task is being created or edited\n            const schedulerComponent = document.querySelector('[x-data=\"schedulerSettings\"]');\n            if (schedulerComponent) {\n                // Watch for changes to the scheduler's editing state\n                const checkSchedulerEditingState = () => {\n                    const schedulerData = Alpine.$data(schedulerComponent);\n                    if (schedulerData) {\n                        // If we're on the scheduler tab and creating/editing a task, disable the Save button\n                        const saveButton = document.querySelector('.modal-footer button.btn-ok');\n                        if (saveButton && modalAD.activeTab === 'scheduler' &&\n                            (schedulerData.isCreating || schedulerData.isEditing)) {\n                            saveButton.disabled = true;\n                            saveButton.classList.add('btn-disabled');\n                        } else if (saveButton) {\n                            saveButton.disabled = false;\n                            saveButton.classList.remove('btn-disabled');\n                        }\n                    }\n                };\n\n                // Add a mutation observer to detect changes in the scheduler component's state\n                const observer = new MutationObserver(checkSchedulerEditingState);\n                observer.observe(schedulerComponent, { attributes: true, subtree: true, childList: true });\n\n                // Also watch for tab changes to update button state\n                modalAD.$watch('activeTab', checkSchedulerEditingState);\n\n                // Initial check\n                setTimeout(checkSchedulerEditingState, 100);\n            }\n\n            return new Promise(resolve => {\n                this.resolvePromise = resolve;\n            });\n\n        } catch (e) {\n            window.toastFetchError(\"Error getting settings\", e)\n        }\n    },\n\n    async handleButton(buttonId) {\n        if (buttonId === 'save') {\n\n            const modalEl = document.getElementById('settingsModal');\n            const modalAD = Alpine.$data(modalEl);\n            try {\n                resp = await window.sendJsonData(\"/settings_set\", modalAD.settings);\n            } catch (e) {\n                window.toastFetchError(\"Error saving settings\", e)\n                return\n            }\n            document.dispatchEvent(new CustomEvent('settings-updated', { detail: resp.settings }));\n            this.resolvePromise({\n                status: 'saved',\n                data: resp.settings\n            });\n        } else if (buttonId === 'cancel') {\n            this.handleCancel();\n        }\n\n        // Stop scheduler polling if it's running\n        this.stopSchedulerPolling();\n\n        // First update our component state\n        this.isOpen = false;\n\n        // Then safely update the store\n        const store = Alpine.store('root');\n        if (store) {\n            // Use a slight delay to avoid reactivity issues\n            setTimeout(() => {\n                store.isOpen = false;\n            }, 10);\n        }\n    },\n\n    async handleCancel() {\n        this.resolvePromise({\n            status: 'cancelled',\n            data: null\n        });\n\n        // Stop scheduler polling if it's running\n        this.stopSchedulerPolling();\n\n        // First update our component state\n        this.isOpen = false;\n\n        // Then safely update the store\n        const store = Alpine.store('root');\n        if (store) {\n            // Use a slight delay to avoid reactivity issues\n            setTimeout(() => {\n                store.isOpen = false;\n            }, 10);\n        }\n    },\n\n    // Add a helper method to stop scheduler polling\n    stopSchedulerPolling() {\n        // Find the scheduler component and stop polling if it exists\n        const schedulerElement = document.querySelector('[x-data=\"schedulerSettings\"]');\n        if (schedulerElement) {\n            const schedulerData = Alpine.$data(schedulerElement);\n            if (schedulerData && typeof schedulerData.stopPolling === 'function') {\n                console.log('Stopping scheduler polling on modal close');\n                schedulerData.stopPolling();\n            }\n        }\n    },\n\n    async handleFieldButton(field) {\n        console.log(`Button clicked: ${field.id}`);\n\n        if (field.id === \"mcp_servers_config\") {\n            openModal(\"settings/mcp/client/mcp-servers.html\");\n        }\n    }\n};\n\n\n// function initSettingsModal() {\n\n//     window.openSettings = function () {\n//         proxy.openModal().then(result => {\n//             console.log(result);  // This will log the result when the modal is closed\n//         });\n//     }\n\n//     return proxy\n// }\n\n\n// document.addEventListener('alpine:init', () => {\n//     Alpine.store('settingsModal', initSettingsModal());\n// });\n\ndocument.addEventListener('alpine:init', function () {\n    // Initialize the root store first to ensure it exists before components try to access it\n    Alpine.store('root', {\n        activeTab: localStorage.getItem('settingsActiveTab') || 'agent',\n        isOpen: false,\n\n        toggleSettings() {\n            this.isOpen = !this.isOpen;\n        }\n    });\n\n    // Then initialize other Alpine components\n    Alpine.data('settingsModal', function () {\n        return {\n            settingsData: {},\n            filteredSections: [],\n            activeTab: 'agent',\n            isLoading: true,\n\n            async init() {\n                // Initialize with the store value\n                this.activeTab = Alpine.store('root').activeTab || 'agent';\n\n                // Watch store tab changes\n                this.$watch('$store.root.activeTab', (newTab) => {\n                    if (typeof newTab !== 'undefined') {\n                        this.activeTab = newTab;\n                        localStorage.setItem('settingsActiveTab', newTab);\n                        this.updateFilteredSections();\n                    }\n                });\n\n                // Load settings\n                await this.fetchSettings();\n                this.updateFilteredSections();\n            },\n\n            switchTab(tab) {\n                // Update our component state\n                this.activeTab = tab;\n\n                // Update the store safely\n                const store = Alpine.store('root');\n                if (store) {\n                    store.activeTab = tab;\n                }\n            },\n\n            async fetchSettings() {\n                try {\n                    this.isLoading = true;\n                    const response = await fetch('/api/settings_get', {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json'\n                        }\n                    });\n\n                    if (response.ok) {\n                        const data = await response.json();\n                        if (data && data.settings) {\n                            this.settingsData = data.settings;\n                        } else {\n                            console.error('Invalid settings data format');\n                        }\n                    } else {\n                        console.error('Failed to fetch settings:', response.statusText);\n                    }\n                } catch (error) {\n                    console.error('Error fetching settings:', error);\n                } finally {\n                    this.isLoading = false;\n                }\n            },\n\n            updateFilteredSections() {\n                // Filter sections based on active tab\n                if (this.activeTab === 'agent') {\n                    this.filteredSections = this.settingsData.sections?.filter(section =>\n                        section.group === 'agent'\n                    ) || [];\n                } else if (this.activeTab === 'external') {\n                    this.filteredSections = this.settingsData.sections?.filter(section =>\n                        section.group === 'external'\n                    ) || [];\n                } else if (this.activeTab === 'developer') {\n                    this.filteredSections = this.settingsData.sections?.filter(section =>\n                        section.group === 'developer'\n                    ) || [];\n                } else {\n                    // For any other tab, show nothing since those tabs have custom UI\n                    this.filteredSections = [];\n                }\n            },\n\n            async saveSettings() {\n                try {\n                    // First validate\n                    for (const section of this.settingsData.sections) {\n                        for (const field of section.fields) {\n                            if (field.required && (!field.value || field.value.trim() === '')) {\n                                showToast(`${field.title} in ${section.title} is required`, 'error');\n                                return;\n                            }\n                        }\n                    }\n\n                    // Prepare data\n                    const formData = {};\n                    for (const section of this.settingsData.sections) {\n                        for (const field of section.fields) {\n                            formData[field.id] = field.value;\n                        }\n                    }\n\n                    // Send request\n                    const response = await fetch('/api/settings_save', {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json'\n                        },\n                        body: JSON.stringify(formData)\n                    });\n\n                    if (response.ok) {\n                        showToast('Settings saved successfully', 'success');\n                        // Refresh settings\n                        await this.fetchSettings();\n                    } else {\n                        const errorData = await response.json();\n                        throw new Error(errorData.error || 'Failed to save settings');\n                    }\n                } catch (error) {\n                    console.error('Error saving settings:', error);\n                    showToast('Failed to save settings: ' + error.message, 'error');\n                }\n            },\n\n            // Handle special button field actions\n            handleFieldButton(field) {\n                if (field.action === 'test_connection') {\n                    this.testConnection(field);\n                } else if (field.action === 'reveal_token') {\n                    this.revealToken(field);\n                } else if (field.action === 'generate_token') {\n                    this.generateToken(field);\n                } else {\n                    console.warn('Unknown button action:', field.action);\n                }\n            },\n\n            // Test API connection\n            async testConnection(field) {\n                try {\n                    field.testResult = 'Testing...';\n                    field.testStatus = 'loading';\n\n                    // Find the API key field\n                    let apiKey = '';\n                    for (const section of this.settingsData.sections) {\n                        for (const f of section.fields) {\n                            if (f.id === field.target) {\n                                apiKey = f.value;\n                                break;\n                            }\n                        }\n                    }\n\n                    if (!apiKey) {\n                        throw new Error('API key is required');\n                    }\n\n                    // Send test request\n                    const response = await fetch('/api/test_connection', {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json'\n                        },\n                        body: JSON.stringify({\n                            service: field.service,\n                            api_key: apiKey\n                        })\n                    });\n\n                    const data = await response.json();\n\n                    if (response.ok && data.success) {\n                        field.testResult = 'Connection successful!';\n                        field.testStatus = 'success';\n                    } else {\n                        throw new Error(data.error || 'Connection failed');\n                    }\n                } catch (error) {\n                    console.error('Connection test failed:', error);\n                    field.testResult = `Failed: ${error.message}`;\n                    field.testStatus = 'error';\n                }\n            },\n\n            // Reveal token temporarily\n            revealToken(field) {\n                // Find target field\n                for (const section of this.settingsData.sections) {\n                    for (const f of section.fields) {\n                        if (f.id === field.target) {\n                            // Toggle field type\n                            f.type = f.type === 'password' ? 'text' : 'password';\n\n                            // Update button text\n                            field.value = f.type === 'password' ? 'Show' : 'Hide';\n\n                            break;\n                        }\n                    }\n                }\n            },\n\n            // Generate random token\n            generateToken(field) {\n                // Find target field\n                for (const section of this.settingsData.sections) {\n                    for (const f of section.fields) {\n                        if (f.id === field.target) {\n                            // Generate random token\n                            const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n                            let token = '';\n                            for (let i = 0; i < 32; i++) {\n                                token += chars.charAt(Math.floor(Math.random() * chars.length));\n                            }\n\n                            // Set field value\n                            f.value = token;\n                            break;\n                        }\n                    }\n                }\n            },\n\n            closeModal() {\n                // Stop scheduler polling before closing the modal\n                const schedulerElement = document.querySelector('[x-data=\"schedulerSettings\"]');\n                if (schedulerElement) {\n                    const schedulerData = Alpine.$data(schedulerElement);\n                    if (schedulerData && typeof schedulerData.stopPolling === 'function') {\n                        console.log('Stopping scheduler polling on modal close');\n                        schedulerData.stopPolling();\n                    }\n                }\n\n                this.$store.root.isOpen = false;\n            }\n        };\n    });\n});\n\n// Show toast notification\nfunction showToast(message, type = 'info') {\n    const toast = document.createElement('div');\n    toast.className = `toast toast-${type}`;\n    toast.textContent = message;\n\n    document.body.appendChild(toast);\n\n    // Trigger animation\n    setTimeout(() => {\n        toast.classList.add('show');\n    }, 10);\n\n    // Remove after delay\n    setTimeout(() => {\n        toast.classList.remove('show');\n        setTimeout(() => {\n            document.body.removeChild(toast);\n        }, 300);\n    }, 3000);\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/zero/webui/js/sleep.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/zero/webui/js/speech.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":46,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":46,"endColumn":22,"suggestions":[{"fix":{"range":[1370,1426],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'options' is assigned a value but never used.","line":51,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":51,"endColumn":40,"suggestions":[{"messageId":"removeVar","data":{"varName":"options"},"fix":{"range":[1490,1504],"text":""},"desc":"Remove unused variable 'options'."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":81,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":81,"endColumn":20,"suggestions":[{"fix":{"range":[2303,2371],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":139,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":139,"endColumn":24,"suggestions":[{"fix":{"range":[4179,4209],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"compat/compat","severity":2,"message":"MediaRecorder is not supported in Safari 14","line":178,"column":34,"nodeType":"NewExpression","endLine":178,"endColumn":59},{"ruleId":"no-undef","severity":2,"message":"'MediaRecorder' is not defined.","line":178,"column":38,"nodeType":"Identifier","messageId":"undef","endLine":178,"endColumn":51},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":187,"column":21,"nodeType":"MemberExpression","messageId":"unexpected","endLine":187,"endColumn":32,"suggestions":[{"fix":{"range":[5717,5793],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":198,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":198,"endColumn":26,"suggestions":[{"fix":{"range":[6065,6122],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-undef","severity":2,"message":"'toast' is not defined.","line":199,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":199,"endColumn":18},{"ruleId":"compat/compat","severity":2,"message":"AudioContext is not supported in Safari 14","line":205,"column":34,"nodeType":"MemberExpression","endLine":205,"endColumn":53},{"ruleId":"no-undef","severity":2,"message":"'requestAnimationFrame' is not defined.","line":252,"column":34,"nodeType":"Identifier","messageId":"undef","endLine":252,"endColumn":55},{"ruleId":"no-undef","severity":2,"message":"'requestAnimationFrame' is not defined.","line":255,"column":30,"nodeType":"Identifier","messageId":"undef","endLine":255,"endColumn":51},{"ruleId":"no-undef","severity":2,"message":"'cancelAnimationFrame' is not defined.","line":260,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":260,"endColumn":33},{"ruleId":"no-undef","severity":2,"message":"'Blob' is not defined.","line":271,"column":31,"nodeType":"Identifier","messageId":"undef","endLine":271,"endColumn":35},{"ruleId":"no-undef","severity":2,"message":"'sendJsonData' is not defined.","line":276,"column":34,"nodeType":"Identifier","messageId":"undef","endLine":276,"endColumn":46},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":282,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":282,"endColumn":28,"suggestions":[{"fix":{"range":[9047,9090],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":287,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":287,"endColumn":26,"suggestions":[{"fix":{"range":[9270,9315],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-undef","severity":2,"message":"'FileReader' is not defined.","line":296,"column":32,"nodeType":"Identifier","messageId":"undef","endLine":296,"endColumn":42},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":323,"column":14,"nodeType":"MemberExpression","messageId":"unexpected","endLine":323,"endColumn":25},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":382,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":382,"endColumn":30,"suggestions":[{"fix":{"range":[12553,12612],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":401,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":401,"endColumn":22,"suggestions":[{"fix":{"range":[13173,13223],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-undef","severity":2,"message":"'toast' is not defined.","line":402,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":402,"endColumn":14},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":422,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":422,"endColumn":20,"suggestions":[{"fix":{"range":[13760,13791],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-undef","severity":2,"message":"'SpeechSynthesisUtterance' is not defined.","line":430,"column":30,"nodeType":"Identifier","messageId":"undef","endLine":430,"endColumn":54},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\/.","line":437,"column":64,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":437,"endColumn":65,"suggestions":[{"messageId":"removeEscape","fix":{"range":[14255,14256],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[14255,14255],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\/.","line":437,"column":91,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":437,"endColumn":92,"suggestions":[{"messageId":"removeEscape","fix":{"range":[14282,14283],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[14282,14282],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\/.","line":437,"column":123,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":437,"endColumn":124,"suggestions":[{"messageId":"removeEscape","fix":{"range":[14314,14315],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[14314,14314],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\/.","line":437,"column":150,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":437,"endColumn":151,"suggestions":[{"messageId":"removeEscape","fix":{"range":[14341,14342],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[14341,14341],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\/.","line":437,"column":175,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":437,"endColumn":176,"suggestions":[{"messageId":"removeEscape","fix":{"range":[14366,14367],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[14366,14366],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\/.","line":437,"column":217,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":437,"endColumn":218,"suggestions":[{"messageId":"removeEscape","fix":{"range":[14408,14409],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[14408,14408],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'match' is defined but never used.","line":462,"column":44,"nodeType":"Identifier","messageId":"unusedVar","endLine":462,"endColumn":49,"suggestions":[{"messageId":"removeVar","data":{"varName":"match"},"fix":{"range":[15323,15328],"text":""},"desc":"Remove unused variable 'match'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'match' is defined but never used.","line":466,"column":47,"nodeType":"Identifier","messageId":"unusedVar","endLine":466,"endColumn":52,"suggestions":[{"messageId":"removeVar","data":{"varName":"match"},"fix":{"range":[15460,15465],"text":""},"desc":"Remove unused variable 'match'."}]}],"suppressedMessages":[],"errorCount":21,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// import { pipeline, read_audio } from '../transformers@3.0.2.js';\nimport { updateChatInput, sendMessage } from '../index.js';\n\nconst microphoneButton = document.getElementById('microphone-button');\nlet microphoneInput = null;\nlet isProcessingClick = false;\n\nconst Status = {\n    INACTIVE: 'inactive',\n    ACTIVATING: 'activating',\n    LISTENING: 'listening',\n    RECORDING: 'recording',\n    WAITING: 'waiting',\n    PROCESSING: 'processing'\n};\n\nconst micSettings = {\n    stt_model_size: 'tiny',\n    stt_language: 'en',\n    stt_silence_threshold: 0.05,\n    stt_silence_duration: 1000,\n    stt_waiting_timeout: 2000,\n};\nwindow.micSettings = micSettings\nloadMicSettings()\n\nfunction densify(x) {\n    return Math.exp(-5 * (1 - x));\n}\n\nasync function loadMicSettings() {\n    try {\n        const response = await fetch('/settings_get');\n        const data = await response.json();\n        const sttSettings = data.settings.sections.find(s => s.title === 'Speech to Text');\n\n        if (sttSettings) {\n            // Update options from server settings\n            sttSettings.fields.forEach(field => {\n                const key = field.id //.split('.')[1]; // speech_to_text.model_size -> model_size\n                micSettings[key] = field.value;\n            });\n        }\n    } catch (error) {\n        window.toastFetchError(\"Failed to load speech settings\", error)\n        console.error('Failed to load speech settings:', error);\n    }\n}\n\nclass MicrophoneInput {\n    constructor(updateCallback, options = {}) {\n        this.mediaRecorder = null;\n        this.audioChunks = [];\n        this.lastChunk = [];\n        this.updateCallback = updateCallback;\n        this.messageSent = false;\n\n        // Audio analysis properties\n        this.audioContext = null;\n        this.mediaStreamSource = null;\n        this.analyserNode = null;\n        this._status = Status.INACTIVE;\n\n        // Timing properties\n        this.lastAudioTime = null;\n        this.waitingTimer = null;\n        this.silenceStartTime = null;\n        this.hasStartedRecording = false;\n        this.analysisFrame = null;\n    }\n\n    get status() {\n        return this._status;\n    }\n\n    set status(newStatus) {\n        if (this._status === newStatus) return;\n\n        const oldStatus = this._status;\n        this._status = newStatus;\n        console.log(`Mic status changed from ${oldStatus} to ${newStatus}`);\n\n        // Update UI\n        microphoneButton.classList.remove(`mic-${oldStatus.toLowerCase()}`);\n        microphoneButton.classList.add(`mic-${newStatus.toLowerCase()}`);\n        microphoneButton.setAttribute('data-status', newStatus);\n\n        // Handle state-specific behaviors\n        this.handleStatusChange(oldStatus, newStatus);\n    }\n\n    handleStatusChange(oldStatus, newStatus) {\n\n        //last chunk kept only for transition to recording status\n        if (newStatus != Status.RECORDING) { this.lastChunk = null; }\n\n        switch (newStatus) {\n            case Status.INACTIVE:\n                this.handleInactiveState();\n                break;\n            case Status.LISTENING:\n                this.handleListeningState();\n                break;\n            case Status.RECORDING:\n                this.handleRecordingState();\n                break;\n            case Status.WAITING:\n                this.handleWaitingState();\n                break;\n            case Status.PROCESSING:\n                this.handleProcessingState();\n                break;\n        }\n    }\n\n    handleInactiveState() {\n        this.stopRecording();\n        this.stopAudioAnalysis();\n        if (this.waitingTimer) {\n            clearTimeout(this.waitingTimer);\n            this.waitingTimer = null;\n        }\n    }\n\n    handleListeningState() {\n        this.stopRecording();\n        this.audioChunks = [];\n        this.hasStartedRecording = false;\n        this.silenceStartTime = null;\n        this.lastAudioTime = null;\n        this.messageSent = false;\n        this.startAudioAnalysis();\n    }\n\n    handleRecordingState() {\n        if (!this.hasStartedRecording && this.mediaRecorder.state !== 'recording') {\n            this.hasStartedRecording = true;\n            this.mediaRecorder.start(1000);\n            console.log('Speech started');\n        }\n        if (this.waitingTimer) {\n            clearTimeout(this.waitingTimer);\n            this.waitingTimer = null;\n        }\n    }\n\n    handleWaitingState() {\n        // Don't stop recording during waiting state\n        this.waitingTimer = setTimeout(() => {\n            if (this.status === Status.WAITING) {\n                this.status = Status.PROCESSING;\n            }\n        }, micSettings.stt_waiting_timeout);\n    }\n\n    handleProcessingState() {\n        this.stopRecording();\n        this.process();\n    }\n\n    stopRecording() {\n        if (this.mediaRecorder?.state === 'recording') {\n            this.mediaRecorder.stop();\n            this.hasStartedRecording = false;\n        }\n    }\n\n    async initialize() {\n        try {\n            const stream = await navigator.mediaDevices.getUserMedia({\n                audio: {\n                    echoCancellation: true,\n                    noiseSuppression: true,\n                    channelCount: 1\n                }\n            });\n\n            this.mediaRecorder = new MediaRecorder(stream);\n            this.mediaRecorder.ondataavailable = (event) => {\n                if (event.data.size > 0 &&\n                    (this.status === Status.RECORDING || this.status === Status.WAITING)) {\n                    if (this.lastChunk) {\n                        this.audioChunks.push(this.lastChunk);\n                        this.lastChunk = null;\n                    }\n                    this.audioChunks.push(event.data);\n                    console.log('Audio chunk received, total chunks:', this.audioChunks.length);\n                }\n                else if (this.status === Status.LISTENING) {\n                    this.lastChunk = event.data;\n                }\n            };\n\n            this.setupAudioAnalysis(stream);\n            return true;\n        } catch (error) {\n\n            console.error('Microphone initialization error:', error);\n            toast('Failed to access microphone. Please check permissions.', 'error');\n            return false;\n        }\n    }\n\n    setupAudioAnalysis(stream) {\n        this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n        this.mediaStreamSource = this.audioContext.createMediaStreamSource(stream);\n        this.analyserNode = this.audioContext.createAnalyser();\n        this.analyserNode.fftSize = 2048;\n        this.analyserNode.minDecibels = -90;\n        this.analyserNode.maxDecibels = -10;\n        this.analyserNode.smoothingTimeConstant = 0.85;\n        this.mediaStreamSource.connect(this.analyserNode);\n    }\n\n    startAudioAnalysis() {\n        const analyzeFrame = () => {\n            if (this.status === Status.INACTIVE) return;\n\n            const dataArray = new Uint8Array(this.analyserNode.fftSize);\n            this.analyserNode.getByteTimeDomainData(dataArray);\n\n            // Calculate RMS volume\n            let sum = 0;\n            for (let i = 0; i < dataArray.length; i++) {\n                const amplitude = (dataArray[i] - 128) / 128;\n                sum += amplitude * amplitude;\n            }\n            const rms = Math.sqrt(sum / dataArray.length);\n\n            const now = Date.now();\n\n            // Update status based on audio level\n            if (rms > densify(micSettings.stt_silence_threshold)) {\n                this.lastAudioTime = now;\n                this.silenceStartTime = null;\n\n                if (this.status === Status.LISTENING || this.status === Status.WAITING) {\n                    if (!speech.isSpeaking()) // TODO? a better way to ignore agent's voice?\n                        this.status = Status.RECORDING;\n                }\n            } else if (this.status === Status.RECORDING) {\n                if (!this.silenceStartTime) {\n                    this.silenceStartTime = now;\n                }\n\n                const silenceDuration = now - this.silenceStartTime;\n                if (silenceDuration >= micSettings.stt_silence_duration) {\n                    this.status = Status.WAITING;\n                }\n            }\n\n            this.analysisFrame = requestAnimationFrame(analyzeFrame);\n        };\n\n        this.analysisFrame = requestAnimationFrame(analyzeFrame);\n    }\n\n    stopAudioAnalysis() {\n        if (this.analysisFrame) {\n            cancelAnimationFrame(this.analysisFrame);\n            this.analysisFrame = null;\n        }\n    }\n\n    async process() {\n        if (this.audioChunks.length === 0) {\n            this.status = Status.LISTENING;\n            return;\n        }\n\n        const audioBlob = new Blob(this.audioChunks, { type: 'audio/wav' });\n        const base64 = await this.convertBlobToBase64Wav(audioBlob)\n\n        try {\n\n            const result = await sendJsonData('/transcribe', { audio: base64 })\n\n\n            const text = this.filterResult(result.text || \"\")\n\n            if (text) {\n                console.log('Transcription:', result.text);\n                await this.updateCallback(result.text, true);\n            }\n        } catch (error) {\n            window.toastFetchError(\"Transcription error\", error)\n            console.error('Transcription error:', error);\n        } finally {\n            this.audioChunks = [];\n            this.status = Status.LISTENING;\n        }\n    }\n\n    convertBlobToBase64Wav(audioBlob) {\n        return new Promise((resolve, reject) => {\n            const reader = new FileReader();\n\n            // Read the Blob as a Data URL\n            reader.onloadend = () => {\n                const base64Data = reader.result.split(\",\")[1]; // Extract Base64 data\n                resolve(base64Data);\n            };\n\n            reader.onerror = (error) => {\n                reject(error);\n            };\n\n            reader.readAsDataURL(audioBlob); // Start reading the Blob\n        });\n    }\n\n    filterResult(text) {\n        text = text.trim()\n        let ok = false\n        while (!ok) {\n            if (!text) break\n            if (text[0] === '{' && text[text.length - 1] === '}') break\n            if (text[0] === '(' && text[text.length - 1] === ')') break\n            if (text[0] === '[' && text[text.length - 1] === ']') break\n            ok = true\n        }\n        if (ok) return text\n        else console.log(`Discarding transcription: ${text}`)\n    }\n}\n\n\n\n// Initialize and handle click events\nasync function initializeMicrophoneInput() {\n    window.microphoneInput = microphoneInput = new MicrophoneInput(\n        async (text, isFinal) => {\n            if (isFinal) {\n                updateChatInput(text);\n                if (!microphoneInput.messageSent) {\n                    microphoneInput.messageSent = true;\n                    await sendMessage();\n                }\n            }\n        }\n    );\n    microphoneInput.status = Status.ACTIVATING;\n\n    return await microphoneInput.initialize();\n}\n\n// Wait for the DOM to be fully loaded before adding event listeners\ndocument.addEventListener('DOMContentLoaded', () => {\n    const microphoneButton = document.getElementById('microphone-button');\n    if (microphoneButton) {\n        microphoneButton.addEventListener('click', async () => {\n            if (isProcessingClick) return;\n            isProcessingClick = true;\n\n            const hasPermission = await requestMicrophonePermission();\n            if (!hasPermission) {\n                isProcessingClick = false;\n                return;\n            }\n\n            try {\n                if (!microphoneInput && !await initializeMicrophoneInput()) {\n                    isProcessingClick = false;\n                    return;\n                }\n\n                // Simply toggle between INACTIVE and LISTENING states\n                microphoneInput.status =\n                    (microphoneInput.status === Status.INACTIVE || microphoneInput.status === Status.ACTIVATING) ? Status.LISTENING : Status.INACTIVE;\n\n                // Update UI based on the new status\n                if (microphoneInput.status === Status.LISTENING) {\n                    // Start listening\n                    microphoneButton.classList.add('listening');\n                    await microphoneInput.startAudioAnalysis();\n                } else {\n                    // Stop listening\n                    microphoneButton.classList.remove('listening');\n                    await microphoneInput.stopAudioAnalysis();\n                }\n            } catch (error) {\n                console.error('Error in microphone click handler:', error);\n                // Reset microphone state on error\n                if (microphoneInput) {\n                    microphoneInput.status = Status.INACTIVE;\n                    microphoneButton.classList.remove('listening');\n                }\n            } finally {\n                isProcessingClick = false;\n            }\n        });\n    }\n});\n\n// Some error handling for microphone input\nasync function requestMicrophonePermission() {\n    try {\n        await navigator.mediaDevices.getUserMedia({ audio: true });\n        return true;\n    } catch (err) {\n        console.error('Error accessing microphone:', err);\n        toast('Microphone access denied. Please enable microphone access in your browser settings.', 'error');\n        return false;\n    }\n}\n\n\nclass Speech {\n    constructor() {\n        this.synth = window.speechSynthesis;\n        this.utterance = null;\n    }\n\n    stripEmojis(str) {\n        return str\n            .replace(/([\\u2700-\\u27BF]|[\\uE000-\\uF8FF]|\\uD83C[\\uDC00-\\uDFFF]|\\uD83D[\\uDC00-\\uDFFF]|[\\u2011-\\u26FF]|\\uD83E[\\uDD10-\\uDDFF])/g, '')\n            .replace(/\\s+/g, ' ')\n            .trim();\n    }\n\n    speak(text) {\n        console.log('Speaking:', text);\n        // Stop any current utterance\n        this.stop();\n\n        // Remove emojis and create a new utterance\n        text = this.stripEmojis(text);\n        text = this.replaceURLs(text);\n        text = this.replaceGuids(text);\n        this.utterance = new SpeechSynthesisUtterance(text);\n\n        // Speak the new utterance\n        this.synth.speak(this.utterance);\n    }\n\n    replaceURLs(text) {\n        const urlRegex = /(\\b(https?|ftp|file):\\/\\/[-A-Z0-9+&@#\\/%?=~_|!:,.;]*[-A-Z0-9+&@#\\/%=~_|])|(\\b(www\\.)[-A-Z0-9+&@#\\/%?=~_|!:,.;]*[-A-Z0-9+&@#\\/%=~_|])|(\\b[-A-Z0-9+&@#\\/%?=~_|!:,.;]*\\.(?:[A-Z]{2,})[-A-Z0-9+&@#\\/%?=~_|])/ig; return text.replace(urlRegex, (url) => {\n            let text = url\n            // if contains ://, split by it\n            if (text.includes('://')) text = text.split('://')[1];\n            // if contains /, split by it\n            if (text.includes('/')) text = text.split('/')[0];\n\n            // if contains ., split by it\n            if (text.includes('.')) {\n                const doms = text.split('.')\n                //up to last two\n                return doms[doms.length - 2] + '.' + doms[doms.length - 1]\n            } else {\n                return text\n            }\n        });\n    }\n\n    replaceGuids(text) {\n        const guidRegex = /[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/g;\n        return text.replace(guidRegex, '');\n    }\n\n    replaceNonText(text) {\n        const nonTextRegex = /\\w[^\\w\\s]*\\w(?=\\s|$)|[^\\w\\s]+/g;\n        text = text.replace(nonTextRegex, (match) => {\n            return ``;\n        });\n        const longStringRegex = /\\S{25,}/g;\n        text = text.replace(longStringRegex, (match) => {\n            return ``;\n        });\n        return text\n    }\n\n    stop() {\n        if (this.isSpeaking()) {\n            this.synth.cancel();\n        }\n    }\n\n    isSpeaking() {\n        return this.synth?.speaking || false;\n    }\n}\n\nexport const speech = new Speech();\nwindow.speech = speech\n\n// Add event listener for settings changes\ndocument.addEventListener('settings-updated', loadMicSettings);","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/zero/webui/js/speech_browser.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":58,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":58,"endColumn":20,"suggestions":[{"fix":{"range":[1569,1637],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":116,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":116,"endColumn":24,"suggestions":[{"fix":{"range":[3445,3475],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"compat/compat","severity":2,"message":"MediaRecorder is not supported in Safari 14","line":160,"column":34,"nodeType":"NewExpression","endLine":160,"endColumn":59},{"ruleId":"no-undef","severity":2,"message":"'MediaRecorder' is not defined.","line":160,"column":38,"nodeType":"Identifier","messageId":"undef","endLine":160,"endColumn":51},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":169,"column":21,"nodeType":"MemberExpression","messageId":"unexpected","endLine":169,"endColumn":32,"suggestions":[{"fix":{"range":[5174,5250],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":180,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":180,"endColumn":26,"suggestions":[{"fix":{"range":[5522,5579],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-undef","severity":2,"message":"'toast' is not defined.","line":181,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":181,"endColumn":18},{"ruleId":"compat/compat","severity":2,"message":"AudioContext is not supported in Safari 14","line":187,"column":34,"nodeType":"MemberExpression","endLine":187,"endColumn":53},{"ruleId":"no-undef","severity":2,"message":"'requestAnimationFrame' is not defined.","line":235,"column":34,"nodeType":"Identifier","messageId":"undef","endLine":235,"endColumn":55},{"ruleId":"no-undef","severity":2,"message":"'requestAnimationFrame' is not defined.","line":238,"column":30,"nodeType":"Identifier","messageId":"undef","endLine":238,"endColumn":51},{"ruleId":"no-undef","severity":2,"message":"'cancelAnimationFrame' is not defined.","line":243,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":243,"endColumn":33},{"ruleId":"no-undef","severity":2,"message":"'Blob' is not defined.","line":254,"column":31,"nodeType":"Identifier","messageId":"undef","endLine":254,"endColumn":35},{"ruleId":"no-undef","severity":2,"message":"'URL' is not defined.","line":255,"column":26,"nodeType":"Identifier","messageId":"undef","endLine":255,"endColumn":29},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":266,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":266,"endColumn":28,"suggestions":[{"fix":{"range":[8582,8625],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":270,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":270,"endColumn":26,"suggestions":[{"fix":{"range":[8740,8785],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-undef","severity":2,"message":"'toast' is not defined.","line":271,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":271,"endColumn":18},{"ruleId":"no-undef","severity":2,"message":"'URL' is not defined.","line":273,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":273,"endColumn":16},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":290,"column":14,"nodeType":"MemberExpression","messageId":"unexpected","endLine":290,"endColumn":25},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":349,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":349,"endColumn":22,"suggestions":[{"fix":{"range":[11078,11128],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-undef","severity":2,"message":"'toast' is not defined.","line":350,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":350,"endColumn":14},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":370,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":370,"endColumn":20,"suggestions":[{"fix":{"range":[11665,11696],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-undef","severity":2,"message":"'SpeechSynthesisUtterance' is not defined.","line":376,"column":30,"nodeType":"Identifier","messageId":"undef","endLine":376,"endColumn":54}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { pipeline, read_audio } from './transformers@3.0.2.js';\nimport { updateChatInput, sendMessage } from '../index.js';\n\nconst microphoneButton = document.getElementById('microphone-button');\nlet microphoneInput = null;\nlet isProcessingClick = false;\n\nconst Status = {\n    INACTIVE: 'inactive',\n    ACTIVATING: 'activating',\n    LISTENING: 'listening',\n    RECORDING: 'recording',\n    WAITING: 'waiting',\n    PROCESSING: 'processing'\n};\n\nclass MicrophoneInput {\n    constructor(updateCallback, options = {}) {\n        this.mediaRecorder = null;\n        this.audioChunks = [];\n        this.lastChunk = [];\n        this.updateCallback = updateCallback;\n        this.messageSent = false;\n\n        // Audio analysis properties\n        this.audioContext = null;\n        this.mediaStreamSource = null;\n        this.analyserNode = null;\n        this._status = Status.INACTIVE;\n\n        // Timing properties\n        this.lastAudioTime = null;\n        this.waitingTimer = null;\n        this.silenceStartTime = null;\n        this.hasStartedRecording = false;\n        this.analysisFrame = null;\n\n        this.options = {\n            modelSize: 'tiny',\n            language: 'en',\n            silenceThreshold: 0.15,\n            silenceDuration: 1000,\n            waitingTimeout: 2000,\n            minSpeechDuration: 500,\n            ...options\n        };\n    }\n\n    get status() {\n        return this._status;\n    }\n\n    set status(newStatus) {\n        if (this._status === newStatus) return;\n\n        const oldStatus = this._status;\n        this._status = newStatus;\n        console.log(`Mic status changed from ${oldStatus} to ${newStatus}`);\n\n        // Update UI\n        microphoneButton.classList.remove(`mic-${oldStatus.toLowerCase()}`);\n        microphoneButton.classList.add(`mic-${newStatus.toLowerCase()}`);\n        microphoneButton.setAttribute('data-status', newStatus);\n\n        // Handle state-specific behaviors\n        this.handleStatusChange(oldStatus, newStatus);\n    }\n\n    handleStatusChange(oldStatus, newStatus) {\n\n        //last chunk kept only for transition to recording status\n        if (newStatus != Status.RECORDING) { this.lastChunk = null; }\n\n        switch (newStatus) {\n            case Status.INACTIVE:\n                this.handleInactiveState();\n                break;\n            case Status.LISTENING:\n                this.handleListeningState();\n                break;\n            case Status.RECORDING:\n                this.handleRecordingState();\n                break;\n            case Status.WAITING:\n                this.handleWaitingState();\n                break;\n            case Status.PROCESSING:\n                this.handleProcessingState();\n                break;\n        }\n    }\n\n    handleInactiveState() {\n        this.stopRecording();\n        this.stopAudioAnalysis();\n        if (this.waitingTimer) {\n            clearTimeout(this.waitingTimer);\n            this.waitingTimer = null;\n        }\n    }\n\n    handleListeningState() {\n        this.stopRecording();\n        this.audioChunks = [];\n        this.hasStartedRecording = false;\n        this.silenceStartTime = null;\n        this.lastAudioTime = null;\n        this.messageSent = false;\n        this.startAudioAnalysis();\n    }\n\n    handleRecordingState() {\n        if (!this.hasStartedRecording && this.mediaRecorder.state !== 'recording') {\n            this.hasStartedRecording = true;\n            this.mediaRecorder.start(1000);\n            console.log('Speech started');\n        }\n        if (this.waitingTimer) {\n            clearTimeout(this.waitingTimer);\n            this.waitingTimer = null;\n        }\n    }\n\n    handleWaitingState() {\n        // Don't stop recording during waiting state\n        this.waitingTimer = setTimeout(() => {\n            if (this.status === Status.WAITING) {\n                this.status = Status.PROCESSING;\n            }\n        }, this.options.waitingTimeout);\n    }\n\n    handleProcessingState() {\n        this.stopRecording();\n        this.process();\n    }\n\n    stopRecording() {\n        if (this.mediaRecorder?.state === 'recording') {\n            this.mediaRecorder.stop();\n            this.hasStartedRecording = false;\n        }\n    }\n\n    async initialize() {\n        try {\n            this.transcriber = await pipeline(\n                'automatic-speech-recognition',\n                `Xenova/whisper-${this.options.modelSize}.${this.options.language}`\n            );\n\n            const stream = await navigator.mediaDevices.getUserMedia({\n                audio: {\n                    echoCancellation: true,\n                    noiseSuppression: true,\n                    channelCount: 1\n                }\n            });\n\n            this.mediaRecorder = new MediaRecorder(stream);\n            this.mediaRecorder.ondataavailable = (event) => {\n                if (event.data.size > 0 &&\n                    (this.status === Status.RECORDING || this.status === Status.WAITING)) {\n                    if (this.lastChunk) {\n                        this.audioChunks.push(this.lastChunk);\n                        this.lastChunk = null;\n                    }\n                    this.audioChunks.push(event.data);\n                    console.log('Audio chunk received, total chunks:', this.audioChunks.length);\n                }\n                else if (this.status === Status.LISTENING) {\n                    this.lastChunk = event.data;\n                }\n            };\n\n            this.setupAudioAnalysis(stream);\n            return true;\n        } catch (error) {\n\n            console.error('Microphone initialization error:', error);\n            toast('Failed to access microphone. Please check permissions.', 'error');\n            return false;\n        }\n    }\n\n    setupAudioAnalysis(stream) {\n        this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n        this.mediaStreamSource = this.audioContext.createMediaStreamSource(stream);\n        this.analyserNode = this.audioContext.createAnalyser();\n        this.analyserNode.fftSize = 2048;\n        this.analyserNode.minDecibels = -90;\n        this.analyserNode.maxDecibels = -10;\n        this.analyserNode.smoothingTimeConstant = 0.85;\n        this.mediaStreamSource.connect(this.analyserNode);\n    }\n    \n\n    startAudioAnalysis() {\n        const analyzeFrame = () => {\n            if (this.status === Status.INACTIVE) return;\n\n            const dataArray = new Uint8Array(this.analyserNode.fftSize);\n            this.analyserNode.getByteTimeDomainData(dataArray);\n\n            // Calculate RMS volume\n            let sum = 0;\n            for (let i = 0; i < dataArray.length; i++) {\n                const amplitude = (dataArray[i] - 128) / 128;\n                sum += amplitude * amplitude;\n            }\n            const rms = Math.sqrt(sum / dataArray.length);\n\n            const now = Date.now();\n\n            // Update status based on audio level\n            if (rms > this.options.silenceThreshold) {\n                this.lastAudioTime = now;\n                this.silenceStartTime = null;\n\n                if (this.status === Status.LISTENING || this.status === Status.WAITING) {\n                    if (!speech.isSpeaking()) // TODO? a better way to ignore agent's voice?\n                        this.status = Status.RECORDING;\n                }\n            } else if (this.status === Status.RECORDING) {\n                if (!this.silenceStartTime) {\n                    this.silenceStartTime = now;\n                }\n\n                const silenceDuration = now - this.silenceStartTime;\n                if (silenceDuration >= this.options.silenceDuration) {\n                    this.status = Status.WAITING;\n                }\n            }\n\n            this.analysisFrame = requestAnimationFrame(analyzeFrame);\n        };\n\n        this.analysisFrame = requestAnimationFrame(analyzeFrame);\n    }\n\n    stopAudioAnalysis() {\n        if (this.analysisFrame) {\n            cancelAnimationFrame(this.analysisFrame);\n            this.analysisFrame = null;\n        }\n    }\n\n    async process() {\n        if (this.audioChunks.length === 0) {\n            this.status = Status.LISTENING;\n            return;\n        }\n\n        const audioBlob = new Blob(this.audioChunks, { type: 'audio/wav' });        \n        const audioUrl = URL.createObjectURL(audioBlob);\n\n\n\n        try {\n            const samplingRate = 16000;\n            const audioData = await read_audio(audioUrl, samplingRate);\n            const result = await this.transcriber(audioData);\n            const text = this.filterResult(result.text || \"\")\n\n            if (text) {\n                console.log('Transcription:', result.text);\n                await this.updateCallback(result.text, true);\n            }\n        } catch (error) {\n            console.error('Transcription error:', error);\n            toast('Transcription failed.', 'error');\n        } finally {\n            URL.revokeObjectURL(audioUrl);\n            this.audioChunks = [];\n            this.status = Status.LISTENING;\n        }\n    }\n\n    filterResult(text) {\n        text = text.trim()\n        let ok = false\n        while (!ok) {\n            if (!text) break\n            if (text[0] === '{' && text[text.length - 1] === '}') break\n            if (text[0] === '(' && text[text.length - 1] === ')') break\n            if (text[0] === '[' && text[text.length - 1] === ']') break\n            ok = true\n        }\n        if (ok) return text\n        else console.log(`Discarding transcription: ${text}`)\n    }\n}\n\n\n\n// Initialize and handle click events\nasync function initializeMicrophoneInput() {\n    microphoneInput = new MicrophoneInput(\n        async (text, isFinal) => {\n            if (isFinal) {\n                updateChatInput(text);\n                if (!microphoneInput.messageSent) {\n                    microphoneInput.messageSent = true;\n                    await sendMessage();\n                }\n            }\n        },\n        {\n            modelSize: 'tiny',\n            language: 'en',\n            silenceThreshold: 0.07,\n            silenceDuration: 1000,\n            waitingTimeout: 1500\n        }\n    );\n    microphoneInput.status = Status.ACTIVATING;\n\n    return await microphoneInput.initialize();\n}\n\nmicrophoneButton.addEventListener('click', async () => {\n    if (isProcessingClick) return;\n    isProcessingClick = true;\n\n    const hasPermission = await requestMicrophonePermission();\n    if (!hasPermission) return;\n\n    try {\n        if (!microphoneInput && !await initializeMicrophoneInput()) {\n            return;\n        }\n\n        // Simply toggle between INACTIVE and LISTENING states\n        microphoneInput.status =\n            (microphoneInput.status === Status.INACTIVE || microphoneInput.status === Status.ACTIVATING) ? Status.LISTENING : Status.INACTIVE;\n    } finally {\n        setTimeout(() => {\n            isProcessingClick = false;\n        }, 300);\n    }\n});\n\n// Some error handling for microphone input\nasync function requestMicrophonePermission() {\n    try {\n        await navigator.mediaDevices.getUserMedia({ audio: true });\n        return true;\n    } catch (err) {\n        console.error('Error accessing microphone:', err);\n        toast('Microphone access denied. Please enable microphone access in your browser settings.', 'error');\n        return false;\n    }\n}\n\n\nclass Speech {\n    constructor() {\n        this.synth = window.speechSynthesis;\n        this.utterance = null;\n    }\n\n    stripEmojis(str) {\n        return str\n            .replace(/([\\u2700-\\u27BF]|[\\uE000-\\uF8FF]|\\uD83C[\\uDC00-\\uDFFF]|\\uD83D[\\uDC00-\\uDFFF]|[\\u2011-\\u26FF]|\\uD83E[\\uDD10-\\uDDFF])/g, '')\n            .replace(/\\s+/g, ' ')\n            .trim();\n    }\n\n    speak(text) {\n        console.log('Speaking:', text);\n        // Stop any current utterance\n        this.stop();\n\n        // Remove emojis and create a new utterance\n        text = this.stripEmojis(text);\n        this.utterance = new SpeechSynthesisUtterance(text);\n\n        // Speak the new utterance\n        this.synth.speak(this.utterance);\n    }\n\n    stop() {\n        if (this.isSpeaking()) {\n            this.synth.cancel();\n        }\n    }\n\n    isSpeaking() {\n        return this.synth?.speaking || false;\n    }\n}\n\nexport const speech = new Speech();\nwindow.speech = speech","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/zero/webui/js/time-utils.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'date' is assigned a value but never used.","line":53,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":53,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"date"},"fix":{"range":[1432,1468],"text":""},"desc":"Remove unused variable 'date'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Time utilities for handling UTC to local time conversion\n */\n\n/**\n * Convert a UTC ISO string to a local time string\n * @param {string} utcIsoString - UTC time in ISO format\n * @param {Object} options - Formatting options for Intl.DateTimeFormat\n * @returns {string} Formatted local time string\n */\nexport function toLocalTime(utcIsoString, options = {}) {\n  if (!utcIsoString) return '';\n\n  const date = new Date(utcIsoString);\n  const defaultOptions = {\n    dateStyle: 'medium',\n    timeStyle: 'medium'\n  };\n\n  return new Intl.DateTimeFormat(\n    undefined, // Use browser's locale\n    { ...defaultOptions, ...options }\n  ).format(date);\n}\n\n/**\n * Convert a local Date object to UTC ISO string\n * @param {Date} date - Date object in local time\n * @returns {string} UTC ISO string\n */\nexport function toUTCISOString(date) {\n  if (!date) return '';\n  return date.toISOString();\n}\n\n/**\n * Get current time as UTC ISO string\n * @returns {string} Current UTC time in ISO format\n */\nexport function getCurrentUTCISOString() {\n  return new Date().toISOString();\n}\n\n/**\n * Format a UTC ISO string for display in local time with configurable format\n * @param {string} utcIsoString - UTC time in ISO format\n * @param {string} format - Format type ('full', 'date', 'time', 'short')\n * @returns {string} Formatted local time string\n */\nexport function formatDateTime(utcIsoString, format = 'full') {\n  if (!utcIsoString) return '';\n\n  const date = new Date(utcIsoString);\n\n  const formatOptions = {\n    full: { dateStyle: 'medium', timeStyle: 'medium' },\n    date: { dateStyle: 'medium' },\n    time: { timeStyle: 'medium' },\n    short: { dateStyle: 'short', timeStyle: 'short' }\n  };\n\n  return toLocalTime(utcIsoString, formatOptions[format] || formatOptions.full);\n}\n\n/**\n * Get the user's local timezone name\n * @returns {string} Timezone name (e.g., 'America/New_York')\n */\nexport function getUserTimezone() {\n  return Intl.DateTimeFormat().resolvedOptions().timeZone;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/zero/webui/js/timeout.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/zero/webui/js/transformers@3.0.2.js","messages":[{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":1,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":226,"endColumn":11377,"fix":{"range":[0,3],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":28,"column":165,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":28,"endColumn":1456,"fix":{"range":[1434,1437],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":28,"column":1525,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":28,"endColumn":2324,"fix":{"range":[2794,2797],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":28,"column":4094,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":28,"endColumn":5959,"fix":{"range":[5363,5366],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":28,"column":12563,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":28,"endColumn":27547},{"ruleId":"no-unused-vars","severity":2,"message":"'n' is defined but never used.","line":28,"column":27854,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":27855,"suggestions":[{"messageId":"removeVar","data":{"varName":"n"},"fix":{"range":[29122,29124],"text":""},"desc":"Remove unused variable 'n'."}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":28,"column":28581,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":28,"endColumn":28893},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":31,"column":1386,"nodeType":"MemberExpression","messageId":"unexpected","endLine":31,"endColumn":1398},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":34,"column":130,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":34,"endColumn":223},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":37,"column":103,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":37,"endColumn":187,"fix":{"range":[32722,32725],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":43,"column":334,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":43,"endColumn":1203},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":46,"column":130,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":46,"endColumn":378,"fix":{"range":[35260,35263],"text":"let"}},{"ruleId":"compat/compat","severity":2,"message":"OffscreenCanvas is not supported in Safari 14, Firefox 85","line":58,"column":239,"nodeType":"NewExpression","endLine":58,"endColumn":263},{"ruleId":"no-undef","severity":2,"message":"'OffscreenCanvas' is not defined.","line":58,"column":243,"nodeType":"Identifier","messageId":"undef","endLine":58,"endColumn":258},{"ruleId":"compat/compat","severity":2,"message":"OffscreenCanvas.getContext() is not supported in Safari 14, Firefox 85","line":58,"column":1436,"nodeType":"MemberExpression","endLine":58,"endColumn":1471},{"ruleId":"compat/compat","severity":2,"message":"OffscreenCanvas is not supported in Safari 14, Firefox 85","line":58,"column":1436,"nodeType":"NewExpression","endLine":58,"endColumn":1460},{"ruleId":"no-undef","severity":2,"message":"'OffscreenCanvas' is not defined.","line":58,"column":1440,"nodeType":"Identifier","messageId":"undef","endLine":58,"endColumn":1455},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":64,"column":226,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":64,"endColumn":318,"fix":{"range":[43566,43569],"text":"let"}},{"ruleId":"no-undef","severity":2,"message":"'HTMLImageElement' is not defined.","line":64,"column":1487,"nodeType":"Identifier","messageId":"undef","endLine":64,"endColumn":1503},{"ruleId":"no-undef","severity":2,"message":"'ImageData' is not defined.","line":64,"column":1550,"nodeType":"Identifier","messageId":"undef","endLine":64,"endColumn":1559},{"ruleId":"no-undef","severity":2,"message":"'ImageBitmap' is not defined.","line":64,"column":1608,"nodeType":"Identifier","messageId":"undef","endLine":64,"endColumn":1619},{"ruleId":"no-undef","severity":2,"message":"'OffscreenCanvas' is not defined.","line":64,"column":1790,"nodeType":"Identifier","messageId":"undef","endLine":64,"endColumn":1805},{"ruleId":"no-undef","severity":2,"message":"'HTMLCanvasElement' is not defined.","line":64,"column":1873,"nodeType":"Identifier","messageId":"undef","endLine":64,"endColumn":1890},{"ruleId":"no-undef","severity":2,"message":"'OffscreenCanvas' is not defined.","line":64,"column":1905,"nodeType":"Identifier","messageId":"undef","endLine":64,"endColumn":1920},{"ruleId":"no-undef","severity":2,"message":"'Image' is not defined.","line":64,"column":2883,"nodeType":"Identifier","messageId":"undef","endLine":64,"endColumn":2888},{"ruleId":"no-undef","severity":2,"message":"'Float16Array' is not defined.","line":70,"column":817,"nodeType":"Identifier","messageId":"undef","endLine":70,"endColumn":829},{"ruleId":"no-undef","severity":2,"message":"'Float16Array' is not defined.","line":70,"column":984,"nodeType":"Identifier","messageId":"undef","endLine":70,"endColumn":996},{"ruleId":"no-undef","severity":2,"message":"'Float16Array' is not defined.","line":70,"column":1004,"nodeType":"Identifier","messageId":"undef","endLine":70,"endColumn":1016},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":73,"column":109,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":73,"endColumn":541,"fix":{"range":[49334,49337],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":76,"column":142,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":76,"endColumn":234,"fix":{"range":[54640,54643],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":82,"column":146,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":82,"endColumn":232,"fix":{"range":[56184,56187],"text":"let"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":82,"column":301,"nodeType":"MemberExpression","messageId":"unexpected","endLine":82,"endColumn":318},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":85,"column":128,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":85,"endColumn":300,"fix":{"range":[57143,57146],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":23064},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":100,"column":240,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":247},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":100,"column":349,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":356},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":100,"column":418,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":425},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":482,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":487,"fix":{"range":[62934,62937],"text":"let"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":599,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":600,"fix":{"range":[63047,63052],"text":"const a"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":903,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":904,"fix":{"range":[63351,63366],"text":"const r=a.get(e);"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":1104,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":1105,"fix":{"range":[63552,63571],"text":"const t=s.indexOf(e);"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":1252,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":1253,"fix":{"range":[63700,63715],"text":"const t=a.get(e);"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":1363,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":1364,"fix":{"range":[63811,63833],"text":"const n=!!t.initPromise;"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":1583,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":1584},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":1610,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":1611},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":1652,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":1653},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":1671,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":1672},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":1676,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":1677},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":1694,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":1695,"fix":{"range":[64142,64147],"text":"const e"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":1706,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":1707,"fix":{"range":[64154,64171],"text":"const n=await o(e);"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":1908,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":1909,"fix":{"range":[64351,64368],"text":"const{name:e,err:t}"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":1914,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":1915,"fix":{"range":[64351,64368],"text":"const{name:e,err:t}"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":100,"column":1936,"nodeType":"MemberExpression","messageId":"unexpected","endLine":100,"endColumn":1948},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":2056,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":2057,"fix":{"range":[64504,64560],"text":"const u=n.filter((e=>l.has(\"string\"==typeof e?e:e.name)));"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":2631,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":2632,"fix":{"range":[65079,65163],"text":"const n=typeof document<\"u\"?document.createElement(\"canvas\"):new OffscreenCanvas(1,1);"}},{"ruleId":"compat/compat","severity":2,"message":"OffscreenCanvas is not supported in Safari 14, Firefox 85","line":100,"column":2686,"nodeType":"NewExpression","endLine":100,"endColumn":2710},{"ruleId":"no-undef","severity":2,"message":"'OffscreenCanvas' is not defined.","line":100,"column":2690,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":2705},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":2752,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":2753,"fix":{"range":[65200,65225],"text":"const r=n.getContext(\"2d\");"}},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":2903,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":2904},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":2939,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":2940},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":3303,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":3304},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":3459,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":3460},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":3485,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":3486},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":3511,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":3512},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":3537,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":3538,"fix":{"range":[65907,66026],"text":"const a=(e.data[c++]-o[0])*i[0],s=(e.data[p++]-o[1])*i[1],l=(e.data[h++]-o[2])*i[2],u=-1===m?255:(e.data[m++]-o[3])*i[3];"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":3786,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":3787},{"ruleId":"compat/compat","severity":2,"message":"OffscreenCanvas.getContext() is not supported in Safari 14, Firefox 85","line":100,"column":3858,"nodeType":"MemberExpression","endLine":100,"endColumn":3893},{"ruleId":"compat/compat","severity":2,"message":"OffscreenCanvas is not supported in Safari 14, Firefox 85","line":100,"column":3858,"nodeType":"NewExpression","endLine":100,"endColumn":3882},{"ruleId":"no-undef","severity":2,"message":"'OffscreenCanvas' is not defined.","line":100,"column":3862,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":3877},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":4101,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":4102},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":4148,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":4149},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":4514,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":4515,"fix":{"range":[66962,66972],"text":"const c=s*a;"}},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":4693,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":4694},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":5331,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":5332},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":5339,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":5340},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":5344,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":5345},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":5580,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":5581},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":5616,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":5617},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":5688,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":5689},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":5694,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":5695},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":6127,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":6128},{"ruleId":"no-undef","severity":2,"message":"'HTMLImageElement' is not defined.","line":100,"column":6171,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":6187},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":6188,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":6189},{"ruleId":"no-undef","severity":2,"message":"'ImageData' is not defined.","line":100,"column":6225,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":6234},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":6235,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":6236},{"ruleId":"no-undef","severity":2,"message":"'ImageBitmap' is not defined.","line":100,"column":6274,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":6285},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":6286,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":6287},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":6315,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":6316},{"ruleId":"no-undef","severity":2,"message":"'OffscreenCanvas' is not defined.","line":100,"column":6426,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":6441},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":6491,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":6492},{"ruleId":"no-undef","severity":2,"message":"'HTMLCanvasElement' is not defined.","line":100,"column":6539,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":6556},{"ruleId":"no-undef","severity":2,"message":"'OffscreenCanvas' is not defined.","line":100,"column":6571,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":6586},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":6621,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":6622,"fix":{"range":[69069,69079],"text":"const r=l();"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":6665,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":6666,"fix":{"range":[69113,69124],"text":"const a=u(r);"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":7232,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":7233,"fix":{"range":[69680,69690],"text":"const r=l();"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":7276,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":7277,"fix":{"range":[69724,69735],"text":"const a=u(r);"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":7299,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":7300},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":7310,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":7311,"fix":{"range":[69747,69772],"text":"const t=e.height,r=e.width;"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":7491,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":7492},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":7497,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":7498,"fix":{"range":[69939,69956],"text":"const r=l(),a=u(r);"}},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":7529,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":7530,"fix":{"range":[69977,69993],"text":"const s=new Image;"}},{"ruleId":"no-undef","severity":2,"message":"'Image' is not defined.","line":100,"column":7535,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":7540},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":7663,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":7664,"fix":{"range":[70111,70154],"text":"const e=a.getImageData(0,0,r.width,r.height);"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":8042,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":8043,"fix":{"range":[70490,70500],"text":"const t=l();"}},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":8073,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":8074,"fix":{"range":[70521,70532],"text":"const s=u(t);"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":8335,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":8336,"fix":{"range":[70777,70822],"text":"const{width:n,height:r,download:a,dispose:s}=t;"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":8344,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":8345,"fix":{"range":[70777,70822],"text":"const{width:n,height:r,download:a,dispose:s}=t;"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":8355,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":8356,"fix":{"range":[70777,70822],"text":"const{width:n,height:r,download:a,dispose:s}=t;"}},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":8365,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":8366,"fix":{"range":[70777,70822],"text":"const{width:n,height:r,download:a,dispose:s}=t;"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":8490,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":8491,"fix":{"range":[70929,70975],"text":"const{dataType:n,dims:r,download:a,dispose:s}=t;"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":8497,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":8498,"fix":{"range":[70929,70975],"text":"const{dataType:n,dims:r,download:a,dispose:s}=t;"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":8508,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":8509,"fix":{"range":[70929,70975],"text":"const{dataType:n,dims:r,download:a,dispose:s}=t;"}},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":8518,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":8519,"fix":{"range":[70929,70975],"text":"const{dataType:n,dims:r,download:a,dispose:s}=t;"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":8643,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":8644,"fix":{"range":[71082,71128],"text":"const{dataType:n,dims:r,download:a,dispose:s}=t;"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":8650,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":8651,"fix":{"range":[71082,71128],"text":"const{dataType:n,dims:r,download:a,dispose:s}=t;"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":8661,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":8662,"fix":{"range":[71082,71128],"text":"const{dataType:n,dims:r,download:a,dispose:s}=t;"}},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":8671,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":8672,"fix":{"range":[71082,71128],"text":"const{dataType:n,dims:r,download:a,dispose:s}=t;"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":9330,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":9331},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":9377,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":9378},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":9426,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":9427,"fix":{"range":[71778,71923],"text":"const e=typeof BigInt64Array<\"u\"&&BigInt64Array.from,t=typeof BigUint64Array<\"u\"&&BigUint64Array.from,n=typeof Float16Array<\"u\"&&Float16Array.from;"}},{"ruleId":"no-undef","severity":2,"message":"'Float16Array' is not defined.","line":100,"column":9453,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":9465},{"ruleId":"no-undef","severity":2,"message":"'Float16Array' is not defined.","line":100,"column":9620,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":9632},{"ruleId":"no-undef","severity":2,"message":"'Float16Array' is not defined.","line":100,"column":9640,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":9652},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":9760,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":9761,"fix":{"range":[72208,72219],"text":"const r=e[n];"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":10693,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":10694,"fix":{"range":[73141,73156],"text":"const t=v.get(r);"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":11963,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":11964,"fix":{"range":[74411,74426],"text":"const n=v.get(e);"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":12664,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":12665,"fix":{"range":[75112,75130],"text":"const t=typeof e[0];"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":12906,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":12907,"fix":{"range":[75354,75381],"text":"const t=x.get(e.constructor);"}},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":13188,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":13189,"fix":{"range":[75636,75647],"text":"const s=k(a);"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":14772,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":14773,"fix":{"range":[77220,77250],"text":"const t=await this.downloader();"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":100,"column":15686,"nodeType":"MemberExpression","messageId":"unexpected","endLine":100,"endColumn":15703},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":15738,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":15739},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":16200,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":16201},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":16679,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":16680,"fix":{"range":[79127,79132],"text":"const e"}},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":17018,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":17019},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":17058,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":17059,"fix":{"range":[79506,79511],"text":"const n"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":17106,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":17107,"fix":{"range":[79554,79565],"text":"const a=t[n];"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":17393,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":17394,"fix":{"range":[79841,79846],"text":"const t"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":17501,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":17502,"fix":{"range":[79949,79954],"text":"const e"}},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":17537,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":17538},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":17569,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":17570,"fix":{"range":[79985,80026],"text":"const i=await this.handler.run(e,r,a),o={};"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":17582,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":17583,"fix":{"range":[80030,80035],"text":"const e"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":17629,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":17630,"fix":{"range":[80077,80088],"text":"const t=i[e];"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":18249,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":18250},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":19042,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":19043},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":19044,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":19045},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":19058,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":19059,"fix":{"range":[81490,81555],"text":"const[o,u]=await l(i),d=await o.createInferenceSessionHandler(s,u);"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":19939,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":19940},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":19957,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":19958},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":19980,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":19981},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":19989,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":19990,"fix":{"range":[82387,82457],"text":"const r=t.evalModel||\"\",a=t.optimizerModel||\"\",s=n||{},[i,o]=await l(s);"}},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":19991,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":19992,"fix":{"range":[82387,82457],"text":"const r=t.evalModel||\"\",a=t.optimizerModel||\"\",s=n||{},[i,o]=await l(s);"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":20044,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":20045,"fix":{"range":[82492,82573],"text":"const n=await i.createTrainingSessionHandler(t.checkpointState,t.trainModel,r,a,o);"}},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":20338,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":20339},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":20817,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":20818,"fix":{"range":[83265,83270],"text":"const e"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":21141,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":21142},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":21181,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":21182,"fix":{"range":[83629,83634],"text":"const a"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":21214,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":21215,"fix":{"range":[83662,83673],"text":"const t=r[a];"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":21501,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":21502,"fix":{"range":[83949,83954],"text":"const t"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":21595,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":21596,"fix":{"range":[84043,84048],"text":"const e"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":21670,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":21671,"fix":{"range":[84118,84127],"text":"const t={};"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":21683,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":21684,"fix":{"range":[84131,84136],"text":"const n"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":21730,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":21731,"fix":{"range":[84178,84189],"text":"const r=e[n];"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":21883,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":21884},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":21885,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":21886},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":21973,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":21974,"fix":{"range":[84331,84466],"text":"const[r,a]=this.typeNarrowingForRunStep(this.trainingInputNames,this.trainingOutputNames,e,t,n),s=await this.handler.runTrainStep(e,r,a);"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":22285,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":22286},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":22287,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":22288},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":22367,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":22368,"fix":{"range":[84733,84859],"text":"const[r,a]=this.typeNarrowingForRunStep(this.evalInputNames,this.evalOutputNames,e,t,n),s=await this.handler.runEvalStep(e,r,a);"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":22636,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":22637,"fix":{"range":[85084,85122],"text":"const n=await this.getParametersSize(t);"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":23218,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":23305,"fix":{"range":[85670,85673],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":23328,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":24497,"fix":{"range":[85780,85783],"text":"let"}},{"ruleId":"no-undef","severity":2,"message":"'self' is not defined.","line":100,"column":23428,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":23432},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":23456,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":23457,"fix":{"range":[85899,85923],"text":"const{type:t,in:n}=e.data;"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":23461,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":23462,"fix":{"range":[85899,85923],"text":"const{type:t,in:n}=e.data;"}},{"ruleId":"no-undef","severity":2,"message":"'postMessage' is not defined.","line":100,"column":23540,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":23551},{"ruleId":"no-undef","severity":2,"message":"'postMessage' is not defined.","line":100,"column":23569,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":23580},{"ruleId":"no-undef","severity":2,"message":"'postMessage' is not defined.","line":100,"column":23607,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":23618},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":23670,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":23671,"fix":{"range":[86111,86133],"text":"const{epName:e,env:r}=n;"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":23676,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":23677,"fix":{"range":[86111,86133],"text":"const{epName:e,env:r}=n;"}},{"ruleId":"no-undef","severity":2,"message":"'postMessage' is not defined.","line":100,"column":23700,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":23711},{"ruleId":"no-undef","severity":2,"message":"'postMessage' is not defined.","line":100,"column":23729,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":23740},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":23794,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":23795},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":23799,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":23800},{"ruleId":"no-undef","severity":2,"message":"'postMessage' is not defined.","line":100,"column":23807,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":23818},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":23865,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":23866,"fix":{"range":[86307,86332],"text":"const{model:e,options:r}=n;"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":23875,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":23876,"fix":{"range":[86307,86332],"text":"const{model:e,options:r}=n;"}},{"ruleId":"no-undef","severity":2,"message":"'postMessage' is not defined.","line":100,"column":23898,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":23909},{"ruleId":"no-undef","severity":2,"message":"'postMessage' is not defined.","line":100,"column":23933,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":23944},{"ruleId":"no-undef","severity":2,"message":"'postMessage' is not defined.","line":100,"column":23990,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":24001},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":24043,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":24044,"fix":{"range":[86481,86550],"text":"const{sessionId:e,inputIndices:r,inputs:a,outputIndices:s,options:i}=n;"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":24058,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":24059,"fix":{"range":[86481,86550],"text":"const{sessionId:e,inputIndices:r,inputs:a,outputIndices:s,options:i}=n;"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":24067,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":24068,"fix":{"range":[86481,86550],"text":"const{sessionId:e,inputIndices:r,inputs:a,outputIndices:s,options:i}=n;"}},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":24083,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":24084,"fix":{"range":[86481,86550],"text":"const{sessionId:e,inputIndices:r,inputs:a,outputIndices:s,options:i}=n;"}},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":24093,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":24094,"fix":{"range":[86481,86550],"text":"const{sessionId:e,inputIndices:r,inputs:a,outputIndices:s,options:i}=n;"}},{"ruleId":"no-undef","severity":2,"message":"'postMessage' is not defined.","line":100,"column":24179,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":24190},{"ruleId":"no-undef","severity":2,"message":"'postMessage' is not defined.","line":100,"column":24255,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":24266},{"ruleId":"no-undef","severity":2,"message":"'postMessage' is not defined.","line":100,"column":24306,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":24317},{"ruleId":"no-undef","severity":2,"message":"'postMessage' is not defined.","line":100,"column":24369,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":24380},{"ruleId":"no-undef","severity":2,"message":"'postMessage' is not defined.","line":100,"column":24401,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":24412},{"ruleId":"no-undef","severity":2,"message":"'Worker' is not defined.","line":100,"column":24450,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":24456},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":24520,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":359361},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":26263,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":26417,"fix":{"range":[88715,88718],"text":"let"}},{"ruleId":"no-undef","severity":2,"message":"'self' is not defined.","line":100,"column":26407,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":26411},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":26557,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":26668,"fix":{"range":[89009,89012],"text":"let"}},{"ruleId":"no-undef","severity":2,"message":"'WebAssembly' is not defined.","line":100,"column":26597,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":26608},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":26683,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":26684},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":26707,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":26708},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":26712,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":26713,"fix":{"range":[89155,89172],"text":"const a=Ht,s=t?.();"}},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":26734,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":26735,"fix":{"range":[89182,89194],"text":"const i=t?.();"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":26833,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":26834,"fix":{"range":[89131,89605],"text":"const e=(e,t,n)=>(...r)=>{let a=Ht,s=t?.();r=e(...r);let i=t?.();return s!==i&&(e=i,n(s),t=n=null),Ht!=a?new Promise(((e,t)=>{Jt={resolve:e,reject:t}})):r},t=e=>async(...t)=>{try{if(p.Fb)throw Error(\"Session already started\");let n=p.Fb={fc:t[0],errors:[]},r=await e(...t);if(p.Fb!==n)throw Error(\"Session mismatch\");p.Gb?.flush();let a=n.errors;if(0<a.length){let e=await Promise.all(a);if(e=e.filter((e=>e)),0<e.length)throw Error(e.join(\"\\n\"))}return r}finally{p.Fb=null}};"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":26907,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":26908},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":26934,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":26935,"fix":{"range":[89355,89402],"text":"const n=p.Fb={fc:t[0],errors:[]},r=await e(...t);"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":27012,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":27013,"fix":{"range":[89460,89475],"text":"const a=n.errors;"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":27606,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":27607,"fix":{"range":[90054,90065],"text":"const e=p.Gb;"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":28041,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":28042,"fix":{"range":[90489,90500],"text":"const e=p.Gb;"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":28377,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":28431,"fix":{"range":[90829,90832],"text":"let"}},{"ruleId":"no-undef","severity":2,"message":"'self' is not defined.","line":100,"column":28444,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":28448},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":28641,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":28666,"fix":{"range":[91093,91096],"text":"let"}},{"ruleId":"no-undef","severity":2,"message":"'XMLHttpRequest' is not defined.","line":100,"column":28651,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":28665},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":28775,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":28800,"fix":{"range":[91227,91230],"text":"let"}},{"ruleId":"no-undef","severity":2,"message":"'XMLHttpRequest' is not defined.","line":100,"column":28785,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":28799},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":28947,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":29019,"fix":{"range":[91399,91402],"text":"let"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":100,"column":28955,"nodeType":"MemberExpression","messageId":"unexpected","endLine":100,"endColumn":28966},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":100,"column":28983,"nodeType":"MemberExpression","messageId":"unexpected","endLine":100,"endColumn":28996},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":29055,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":29056,"fix":{"range":[91503,92186],"text":"const e=function(t){try{var n=t.data,r=n.cmd;if(\"load\"===r){let t=[];self.onmessage=e=>t.push(e),self.startWorker=()=>{postMessage({cmd:\"loaded\"});for(let n of t)e(n);self.onmessage=e};for(let e of n.handlers)p[e]&&!p[e].proxy||(p[e]=(...t)=>{postMessage({Mb:\"callHandler\",oc:e,args:t})},\"print\"==e&&(C=p[e]),\"printErr\"==e&&(S=p[e]));F=n.wasmMemory,U(),P(n.wasmModule)}else if(\"run\"===r){Mr(n.pthread_ptr,0,0,1,0,0),Ot(n.pthread_ptr),Ce(),Me(),E||(wr(),E=!0);try{Se(n.start_routine,n.arg)}catch(e){if(\"unwind\"!=e)throw e}}else\"cancel\"===r?br()&&Cr(-1):\"setimmediate\"!==n.target&&(\"checkMailbox\"===r?E&&Bt():r&&(S(`worker: received unknown command ${r}`),S(n)))}catch(e){throw Tr(),e}};"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":29073,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":29094,"fix":{"range":[91525,91528],"text":"let"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":29113,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":29114,"fix":{"range":[91561,91570],"text":"const t=[];"}},{"ruleId":"no-undef","severity":2,"message":"'self' is not defined.","line":100,"column":29118,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":29122},{"ruleId":"no-undef","severity":2,"message":"'self' is not defined.","line":100,"column":29146,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":29150},{"ruleId":"no-undef","severity":2,"message":"'postMessage' is not defined.","line":100,"column":29168,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":29179},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":29204,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":29205,"fix":{"range":[91652,91657],"text":"const n"}},{"ruleId":"no-undef","severity":2,"message":"'self' is not defined.","line":100,"column":29216,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":29220},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":29242,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":29243,"fix":{"range":[91690,91695],"text":"const e"}},{"ruleId":"no-undef","severity":2,"message":"'postMessage' is not defined.","line":100,"column":29292,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":29303},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":29734,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":29745},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":100,"column":29776,"nodeType":"MemberExpression","messageId":"unexpected","endLine":100,"endColumn":29789},{"ruleId":"no-undef","severity":2,"message":"'self' is not defined.","line":100,"column":29794,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":29798},{"ruleId":"no-undef","severity":2,"message":"'postMessage' is not defined.","line":100,"column":29820,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":29831},{"ruleId":"no-undef","severity":2,"message":"'WebAssembly' is not defined.","line":100,"column":29926,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":29937},{"ruleId":"no-undef","severity":2,"message":"'self' is not defined.","line":100,"column":29968,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":29972},{"ruleId":"no-undef","severity":2,"message":"'self' is not defined.","line":100,"column":30017,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":30021},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":30065,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":30100,"fix":{"range":[92517,92520],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":30113,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":30128,"fix":{"range":[92565,92568],"text":"let"}},{"ruleId":"no-undef","severity":2,"message":"'WebAssembly' is not defined.","line":100,"column":30453,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":30464},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":30788,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":30825,"fix":{"range":[93240,93243],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":30890,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":30898,"fix":{"range":[93342,93345],"text":"let"}},{"ruleId":"no-undef","severity":2,"message":"'WebAssembly' is not defined.","line":100,"column":30967,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":30978},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":31045,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":31142,"fix":{"range":[93497,93500],"text":"let"}},{"ruleId":"no-undef","severity":2,"message":"'WebAssembly' is not defined.","line":100,"column":31637,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":31648},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":32194,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":42836,"fix":{"range":[94646,94649],"text":"let"}},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":32391,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":32392,"fix":{"range":[94839,94863],"text":"const i=e.subarray(t,t+n);"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":43051,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":43500,"fix":{"range":[105503,105506],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":43134,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":43149,"fix":{"range":[105586,105589],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":43196,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":43259,"fix":{"range":[105648,105651],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":43316,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":43361},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":43378,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":43389,"fix":{"range":[105830,105833],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":43557,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":43562},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":43674,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":43829},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":43753,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":43764,"fix":{"range":[106205,106208],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":43864,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":44821},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":43907,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":43928,"fix":{"range":[106359,106362],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":43969,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":43994,"fix":{"range":[106421,106424],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":44700,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":44711,"fix":{"range":[107152,107155],"text":"let"}},{"ruleId":"no-prototype-builtins","severity":2,"message":"Do not access Object.prototype method 'hasOwnProperty' from target object.","line":100,"column":44724,"nodeType":"CallExpression","messageId":"prototypeBuildIn","endLine":100,"endColumn":44738,"suggestions":[{"messageId":"callObjectPrototype","data":{"prop":"hasOwnProperty"},"fix":{"range":[107174,107191],"text":"Object.prototype.hasOwnProperty.call(p, "},"desc":"Call Object.prototype.hasOwnProperty explicitly."}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":44835,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":44936,"fix":{"range":[107287,107290],"text":"let"}},{"ruleId":"no-undef","severity":2,"message":"'Worker' is not defined.","line":100,"column":44845,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":44851},{"ruleId":"no-undef","severity":2,"message":"'URL' is not defined.","line":100,"column":44856,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":44859},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":44947,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":45107},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":44997,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":45028,"fix":{"range":[107449,107452],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":45164,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":45185,"fix":{"range":[107616,107619],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":45493,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":45502,"fix":{"range":[107945,107948],"text":"let"}},{"ruleId":"no-undef","severity":2,"message":"'postMessage' is not defined.","line":100,"column":45584,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":45595},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":45611,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":46183},{"ruleId":"no-undef","severity":2,"message":"'TextDecoder' is not defined.","line":100,"column":45645,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":45656},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":45685,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":45702,"fix":{"range":[108137,108140],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":45837,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":45850,"fix":{"range":[108289,108292],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":45860,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":45876,"fix":{"range":[108312,108315],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":45933,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":45949,"fix":{"range":[108385,108388],"text":"let"}},{"ruleId":"no-cond-assign","severity":2,"message":"Expected a conditional expression and instead saw an assignment.","line":100,"column":46160,"nodeType":"AssignmentExpression","messageId":"missing","endLine":100,"endColumn":46166},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":46268,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":46880,"fix":{"range":[108720,108723],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":46283,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":46294},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":46311,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":46333,"fix":{"range":[108763,108766],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":46436,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":46449,"fix":{"range":[108888,108891],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":46461,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":46468,"fix":{"range":[108913,108916],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":46485,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":46507,"fix":{"range":[108937,108940],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":47372,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":47477},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":47408,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":47416},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":47631,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":47644,"fix":{"range":[110083,110086],"text":"let"}},{"ruleId":"no-prototype-builtins","severity":2,"message":"Do not access Object.prototype method 'hasOwnProperty' from target object.","line":100,"column":47728,"nodeType":"CallExpression","messageId":"prototypeBuildIn","endLine":100,"endColumn":47742,"suggestions":[{"messageId":"callObjectPrototype","data":{"prop":"hasOwnProperty"},"fix":{"range":[110177,110195],"text":"Object.prototype.hasOwnProperty.call(rt, "},"desc":"Call Object.prototype.hasOwnProperty explicitly."}]},{"ruleId":"no-prototype-builtins","severity":2,"message":"Do not access Object.prototype method 'hasOwnProperty' from target object.","line":100,"column":47836,"nodeType":"CallExpression","messageId":"prototypeBuildIn","endLine":100,"endColumn":47850,"suggestions":[{"messageId":"callObjectPrototype","data":{"prop":"hasOwnProperty"},"fix":{"range":[110285,110303],"text":"Object.prototype.hasOwnProperty.call(nt, "},"desc":"Call Object.prototype.hasOwnProperty explicitly."}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":47906,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":48189,"fix":{"range":[110358,110361],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":48596,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":48605},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":48828,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":48844,"fix":{"range":[111280,111283],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":48911,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":49146,"fix":{"range":[111363,111366],"text":"let"}},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":100,"column":49091,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":100,"endColumn":49117,"suggestions":[{"messageId":"addBrackets","fix":{"range":[111543,111595],"text":"{ let t=dt.pop()||ct.length;return ct[t]=e,ct[t+1]=1,t }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":49095,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":49096,"fix":{"range":[111543,111569],"text":"const t=dt.pop()||ct.length;"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":49202,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":49353,"fix":{"range":[111654,111657],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":49250,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":49262,"fix":{"range":[111702,111705],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":49388,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":49615,"fix":{"range":[111840,111843],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":49853,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":49866,"fix":{"range":[112305,112308],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":49880,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":49961,"fix":{"range":[112332,112335],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":50098,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":50119,"fix":{"range":[112550,112553],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":50167,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":50300},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":50418,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":50454,"fix":{"range":[112870,112873],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":50492,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":50519,"fix":{"range":[112944,112947],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":50528,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":50539},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":50550,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":50560,"fix":{"range":[113002,113005],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":50610,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":50618},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":50834,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":50859,"fix":{"range":[113286,113289],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":51002,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":51046,"fix":{"range":[113454,113457],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":51110,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":51132,"fix":{"range":[113562,113565],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":51362,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":52377,"fix":{"range":[113814,113817],"text":"let"}},{"ruleId":"no-undef","severity":2,"message":"'TextDecoder' is not defined.","line":100,"column":51396,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":51407},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":51442,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":51460},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":51567,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":51592,"fix":{"range":[114019,114022],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":51686,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":51694,"fix":{"range":[114138,114141],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":51731,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":51738,"fix":{"range":[114183,114186],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":51748,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":51770,"fix":{"range":[114200,114203],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":51853,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":51865},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":51878,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":51903,"fix":{"range":[114330,114333],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":52077,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":52085,"fix":{"range":[114529,114532],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":52097,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":52104,"fix":{"range":[114549,114552],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":52121,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":52143,"fix":{"range":[114573,114576],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":52288,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":52299},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":52316,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":52338,"fix":{"range":[114768,114771],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":52432,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":52471},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":52554,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":52586},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":52597,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":52611,"fix":{"range":[115049,115052],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":52813,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":52836,"fix":{"range":[115265,115268],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":53066,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":53079},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":53127,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":53276,"fix":{"range":[115579,115582],"text":"let"}},{"ruleId":"compat/compat","severity":2,"message":"Atomics is not supported in Safari 14","line":100,"column":53317,"nodeType":"MemberExpression","endLine":100,"endColumn":53327},{"ruleId":"compat/compat","severity":2,"message":"Atomics is not supported in Safari 14","line":100,"column":53330,"nodeType":"MemberExpression","endLine":100,"endColumn":53340},{"ruleId":"compat/compat","severity":2,"message":"Atomics is not supported in Safari 14","line":100,"column":53376,"nodeType":"MemberExpression","endLine":100,"endColumn":53389},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":53404,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":53446},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":53416,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":53427,"fix":{"range":[115868,115871],"text":"let"}},{"ruleId":"no-undef","severity":2,"message":"'postMessage' is not defined.","line":100,"column":53496,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":53507},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":53592,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":53602,"fix":{"range":[116044,116047],"text":"let"}},{"ruleId":"no-undef","severity":2,"message":"'postMessage' is not defined.","line":100,"column":53773,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":53784},{"ruleId":"no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":100,"column":53839,"nodeType":"Identifier","messageId":"unusedVar","endLine":100,"endColumn":53840,"suggestions":[{"messageId":"removeVar","data":{"varName":"e"},"fix":{"range":[116291,116292],"text":""},"desc":"Remove unused variable 'e'."}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":53843,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":54044,"fix":{"range":[116295,116298],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":53858,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":53870,"fix":{"range":[116310,116313],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":53972,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":53981,"fix":{"range":[116424,116427],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":54126,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":54216},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":54267,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":54281,"fix":{"range":[116719,116722],"text":"let"}},{"ruleId":"no-undef","severity":2,"message":"'Browser' is not defined.","line":100,"column":54373,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":54380},{"ruleId":"no-undef","severity":2,"message":"'Browser' is not defined.","line":100,"column":54388,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":54395},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":54417,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":54465},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":54484,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":54493,"fix":{"range":[116936,116939],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":54501,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":54510,"fix":{"range":[116953,116956],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":54571,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":54576,"fix":{"range":[117023,117026],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":54608,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":54631,"fix":{"range":[117060,117063],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":54681,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":54693,"fix":{"range":[117133,117136],"text":"let"}},{"ruleId":"no-undef","severity":2,"message":"'Browser' is not defined.","line":100,"column":54785,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":54792},{"ruleId":"no-undef","severity":2,"message":"'Browser' is not defined.","line":100,"column":54800,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":54807},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":54991,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":55001,"fix":{"range":[117443,117446],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":55079,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":55135,"fix":{"range":[117531,117534],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":55096,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":55108,"fix":{"range":[117548,117551],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":55228,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":55304,"fix":{"range":[117680,117683],"text":"let"}},{"ruleId":"no-new-func","severity":2,"message":"The Function constructor is eval.","line":100,"column":55278,"nodeType":"CallExpression","messageId":"noFunctionConstructor","endLine":100,"endColumn":55301},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":55369,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":55564,"fix":{"range":[117821,117824],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":55380,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":55396,"fix":{"range":[117832,117835],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":55432,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":55450},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":55583,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":55613,"fix":{"range":[118035,118038],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":55617,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":55688,"fix":{"range":[118069,118072],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":55713,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":55740},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":56114,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":56129,"fix":{"range":[118566,118569],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":56250,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":56305,"fix":{"range":[118702,118705],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":56672,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":56697},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":56819,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":56835,"fix":{"range":[119271,119274],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":56847,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":56861,"fix":{"range":[119299,119302],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":57468,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":57603,"fix":{"range":[119920,119923],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":57922,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":57986,"fix":{"range":[120374,120377],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":58102,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":58158,"fix":{"range":[120554,120557],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":58249,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":58539,"fix":{"range":[120701,120704],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":59156,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":59223,"fix":{"range":[121608,121611],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":59247,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":59291,"fix":{"range":[121699,121702],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":59481,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":59682,"fix":{"range":[121933,121936],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":59518,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":59523},{"ruleId":"no-cond-assign","severity":2,"message":"Expected a conditional expression and instead saw an assignment.","line":100,"column":59524,"nodeType":"AssignmentExpression","messageId":"missing","endLine":100,"endColumn":59538},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":59541,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":59554,"fix":{"range":[121993,121996],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":59808,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":59840},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":59883,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":59920},{"ruleId":"no-undef","severity":2,"message":"'performance' is not defined.","line":100,"column":59959,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":59970},{"ruleId":"compat/compat","severity":2,"message":"performance.timeOrigin() is not supported in Safari 14","line":100,"column":59959,"nodeType":"MemberExpression","endLine":100,"endColumn":59981},{"ruleId":"no-undef","severity":2,"message":"'performance' is not defined.","line":100,"column":59982,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":59993},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":60000,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":60041},{"ruleId":"compat/compat","severity":2,"message":"navigator.hardwareConcurrency() is not supported in Safari 14","line":100,"column":60011,"nodeType":"MemberExpression","endLine":100,"endColumn":60040},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":60160,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":60177,"fix":{"range":[122612,122615],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":60212,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":60219,"fix":{"range":[122664,122667],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":60231,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":60248,"fix":{"range":[122683,122686],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":60274,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":60285,"fix":{"range":[122726,122729],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":60407,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":60415},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":100,"column":60428,"nodeType":"BlockStatement","messageId":"unexpected","endLine":100,"endColumn":60430,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[122881,122881],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":60462,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":60634,"fix":{"range":[122914,122917],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":60606,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":60617,"fix":{"range":[123058,123061],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":60648,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":60691,"fix":{"range":[123100,123103],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":60798,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":60810},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":60888,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":60895},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":60972,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":61323,"fix":{"range":[123424,123427],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":61001,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":61214,"fix":{"range":[123453,123456],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":61264,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":61273,"fix":{"range":[123716,123719],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":61379,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":61387,"fix":{"range":[123831,123834],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":61416,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":61426,"fix":{"range":[123868,123871],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":61589,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":61600,"fix":{"range":[124041,124044],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":61624,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":61632,"fix":{"range":[124076,124079],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":61826,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":61846,"fix":{"range":[124278,124281],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":61921,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":61932},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":61942,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":61982,"fix":{"range":[124394,124397],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":61991,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":61998,"fix":{"range":[124443,124446],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":62008,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":62035,"fix":{"range":[124460,124463],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":62124,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":62239,"fix":{"range":[124576,124579],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":62438,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":62444,"fix":{"range":[124890,124893],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":62906,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":62917,"fix":{"range":[125358,125361],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":62973,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":63025},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":63364,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":63388,"fix":{"range":[125816,125819],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":63392,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":63397},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":64043,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":64224,"fix":{"range":[126495,126498],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":64524,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":64535},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":64782,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":64822,"fix":{"range":[127234,127237],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":64922,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":64946},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":65492,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":65512,"fix":{"range":[127944,127947],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":65539,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":65545,"fix":{"range":[127991,127994],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":65607,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":65629},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":65945,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":67482},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":66090,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":66104,"fix":{"range":[128542,128545],"text":"let"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":66112,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":66113,"fix":{"range":[128560,128568],"text":"const[n,r]"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":66114,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":66115,"fix":{"range":[128560,128568],"text":"const[n,r]"}},{"ruleId":"no-undef","severity":2,"message":"'Fibers' is not defined.","line":100,"column":66288,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":66294},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":66567,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":66576,"fix":{"range":[129019,129022],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":66577,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":66594,"fix":{"range":[129029,129032],"text":"let"}},{"ruleId":"no-undef","severity":2,"message":"'URL' is not defined.","line":100,"column":66932,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":66935},{"ruleId":"no-undef","severity":2,"message":"'WebAssembly' is not defined.","line":100,"column":67129,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":67140},{"ruleId":"no-undef","severity":2,"message":"'WebAssembly' is not defined.","line":100,"column":67258,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":67269},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":69346,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":69827},{"ruleId":"no-undef","severity":2,"message":"'startWorker' is not defined.","line":100,"column":69864,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":69875},{"ruleId":"no-undef","severity":2,"message":"'self' is not defined.","line":100,"column":70323,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":70327},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":70416,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":70417,"fix":{"range":[132864,132876],"text":"const n=t??Me;"}},{"ruleId":"no-undef","severity":2,"message":"'URL' is not defined.","line":100,"column":70437,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":70440},{"ruleId":"no-undef","severity":2,"message":"'URL' is not defined.","line":100,"column":70450,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":70453},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":70504,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":70505,"fix":{"range":[132952,133015],"text":"const t=await(await fetch(e,{credentials:\"same-origin\"})).blob();"}},{"ruleId":"no-undef","severity":2,"message":"'URL' is not defined.","line":100,"column":70570,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":70573},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":70760,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":70761,"fix":{"range":[133208,133227],"text":"const e=await $e(Me);"}},{"ruleId":"no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":100,"column":70825,"nodeType":"Identifier","messageId":"unusedVar","endLine":100,"endColumn":70826,"suggestions":[{"messageId":"removeVar","data":{"varName":"e"},"fix":{"range":[133277,133279],"text":""},"desc":"Remove unused variable 'e'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'t' is defined but never used.","line":100,"column":70827,"nodeType":"Identifier","messageId":"unusedVar","endLine":100,"endColumn":70828,"suggestions":[{"messageId":"removeVar","data":{"varName":"t"},"fix":{"range":[133278,133280],"text":""},"desc":"Remove unused variable 't'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'n' is defined but never used.","line":100,"column":70829,"nodeType":"Identifier","messageId":"unusedVar","endLine":100,"endColumn":70830,"suggestions":[{"messageId":"removeVar","data":{"varName":"n"},"fix":{"range":[133280,133282],"text":""},"desc":"Remove unused variable 'n'."}]},{"ruleId":"no-undef","severity":2,"message":"'MessageChannel' is not defined.","line":100,"column":70974,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":70988},{"ruleId":"no-undef","severity":2,"message":"'WebAssembly' is not defined.","line":100,"column":71034,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":71045},{"ruleId":"no-undef","severity":2,"message":"'WebAssembly' is not defined.","line":100,"column":71198,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":71209},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":71586,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":71587},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":71711,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":71712,"fix":{"range":[134159,134170],"text":"const r=Oe();"}},{"ruleId":"no-undef","severity":2,"message":"'self' is not defined.","line":100,"column":71746,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":71750},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":100,"column":71772,"nodeType":"MemberExpression","messageId":"unexpected","endLine":100,"endColumn":71784},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":100,"column":71957,"nodeType":"MemberExpression","messageId":"unexpected","endLine":100,"endColumn":71969},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":72102,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":72103},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":72116,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":72117},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":72146,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":72147},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":72155,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":72156},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":72168,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":72169},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":72178,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":72179},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":72191,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":72192},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":72207,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":72208},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":72209,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":72210},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":100,"column":72235,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":72236},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":72339,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":72340,"fix":{"range":[134787,134808],"text":"const r={numThreads:n};"}},{"ruleId":"no-undef","severity":2,"message":"'URL' is not defined.","line":100,"column":72454,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":72457},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":72733,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":72734},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":72740,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":72741},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":72765,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":72766,"fix":{"range":[135181,135232],"text":"const n=De(),r=n.lengthBytesUTF8(e)+1,a=n._malloc(r);"}},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":72981,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":72982,"fix":{"range":[135429,135443],"text":"const s=t?t+e:e;"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":73214,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":73215},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":73221,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":73222,"fix":{"range":[135662,135689],"text":"const t=De(),n=t.stackSave();"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":73245,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":73246,"fix":{"range":[135693,135715],"text":"const n=t.stackAlloc(8);"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":73293,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":73294},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":73309,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":73310},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":73328,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":73329,"fix":{"range":[135741,135805],"text":"const r=t.HEAP32[n/4],a=t.HEAPU32[n/4+1],s=a?t.UTF8ToString(a):\"\";"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":73478,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":73479},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":73489,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":73490},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":73494,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":73495},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":74243,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":74244},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":74253,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":74254,"fix":{"range":[136691,136715],"text":"const s=Re(e,r),i=Re(a,r);"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":74839,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":74840,"fix":{"range":[137287,137309],"text":"const t=e.extra.session;"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":75068,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":75069,"fix":{"range":[137516,137521],"text":"const r"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":75169,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":75170,"fix":{"range":[137617,137637],"text":"const t=r?.deviceType;"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":75195,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":75196},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":75216,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":75217,"fix":{"range":[137643,137678],"text":"const r=Re(\"deviceType\",n),a=Re(t,n);"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":75384,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":75385,"fix":{"range":[137832,137840],"text":"const t=r;"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":75562,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":75563},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":75588,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":75589,"fix":{"range":[138010,138066],"text":"const r=Re(\"preferredLayout\",n),a=Re(t.preferredLayout,n);"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":75846,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":75847,"fix":{"range":[138294,138308],"text":"const a=Re(t,n);"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":75957,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":75958},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":75968,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":75969},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":75973,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":75974},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":75995,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":75996},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":76033,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":76034},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":76069,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":76070},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":76112,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":76113,"fix":{"range":[138443,138588],"text":"const e=qe(a.graphOptimizationLevel??\"all\"),s=Ge(a.executionMode??\"sequential\"),i=\"string\"==typeof a.logId?Re(a.logId,r):0,o=a.logSeverityLevel??2;"}},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":76232,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":76233,"fix":{"range":[138680,138709],"text":"const l=a.logVerbosityLevel??0;"}},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":76353,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":76354,"fix":{"range":[138801,138882],"text":"const u=\"string\"==typeof a.optimizedModelFilePath?Re(a.optimizedModelFilePath,r):0;"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":76798,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":76799},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":76827,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":76828,"fix":{"range":[139246,139319],"text":"const e=Re(\"enableGraphCapture\",r),s=Re(a.enableGraphCapture.toString(),r);"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":77031,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":77032,"fix":{"range":[139479,139487],"text":"const[e,s]"}},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":77033,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":77034,"fix":{"range":[139479,139487],"text":"const[e,s]"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":77312,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":77313,"fix":{"range":[139760,139774],"text":"const a=Re(e,r);"}},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":77485,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":77486},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":77495,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":77496,"fix":{"range":[139933,139957],"text":"const s=Re(e,r),i=Re(a,r);"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":78524,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":78525},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":78588,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":78589,"fix":{"range":[140972,141088],"text":"const n=[-1,4,1,1,2,2,4,8,-1,1,2,8,4,8,-1,-1,-1,-1,-1,-1,-1,.5,.5][e],r=\"number\"==typeof t?t:t.reduce(((e,t)=>e*t),1);"}},{"ruleId":"no-undef","severity":2,"message":"'Float16Array' is not defined.","line":100,"column":78733,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":78745},{"ruleId":"no-undef","severity":2,"message":"'Float16Array' is not defined.","line":100,"column":78751,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":78763},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":79871,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":79872,"fix":{"range":[142319,142340],"text":"const t=await fetch(e);"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":79960,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":79961},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":79994,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":79995,"fix":{"range":[142408,142467],"text":"const n=t.headers.get(\"Content-Length\"),r=n?parseInt(n,10):0;"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":80172,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":80173},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":80270,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":80271,"fix":{"range":[142718,142743],"text":"const e=Math.ceil(r/65536);"}},{"ruleId":"no-undef","severity":2,"message":"'WebAssembly' is not defined.","line":100,"column":80297,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":80308},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":80372,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":80373,"fix":{"range":[142815,142850],"text":"const{done:e,value:t}=await a.read();"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":80380,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":80381,"fix":{"range":[142815,142850],"text":"const{done:e,value:t}=await a.read();"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":80413,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":80414,"fix":{"range":[142861,142880],"text":"const r=t.byteLength;"}},{"ruleId":"no-undef","severity":2,"message":"'Blob' is not defined.","line":100,"column":80513,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":80517},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":100,"column":80656,"nodeType":"MemberExpression","messageId":"unexpected","endLine":100,"endColumn":80667,"suggestions":[{"fix":{"range":[143108,143165],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":80752,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":80753,"fix":{"range":[143200,143212],"text":"const n=Ze(e);"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":81313,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":81314,"fix":{"range":[143761,143773],"text":"const n=pt[t];"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":81406,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":81407},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":81414,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":81415,"fix":{"range":[143854,143954],"text":"const a=ht(n),s=e.device.createBuffer({size:a,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});"}},{"ruleId":"no-undef","severity":2,"message":"'GPUBufferUsage' is not defined.","line":100,"column":81452,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":81466},{"ruleId":"no-undef","severity":2,"message":"'GPUBufferUsage' is not defined.","line":100,"column":81476,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":81490},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":81510,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":81511,"fix":{"range":[143958,143986],"text":"const i=e.getCommandEncoder();"}},{"ruleId":"no-undef","severity":2,"message":"'GPUMapMode' is not defined.","line":100,"column":81612,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":81622},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":81633,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":81634,"fix":{"range":[144081,144106],"text":"const o=s.getMappedRange();"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":81664,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":81665,"fix":{"range":[144112,144122],"text":"const e=r();"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":81990,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":81991,"fix":{"range":[144438,144444],"text":"const[e]"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":82106,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":82107},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":82117,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":82118},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":82132,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":82133},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":82147,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":82148},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":82155,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":82156,"fix":{"range":[144554,144634],"text":"const n=t.buffer,r=t.byteOffset,a=t.byteLength,s=ht(a),i=this.storageCache.get(e);"}},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":82362,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":82363},{"ruleId":"no-undef","severity":2,"message":"'GPUBufferUsage' is not defined.","line":100,"column":82431,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":82445},{"ruleId":"no-undef","severity":2,"message":"'GPUBufferUsage' is not defined.","line":100,"column":82456,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":82470},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":82482,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":82483,"fix":{"range":[144810,144955],"text":"const o=this.backend.device.createBuffer({mappedAtCreation:!0,size:s,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),l=o.getMappedRange();"}},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":82562,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":82563,"fix":{"range":[145010,145049],"text":"const u=this.backend.getCommandEncoder();"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":82792,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":82793,"fix":{"range":[145240,145271],"text":"const n=this.storageCache.get(e);"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":82890,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":82891,"fix":{"range":[145338,145369],"text":"const r=this.storageCache.get(t);"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":83097,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":83098},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":83118,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":83119,"fix":{"range":[145545,145605],"text":"const a=ht(n.originalSize),s=this.backend.getCommandEncoder();"}},{"ruleId":"no-undef","severity":2,"message":"'GPUBufferUsage' is not defined.","line":100,"column":84028,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":84042},{"ruleId":"no-undef","severity":2,"message":"'GPUBufferUsage' is not defined.","line":100,"column":84051,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":84065},{"ruleId":"no-undef","severity":2,"message":"'GPUBufferUsage' is not defined.","line":100,"column":84075,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":84089},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":84106,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":84107},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":84114,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":84115},{"ruleId":"no-undef","severity":2,"message":"'GPUBufferUsage' is not defined.","line":100,"column":84119,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":84133},{"ruleId":"no-undef","severity":2,"message":"'GPUBufferUsage' is not defined.","line":100,"column":84145,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":84159},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":84168,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":84169},{"ruleId":"no-undef","severity":2,"message":"'GPUBufferUsage' is not defined.","line":100,"column":84173,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":84187},{"ruleId":"no-undef","severity":2,"message":"'GPUBufferUsage' is not defined.","line":100,"column":84199,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":84213},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":84235,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":84236,"fix":{"range":[146683,146741],"text":"const e=(a?this.freeBuffers:this.freeUniformBuffers).get(r);"}},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":84426,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":84427,"fix":{"range":[146874,146906],"text":"const i={id:gt(),type:0,buffer:n};"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":84659,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":84660,"fix":{"range":[147107,147138],"text":"const t=this.storageCache.get(e);"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":84988,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":84989,"fix":{"range":[147436,147467],"text":"const n=this.storageCache.get(e);"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":85149,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":85150,"fix":{"range":[147597,147602],"text":"const e"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":85318,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":85319,"fix":{"range":[147766,147771],"text":"const e"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":85348,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":85349,"fix":{"range":[147796,147817],"text":"const t=ct.get(e.size);"}},{"ruleId":"no-undef","severity":2,"message":"'GPUBufferUsage' is not defined.","line":100,"column":85377,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":85391},{"ruleId":"no-undef","severity":2,"message":"'GPUBufferUsage' is not defined.","line":100,"column":85403,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":85417},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":85431,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":85432,"fix":{"range":[147879,147918],"text":"const n=this.freeBuffers.get(e.size)||[];"}},{"ruleId":"no-undef","severity":2,"message":"'GPUBufferUsage' is not defined.","line":100,"column":85529,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":85543},{"ruleId":"no-undef","severity":2,"message":"'GPUBufferUsage' is not defined.","line":100,"column":85555,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":85569},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":85583,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":85584,"fix":{"range":[148031,148077],"text":"const n=this.freeUniformBuffers.get(e.size)||[];"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":85868,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":85869,"fix":{"range":[148316,148321],"text":"const t"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":86387,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":86388,"fix":{"range":[148835,148876],"text":"const t=this.capturedPendingBuffers.get(e);"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":87050,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":87051},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":87061,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":87062,"fix":{"range":[149498,149524],"text":"const r=e.length,a=t.length;"}},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":87112,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":87113},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":87142,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":87143,"fix":{"range":[149560,149609],"text":"const s=Math.max(e.length,t.length),i=new Array(s);"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":87186,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":87187,"fix":{"range":[149634,149692],"text":"const n=xt.calcMatMulShape([e[r-2],e[r-1]],[t[a-2],t[a-1]]);"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":87309,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":87310},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":87326,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":87327,"fix":{"range":[149757,149795],"text":"const n=r-o<0?1:e[r-o],l=a-o<0?1:t[a-o];"}},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":87373,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":87374,"fix":{"range":[149821,149841],"text":"const u=Math.max(n,l);"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":87489,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":87490},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":87500,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":87501,"fix":{"range":[149937,149963],"text":"const n=e.length,r=t.length;"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":87705,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":87706,"fix":{"range":[150153,150168],"text":"const n=e.length;"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":87738,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":87739},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":88560,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":88561,"fix":{"range":[151008,151023],"text":"const t=e.length;"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":88612,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":88613,"fix":{"range":[151060,151079],"text":"const n=new Array(t);"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":88992,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":88993,"fix":{"range":[151440,151455],"text":"const n=e.length;"}},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":90557,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":90558,"fix":{"range":[153005,153023],"text":"const l=[n[0],n[1]];"}},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":90770,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":90771,"fix":{"range":[153218,153236],"text":"const l=[t[0],n[0]];"}},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":91081,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":91082,"fix":{"range":[153529,153545],"text":"const l=n*(r-1)+1;"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":91336,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":91337,"fix":{"range":[153784,153810],"text":"const n=((e+t-1)/t-1)*t+r-e;"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":92661,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":92662,"fix":{"range":[155109,155123],"text":"const n=Et(e,t);"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":92721,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":92722,"fix":{"range":[155169,155183],"text":"const n=Et(e,t);"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":92780,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":92781,"fix":{"range":[155228,155237],"text":"const t=[];"}},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":93460,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":93461},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":93481,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":93482},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":93496,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":93497},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":93523,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":93524},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":93574,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":93575},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":93584,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":93585},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":93612,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":93613},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":93640,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":93641},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":93681,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":93682},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":100,"column":93715,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":93716},{"ruleId":"prefer-const","severity":2,"message":"'f' is never reassigned. Use 'const' instead.","line":100,"column":93833,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":93834},{"ruleId":"prefer-const","severity":2,"message":"'g' is never reassigned. Use 'const' instead.","line":100,"column":93852,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":93853},{"ruleId":"prefer-const","severity":2,"message":"'_' is never reassigned. Use 'const' instead.","line":100,"column":93871,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":93872},{"ruleId":"prefer-const","severity":2,"message":"'y' is never reassigned. Use 'const' instead.","line":100,"column":94109,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":94110},{"ruleId":"prefer-const","severity":2,"message":"'b' is never reassigned. Use 'const' instead.","line":100,"column":94262,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":94263,"fix":{"range":[156557,156719],"text":"const y=i<2?\"\":`\\n  fn o2i_${e}(offset: u32) -> ${p.indices} {\\n    var indices: ${p.indices};\\n    var current = offset;\\n    ${w}\\n    return indices;\\n  }`,b=[];"}},{"ruleId":"prefer-const","severity":2,"message":"'v' is never reassigned. Use 'const' instead.","line":100,"column":94343,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":94344},{"ruleId":"prefer-const","severity":2,"message":"'x' is never reassigned. Use 'const' instead.","line":100,"column":94435,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":94436},{"ruleId":"prefer-const","severity":2,"message":"'M' is never reassigned. Use 'const' instead.","line":100,"column":94494,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":94495},{"ruleId":"prefer-const","severity":2,"message":"'T' is never reassigned. Use 'const' instead.","line":100,"column":94529,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":94530},{"ruleId":"prefer-const","severity":2,"message":"'k' is never reassigned. Use 'const' instead.","line":100,"column":94534,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":94535},{"ruleId":"prefer-const","severity":2,"message":"'$' is never reassigned. Use 'const' instead.","line":100,"column":95043,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":95044},{"ruleId":"prefer-const","severity":2,"message":"'C' is never reassigned. Use 'const' instead.","line":100,"column":95524,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":95525},{"ruleId":"prefer-const","severity":2,"message":"'S' is never reassigned. Use 'const' instead.","line":100,"column":95637,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":95638},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":95656,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":95657},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":95694,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":95695,"fix":{"range":[158104,158179],"text":"const t=o.map((e=>`d${e}: u32`)).join(\", \"),n=o.map((e=>`d${e}`)).join(\", \");"}},{"ruleId":"prefer-const","severity":2,"message":"'P' is never reassigned. Use 'const' instead.","line":100,"column":95816,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":95817},{"ruleId":"prefer-const","severity":2,"message":"'E' is never reassigned. Use 'const' instead.","line":100,"column":95934,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":95935,"fix":{"range":[156791,158570],"text":"const v=i<2?\"\":`\\n  fn i2o_${e}(indices: ${p.indices}) -> u32 {\\n    return ${b.join(\"+\")};\\n  }`,x=(...e)=>0===i?\"0u\":`${p.indices}(${e.map(h).join(\",\")})`,M=(e,t)=>i<2?`${e}`:`${Dt(e,t,i)}`,T={},k=(t,n)=>(()=>{if(p.storage===p.value)return`${e}[${t}]=${n};`;if(\"vec2<u32>\"===p.storage&&\"i32\"===p.value)return`${e}[${t}]=vec2<u32>(u32(${n}), select(0u, 0xFFFFFFFFu, ${n} < 0));`;if(\"vec2<u32>\"===p.storage&&\"u32\"===p.value)return`${e}[${t}]=vec2<u32>(u32(${n}), 0u);`;if(\"u32\"===p.storage&&\"vec4<bool>\"===p.value)return`${e}[${t}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${n}));`;throw new Error(`not supported combination of storage type ${p.storage} and value type ${p.value} yet`)})(),$=t=>(()=>{if(p.storage===p.value)return`${e}[${t}]`;if(\"vec2<u32>\"===p.storage&&\"i32\"===p.value)return`i32(${e}[${t}].x)`;if(\"vec2<u32>\"===p.storage&&\"u32\"===p.value)return`u32(${e}[${t}].x)`;if(\"u32\"===p.storage&&\"vec4<bool>\"===p.value)return`vec4<bool>(bool(${e}[${t}] & 0xFFu), bool(${e}[${t}] & 0xFF00u), bool(${e}[${t}] & 0xFF0000u), bool(${e}[${t}] & 0xFF000000u))`;throw new Error(`not supported combination of storage type ${p.storage} and value type ${p.value} yet`)})(),C=i<2?\"\":`\\n  fn get_${e}ByIndices(indices: ${p.indices}) -> ${d} {\\n    return ${$(`i2o_${e}(indices)`)};\\n  }`,S=i<2?\"\":(()=>{let t=o.map((e=>`d${e}: u32`)).join(\", \"),n=o.map((e=>`d${e}`)).join(\", \");return`\\n  fn get_${e}(${t}) -> ${d} {\\n    return get_${e}ByIndices(${x(n)});\\n  }`})(),P=i<2?\"\":`\\n  fn set_${e}ByIndices(indices: ${p.indices}, value: ${d}) {\\n    ${k(`i2o_${e}(indices)`,\"value\")}\\n  }`,E=i<2?\"\":(()=>{let t=o.map((e=>`d${e}: u32`)).join(\", \"),n=o.map((e=>`d${e}`)).join(\", \");return`\\n  fn set_${e}(${t}, value: ${d}) {\\n    set_${e}ByIndices(${x(n)}, value);\\n  }`})();"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":95953,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":95954},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":95991,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":95992,"fix":{"range":[158401,158476],"text":"const t=o.map((e=>`d${e}: u32`)).join(\", \"),n=o.map((e=>`d${e}`)).join(\", \");"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":96139,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":96140},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":96769,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":96770,"fix":{"range":[159217,159265],"text":"const r=`${n.name}broadcastedIndicesTo${e}Offset`;"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":96846,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":96847,"fix":{"range":[159294,159303],"text":"const a=[];"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":96879,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":96880,"fix":{"range":[159327,159374],"text":"const t=n.indicesGet(\"outputIndices\",e+n.rank-i);"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":97272,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":97273,"fix":{"range":[159720,159731],"text":"const n=t[i];"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":97345,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":97346,"fix":{"range":[159793,159829],"text":"const r=t.slice(0,i).map(h).join(\",\");"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":97689,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":97690,"fix":{"range":[160137,160162],"text":"const n=t.map(h).join(\",\");"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":98358,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":98359},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":98386,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":98387},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":98414,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":98415,"fix":{"range":[160806,160894],"text":"const t=\"number\"==typeof e?e:e[0],n=\"number\"==typeof e?1:e[1],r=\"number\"==typeof e?1:e[2];"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":98981,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":98982,"fix":{"range":[161429,161508],"text":"const a=1===this.normalizedDispatchGroup[1]&&1===this.normalizedDispatchGroup[2];"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":100471,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":100472},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":100511,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":100512,"fix":{"range":[162919,162980],"text":"const n=\"input\"===e.usage?\"read\":\"read_write\",r=e.type.storage;"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":101243,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":101244,"fix":{"range":[163691,163700],"text":"const e=[];"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":101261,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":101262,"fix":{"range":[163704,163731],"text":"const{name:t,type:n,length:r}"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":101268,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":101269,"fix":{"range":[163704,163731],"text":"const{name:t,type:n,length:r}"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":101277,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":101278,"fix":{"range":[163704,163731],"text":"const{name:t,type:n,length:r}"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":101442,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":101443,"fix":{"range":[163890,163929],"text":"const a=null==r||1===r?n:`vec${r}<${n}>`;"}},{"ruleId":"getter-return","severity":2,"message":"Expected to return a value in getter 'variablesInfo'.","line":100,"column":101843,"nodeType":"ReturnStatement","messageId":"expected","endLine":100,"endColumn":101850},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":101854,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":101855,"fix":{"range":[164302,164361],"text":"const e=e=>[12,10,1,6][[\"u32\",\"f16\",\"f32\",\"i32\"].indexOf(e)];"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":102003,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":102004},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":102014,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":102015,"fix":{"range":[164451,164471],"text":"const n=e.length,r=[];"}},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":102044,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":102045},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":102052,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":102053,"fix":{"range":[164492,164514],"text":"const s=n-1-a,i=e[s]||1;"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":102536,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":102537},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":102541,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":102542,"fix":{"range":[164984,164998],"text":"const n=[],r=[];"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":102667,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":102668},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":102680,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":102681},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":102696,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":102697},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":102706,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":102707},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":102731,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":102732},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":102741,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":102742},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":102757,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":102758},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":102782,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":102783},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":102807,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":102808},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":100,"column":102923,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":102924},{"ruleId":"prefer-const","severity":2,"message":"'f' is never reassigned. Use 'const' instead.","line":100,"column":102944,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":102945},{"ruleId":"prefer-const","severity":2,"message":"'g' is never reassigned. Use 'const' instead.","line":100,"column":102970,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":102971},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":104416,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":104417,"fix":{"range":[166864,166881],"text":"const t=Tt.size(s);"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":105809,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":105810,"fix":{"range":[168257,168266],"text":"const n=[];"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":105871,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":105872},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":105876,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":105877,"fix":{"range":[168319,168339],"text":"const n=[],r=e.length;"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":105982,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":105983},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":106002,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":106003},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":106183,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":106184,"fix":{"range":[168631,168640],"text":"const n=[];"}},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":106311,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":106312},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":106323,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":106324},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":106336,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":106337},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":106349,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":106350},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":106376,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":106377,"fix":{"range":[168759,168847],"text":"const o=n[0].dims,l=Tt.size(s),u=Tt.size(i),d=Nt(\"_A\",n[0].dataType,o),c=Vt(\"output\",a,s);"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":107996,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":107997},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":108121,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":108122},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":108185,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":108186},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":108324,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":108325},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":108326,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":108327},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":109261,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":109262},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":109266,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":109267},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":109278,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":109279},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":109289,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":109290},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":109313,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":109314,"fix":{"range":[171709,171784],"text":"const l=[],u=n[0].dims,d=u.length,c=Tt.normalizeAxes(a,d),p=!o&&0===c.length;"}},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":109400,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":109401},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":100,"column":109411,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":109412,"fix":{"range":[171848,171876],"text":"const h=l.length,m=Tt.size(l);"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":109476,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":109477},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":109481,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":109482},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":109508,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":109509},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":109527,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":109528},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":110611,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":110612,"fix":{"range":[173059,173068],"text":"const n=[];"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":110786,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":110787},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":110797,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":110798,"fix":{"range":[173234,173274],"text":"const a=e.inputs,s=1===a.length?n:kn(a,n);"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":111753,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":111754,"fix":{"range":[174201,174210],"text":"const r=[];"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":112331,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":112332,"fix":{"range":[174779,174788],"text":"const r=[];"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":114248,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":114249,"fix":{"range":[176696,176705],"text":"const a=[];"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":114839,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":114840,"fix":{"range":[177287,177296],"text":"const a=[];"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":115371,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":115372},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":115378,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":115379},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":115385,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":115386},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":115392,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":115393},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":115399,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":115400},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":115406,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":115407,"fix":{"range":[177819,177865],"text":"const n=e[0],r=e[1],a=e[2],s=e[3],i=e[4],o=e[5];"}},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":115572,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":115573},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":115584,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":115585},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":115596,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":115597,"fix":{"range":[178020,178060],"text":"const l=n.dims[0],u=n.dims[1],d=n.dims[2];"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":116180,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":116181,"fix":{"range":[178628,178633],"text":"const e"}},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":100,"column":116360,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":116361,"fix":{"range":[178808,178816],"text":"const m=u;"}},{"ruleId":"prefer-const","severity":2,"message":"'g' is never reassigned. Use 'const' instead.","line":100,"column":117145,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":117146,"fix":{"range":[179593,179603],"text":"const g=m+f;"}},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":118755,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":118756},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":118772,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":118773},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":118794,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":118795},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":118813,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":118814},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":118919,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":118920},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":100,"column":118938,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":118939},{"ruleId":"prefer-const","severity":2,"message":"'f' is never reassigned. Use 'const' instead.","line":100,"column":118948,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":118949,"fix":{"range":[181242,181411],"text":"const c=Math.ceil(s/l/u),p=[{type:12,data:t},{type:12,data:n},{type:12,data:r},{type:12,data:a},{type:12,data:d},{type:12,data:c}],h=Ft(e.dataType,l),m=At(1,l),f=[\"type\"];"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":119111,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":119112},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":119141,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":119142},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":119147,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":119148,"fix":{"range":[181559,181643],"text":"const n=Vt(\"x\",e.dataType,e.dims,l),r=[n],a=i?Nt(\"seq_lens\",i.dataType,i.dims):void 0;"}},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":119208,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":119209,"fix":{"range":[181656,181723],"text":"const s=o?Nt(\"total_sequence_length_input\",o.dataType,o.dims):void 0;"}},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":119288,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":119289,"fix":{"range":[181736,181757],"text":"const d=At(e.dataType);"}},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":122360,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":122361},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":122383,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":122384},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":122429,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":122430},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":122438,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":122439},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":122477,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":122478},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":100,"column":122517,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":122518},{"ruleId":"prefer-const","severity":2,"message":"'f' is never reassigned. Use 'const' instead.","line":100,"column":122537,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":122538},{"ruleId":"prefer-const","severity":2,"message":"'g' is never reassigned. Use 'const' instead.","line":100,"column":122583,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":122584},{"ruleId":"prefer-const","severity":2,"message":"'_' is never reassigned. Use 'const' instead.","line":100,"column":122600,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":122601},{"ruleId":"prefer-const","severity":2,"message":"'w' is never reassigned. Use 'const' instead.","line":100,"column":122615,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":122616},{"ruleId":"prefer-const","severity":2,"message":"'y' is never reassigned. Use 'const' instead.","line":100,"column":122620,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":122621},{"ruleId":"prefer-const","severity":2,"message":"'b' is never reassigned. Use 'const' instead.","line":100,"column":122698,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":122699},{"ruleId":"prefer-const","severity":2,"message":"'v' is never reassigned. Use 'const' instead.","line":100,"column":122904,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":122905},{"ruleId":"prefer-const","severity":2,"message":"'x' is never reassigned. Use 'const' instead.","line":100,"column":122930,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":122931,"fix":{"range":[184808,185400],"text":"const u=i+s.kvSequenceLength,d=[s.batchSize,s.numHeads,s.sequenceLength,u],c=e>1&&r,p=s.kvNumHeads?s.kvNumHeads:s.numHeads,h=c?[s.batchSize,p,u,s.headSize]:void 0,m=s.nReps?s.nReps:1,f=0===s.scale?1/Math.sqrt(s.headSize):s.scale,g=zt(s.headSize),_=s.headSize/g,w=12,y={x:Math.ceil(u/w),y:Math.ceil(s.sequenceLength/w),z:s.batchSize*s.numHeads},b=[{type:12,data:s.sequenceLength},{type:12,data:_},{type:12,data:u},{type:12,data:s.numHeads},{type:12,data:s.headSize},{type:1,data:f},{type:12,data:i},{type:12,data:s.kvSequenceLength},{type:12,data:m}],v=c&&r&&Tt.size(r.dims)>0,x=[\"type\",\"type\"];"}},{"ruleId":"prefer-const","severity":2,"message":"'M' is never reassigned. Use 'const' instead.","line":100,"column":123024,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":123025,"fix":{"range":[185472,185523],"text":"const M=[{dims:d,dataType:t.dataType,gpuDataType:0}];"}},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":123320,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":123321},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":123350,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":123351,"fix":{"range":[185768,185838],"text":"const s=Nt(\"q\",t.dataType,t.dims,g),i=[s,Nt(\"key\",n.dataType,n.dims,g)];"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":123396,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":123397,"fix":{"range":[185844,185885],"text":"const e=Nt(\"past_key\",r.dataType,r.dims,g);"}},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":123497,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":123498,"fix":{"range":[185945,185993],"text":"const u=o?Nt(\"seq_lens\",o.dataType,o.dims):void 0;"}},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":123558,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":123559,"fix":{"range":[186006,186073],"text":"const p=l?Nt(\"total_sequence_length_input\",l.dataType,l.dims):void 0;"}},{"ruleId":"prefer-const","severity":2,"message":"'f' is never reassigned. Use 'const' instead.","line":100,"column":123638,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":123639},{"ruleId":"prefer-const","severity":2,"message":"'_' is never reassigned. Use 'const' instead.","line":100,"column":123666,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":123667,"fix":{"range":[186086,186124],"text":"const f=Vt(\"output\",t.dataType,d),_=[f];"}},{"ruleId":"prefer-const","severity":2,"message":"'y' is never reassigned. Use 'const' instead.","line":100,"column":123720,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":123721,"fix":{"range":[186168,186182],"text":"const y=At(1,g);"}},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":127120,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":127121},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":127143,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":127144},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":127163,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":127164},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":127181,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":127182},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":127190,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":127191},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":127229,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":127230},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":100,"column":127269,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":127270},{"ruleId":"prefer-const","severity":2,"message":"'f' is never reassigned. Use 'const' instead.","line":100,"column":127304,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":127305},{"ruleId":"prefer-const","severity":2,"message":"'g' is never reassigned. Use 'const' instead.","line":100,"column":127309,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":127310},{"ruleId":"prefer-const","severity":2,"message":"'_' is never reassigned. Use 'const' instead.","line":100,"column":127397,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":127398},{"ruleId":"prefer-const","severity":2,"message":"'w' is never reassigned. Use 'const' instead.","line":100,"column":127614,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":127615},{"ruleId":"prefer-const","severity":2,"message":"'y' is never reassigned. Use 'const' instead.","line":100,"column":127640,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":127641,"fix":{"range":[189568,190110],"text":"const l=s+a.kvSequenceLength,u=a.nReps?a.nReps:1,d=a.vHiddenSize*u,c=e>1&&r,p=a.kvNumHeads?a.kvNumHeads:a.numHeads,h=c?[a.batchSize,p,l,a.headSize]:void 0,m=[a.batchSize,a.sequenceLength,d],f=12,g={x:Math.ceil(a.vHeadSize/f),y:Math.ceil(a.sequenceLength/f),z:a.batchSize*a.numHeads},_=[{type:12,data:a.sequenceLength},{type:12,data:l},{type:12,data:a.vHeadSize},{type:12,data:a.numHeads},{type:12,data:a.headSize},{type:12,data:d},{type:12,data:s},{type:12,data:a.kvSequenceLength},{type:12,data:u}],w=c&&r&&Tt.size(r.dims)>0,y=[\"type\",\"type\"];"}},{"ruleId":"prefer-const","severity":2,"message":"'b' is never reassigned. Use 'const' instead.","line":100,"column":127716,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":127717,"fix":{"range":[190164,190215],"text":"const b=[{dims:m,dataType:t.dataType,gpuDataType:0}];"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":127993,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":127994},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":128025,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":128026,"fix":{"range":[190441,190509],"text":"const a=Nt(\"probs\",t.dataType,t.dims),s=[a,Nt(\"v\",n.dataType,n.dims)];"}},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":128107,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":128108,"fix":{"range":[190555,190603],"text":"const l=i?Nt(\"seq_lens\",i.dataType,i.dims):void 0;"}},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":128168,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":128169,"fix":{"range":[190616,190683],"text":"const d=o?Nt(\"total_sequence_length_input\",o.dataType,o.dims):void 0;"}},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":128248,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":128249,"fix":{"range":[190696,190730],"text":"const p=[Vt(\"output\",t.dataType,m)];"}},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":131322,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":131323},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":131366,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":131367},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":100,"column":131395,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":131396},{"ruleId":"prefer-const","severity":2,"message":"'f' is never reassigned. Use 'const' instead.","line":100,"column":131418,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":131419},{"ruleId":"prefer-const","severity":2,"message":"'g' is never reassigned. Use 'const' instead.","line":100,"column":131450,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":131451,"fix":{"range":[193770,193910],"text":"const p=Math.min(e.outputCount,1+(i?1:0)+(o?1:0)),h=p>1?u.pastSequenceLength:0,m=h+u.kvSequenceLength,f=l&&Tt.size(l.dims)>0?l:void 0,g=[t,n];"}},{"ruleId":"prefer-const","severity":2,"message":"'_' is never reassigned. Use 'const' instead.","line":100,"column":131538,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":131539,"fix":{"range":[193986,194063],"text":"const _=e.compute(tr(p,t,n,i,f,u,h,d,c),{inputs:g,outputs:p>1?[-1,1]:[-1]})[0];"}},{"ruleId":"prefer-const","severity":2,"message":"'w' is never reassigned. Use 'const' instead.","line":100,"column":131717,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":131718,"fix":{"range":[194165,194177],"text":"const w=[_,r];"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":131868,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":131869},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":131923,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":131924},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":131942,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":131943},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":131962,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":131963},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":131975,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":131976},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":131980,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":131981},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":132067,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":132068},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":132107,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":132108,"fix":{"range":[194316,194749],"text":"const n=[t.batchSize,t.numHeads,t.sequenceLength,t.headSize],r=t.sequenceLength,a=t.inputHiddenSize,s=t.headSize,i=12,o={x:Math.ceil(t.headSize/i),y:Math.ceil(t.sequenceLength/i),z:t.batchSize*t.numHeads},l=[e.inputs[0],e.inputs[1],e.inputs[2]],u=[{type:12,data:r},{type:12,data:a},{type:12,data:s},{type:12,data:t.numHeads},{type:12,data:t.headSize},{type:12,data:t.hiddenSize},{type:12,data:t.hiddenSize+t.hiddenSize+t.vHiddenSize}];"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":132640,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":132641},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":132673,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":132674},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":132706,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":132707},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":132739,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":132740},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":132777,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":132778},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":132816,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":132817},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":132853,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":132854,"fix":{"range":[195088,195322],"text":"const t=Vt(\"output_q\",l[0].dataType,n),r=Vt(\"output_k\",l[0].dataType,n),a=Vt(\"output_v\",l[0].dataType,n),s=Nt(\"input\",l[0].dataType,l[0].dims),o=Nt(\"weight\",l[1].dataType,l[1].dims),u=Nt(\"bias\",l[2].dataType,l[2].dims),d=s.type.storage;"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":135534,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":135535},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":135552,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":135553,"fix":{"range":[197982,198019],"text":"const n=Zn(e.inputs,t),[r,a,s]=ar(e,n);"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":135554,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":135555,"fix":{"range":[197982,198019],"text":"const n=Zn(e.inputs,t),[r,a,s]=ar(e,n);"}},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":135556,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":135557,"fix":{"range":[197982,198019],"text":"const n=Zn(e.inputs,t),[r,a,s]=ar(e,n);"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":135764,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":135765,"fix":{"range":[198212,198390],"text":"const n=(e,t,n)=>{let r=t.length;if(r!==e.length)throw new Error(`${n}: num dimensions != ${r}`);t.forEach(((t,r)=>{if(t!==e[r])throw new Error(`${n}: dim[${r}] do not match`)}))};"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":135780,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":135781,"fix":{"range":[198228,198243],"text":"const r=t.length;"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":135965,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":135966,"fix":{"range":[198413,198571],"text":"const r=\"NHWC\"===t.format?t.spatial?e[0].dims.slice(-1):e[0].dims.slice(-1).concat(e[0].dims.slice(1,e[0].dims.length-1)):e[0].dims.slice(1,t.spatial?2:void 0);"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":136438,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":136439},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":136448,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":136449},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":136457,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":136458},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":136462,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":136463},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":136474,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":136475},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":136498,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":136499},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":136527,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":136528},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":136542,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":136543},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":136546,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":136547},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":136561,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":136562},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":136597,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":136598},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":136637,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":136638},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":100,"column":136676,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":136677},{"ruleId":"prefer-const","severity":2,"message":"'f' is never reassigned. Use 'const' instead.","line":100,"column":136720,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":136721},{"ruleId":"prefer-const","severity":2,"message":"'g' is never reassigned. Use 'const' instead.","line":100,"column":136763,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":136764},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":138321,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":138322},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":138335,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":138336},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":138340,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":138341},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":138922,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":138923},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":138934,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":138935},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":138949,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":138950},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":138964,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":138965},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":138980,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":138981},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":139000,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":139001},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":139021,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":139022},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":139044,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":139045,"fix":{"range":[201370,201517],"text":"const t=e[0].dims,n=e[0].dims[2],r=Tt.size(t)/4,a=e[0].dataType,s=Nt(\"input\",a,t,4),i=Nt(\"bias\",a,[n],4),o=Nt(\"residual\",a,t,4),l=Vt(\"output\",a,t,4);"}},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":139630,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":139631},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":139694,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":139695},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":139720,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":139721},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":139747,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":139748,"fix":{"range":[202142,202232],"text":"const u=Nt(\"inputData\",n,[o],4),d=Vt(\"outputData\",r,[o],4),c=[{name:\"vec_size\",type:\"u32\"}];"}},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":140094,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":140095,"fix":{"range":[202542,202594],"text":"const l=[{type:12,data:Math.ceil(Tt.size(e.dims)/4)}];"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":141120,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":141121},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":141149,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":141150},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":141488,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":141489},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":141506,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":141507,"fix":{"range":[203936,203985],"text":"const n=t||Tr(e.inputs),r=At(e.inputs[0].dataType);"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":141971,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":141972,"fix":{"range":[204419,204450],"text":"const n=At(e.inputs[0].dataType);"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":142754,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":142755,"fix":{"range":[205202,205233],"text":"const t=At(e.inputs[0].dataType);"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":142952,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":142953,"fix":{"range":[205400,205431],"text":"const t=At(e.inputs[0].dataType);"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":143099,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":143100,"fix":{"range":[205547,205578],"text":"const n=At(e.inputs[0].dataType);"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":143477,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":143478,"fix":{"range":[205925,205956],"text":"const t=At(e.inputs[0].dataType);"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":143706,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":143707,"fix":{"range":[206154,206185],"text":"const n=At(e.inputs[0].dataType);"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":144527,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":144528,"fix":{"range":[206975,207006],"text":"const t=At(e.inputs[0].dataType);"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":144645,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":144646,"fix":{"range":[207093,207124],"text":"const n=At(e.inputs[0].dataType);"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":145350,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":145351,"fix":{"range":[207798,207829],"text":"const n=At(e.inputs[0].dataType);"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":145876,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":145877,"fix":{"range":[208324,208348],"text":"const t=e[0].dims.slice();"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":145912,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":145913},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":145952,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":145953},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":145996,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":145997},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":146029,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":146030},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":146044,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":146045,"fix":{"range":[208360,208516],"text":"const n=Nt(\"input\",e[0].dataType,e[0].dims,4),r=Nt(\"bias\",e[0].dataType,[e[0].dims[2]],4),a=Vt(\"output\",e[0].dataType,t,4),s=Tt.size(t)/4,i=Ft(e[0].dataType);"}},{"ruleId":"prefer-const","severity":2,"message":"'f' is never reassigned. Use 'const' instead.","line":100,"column":147079,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":147080},{"ruleId":"prefer-const","severity":2,"message":"'g' is never reassigned. Use 'const' instead.","line":100,"column":147111,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":147112},{"ruleId":"prefer-const","severity":2,"message":"'_' is never reassigned. Use 'const' instead.","line":100,"column":147138,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":147139},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":147180,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":147181},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":147197,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":147198},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":147214,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":147215},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":147247,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":147248,"fix":{"range":[209628,209732],"text":"const e=1===Tt.size(t),r=1===Tt.size(n),a=t.length>0&&t[t.length-1]%4==0,s=n.length>0&&n[n.length-1]%4==0;"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":148173,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":148174,"fix":{"range":[210621,211245],"text":"const e=(e,t,n=\"\")=>{let r=`aData[indexA${t}][componentA${t}]`,a=`bData[indexB${t}][componentB${t}]`;return`\\n            let outputIndices${t} = ${f.offsetToIndices(`global_idx * 4u + ${t}u`)};\\n            let offsetA${t} = ${g.broadcastedIndicesToOffset(`outputIndices${t}`,f)};\\n            let offsetB${t} = ${_.broadcastedIndicesToOffset(`outputIndices${t}`,f)};\\n            let indexA${t} = offsetA${t} / 4u;\\n            let indexB${t} = offsetB${t} / 4u;\\n            let componentA${t} = offsetA${t} % 4u;\\n            let componentB${t} = offsetB${t} % 4u;\\n            ${e}[${t}] = ${n}(${p(r,a)});\\n          `};"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":148192,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":148193},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":148230,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":148231,"fix":{"range":[210640,210720],"text":"const r=`aData[indexA${t}][componentA${t}]`,a=`bData[indexB${t}][componentB${t}]`;"}},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":149542,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":149543},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":149609,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":149610},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":149625,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":149626,"fix":{"range":[212073,212110],"text":"const e=Mt.calcShape(n.dims,r.dims,!1);"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":149749,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":149750},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":149771,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":149772},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":149793,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":149794},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":149841,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":149842,"fix":{"range":[212197,212341],"text":"const t=1===Tt.size(n.dims),a=1===Tt.size(r.dims),s=n.dims.length>0&&n.dims[n.dims.length-1]%4==0,i=r.dims.length>0&&r.dims[r.dims.length-1]%4==0;"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":149969,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":149970,"fix":{"range":[212417,212450],"text":"const t=n.dims[n.dims.length-e]??1;"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":150769,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":150770,"fix":{"range":[213217,213284],"text":"const t=Nt(\"input\",e.inputs[0].dataType,e.inputs[0].dims).type.value;"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":152143,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":152144},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":152150,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":152151},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":152163,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":152164,"fix":{"range":[214591,214631],"text":"const n=e[0],r=n.dataType,a=n.dims.length;"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":152745,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":152746},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":152756,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":152757,"fix":{"range":[215193,215213],"text":"const n=e.length,r=[];"}},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":152786,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":152787,"fix":{"range":[215234,215297],"text":"const s=t.setByOffset(\"global_idx\",e[a].getByIndices(\"indices\"));"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":153031,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":153032},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":153044,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":153045},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":153066,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":153067},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":153092,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":153093},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":153097,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":153098},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":153102,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":153103},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":153342,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":153343},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":153368,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":153369},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":153396,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":153397,"fix":{"range":[215790,215937],"text":"const c=Vt(\"output\",r,n.length),p=c.indicesGet(\"indices\",t),h=Array.from(Array(s.length).keys()).map((e=>`uniforms.sizeInConcatAxis${e}`)).join(\",\");"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":154252,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":154253},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":154263,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":154264},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":154275,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":154276,"fix":{"range":[216700,216763],"text":"const n=e.inputs,r=n[0].dims,a=Tt.normalizeAxis(t.axis,r.length);"}},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":154323,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":154324,"fix":{"range":[216771,216787],"text":"const s=r.slice();"}},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":154397,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":154398,"fix":{"range":[216845,216884],"text":"const i=n.filter((e=>Tt.size(e.dims)>0));"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":155706,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":155707,"fix":{"range":[218154,218178],"text":"const t=e?.activation||\"\";"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":155752,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":155753,"fix":{"range":[218200,218239],"text":"const[n,r]=e?.activation_params||[.2,.5];"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":155754,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":155755,"fix":{"range":[218200,218239],"text":"const[n,r]=e?.activation_params||[.2,.5];"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":155842,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":155843,"fix":{"range":[218290,218329],"text":"const[n,r]=e?.activation_params||[Ct,St];"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":155844,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":155845,"fix":{"range":[218290,218329],"text":"const[n,r]=e?.activation_params||[Ct,St];"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":155942,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":155943,"fix":{"range":[218390,218425],"text":"const[n]=e?.activation_params||[.01];"}},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":158025,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":158026},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":158037,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":158038},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":158049,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":158050},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":158057,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":158058},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":158065,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":158066},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":158074,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":158075,"fix":{"range":[220473,220535],"text":"const l=t[1]*e[1],u=t[0]*e[0],d=a?l:s,c=a?s:l,p=d/t[0],h=s/t[1];"}},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":161442,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":161443},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":161454,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":161455},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":161466,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":161467},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":161474,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":161475,"fix":{"range":[223890,223934],"text":"const u=e[1]*t[1],d=e[0]*t[0],c=a?u:s,p=a?s:u;"}},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":161724,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":161725},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":100,"column":161733,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":161734},{"ruleId":"prefer-const","severity":2,"message":"'f' is never reassigned. Use 'const' instead.","line":100,"column":161742,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":161743},{"ruleId":"prefer-const","severity":2,"message":"'g' is never reassigned. Use 'const' instead.","line":100,"column":161751,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":161752,"fix":{"range":[224172,228436],"text":"const h=p/t[1],m=c/t[0],f=s/t[1],g=l?`\\n    let localRow = i32(localId.y);\\n    let localCol = i32(localId.x);\\n    let globalRowStart = i32(workgroupId.y) * ${u};\\n    let globalColStart = i32(workgroupId.x) * ${d};\\n\\n    // Loop over shared dimension.\\n    for (var t = 0; t < num_tiles; t = t + 1) {\\n      // Load one tile of A into local memory.\\n      for (var inputRow = localRow; inputRow < ${p}; inputRow = inputRow + ${t[1]}) {\\n        for (var inputCol = localCol; inputCol < ${c}; inputCol = inputCol + ${t[0]}) {\\n          ${Ba(a,r)}\\n        }\\n      }\\n      // Load one tile of B into local memory.\\n      for (var inputRow = localRow; inputRow < ${s}; inputRow = inputRow + ${t[1]}) {\\n            for (var inputCol = localCol; inputCol < ${d}; inputCol = inputCol + ${t[0]}) {\\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch,\\n            kStart + inputRow,\\n            globalColStart + inputCol${r?\", batchIndices\":\"\"});\\n        }\\n      }\\n      kStart = kStart + tileInner;\\n      workgroupBarrier();\\n\\n      // Compute acc values for a single thread.\\n      var BCached : array<${n}, colPerThread>;\\n      for (var k = 0; k < tileInner; k = k + 1) {\\n        for (var inner = 0; inner < colPerThread; inner = inner + 1) {\\n          BCached[inner] = mm_Bsub[k][localCol + inner * ${t[0]}];\\n        }\\n        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\n          let ACached = ${a?`mm_Asub[k][localRow + innerRow * ${t[1]}];`:`mm_Asub[localRow + innerRow * ${t[1]}][k];`}\\n          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\n            acc[innerRow][innerCol] = acc[innerRow][innerCol] +\\n                ACached * BCached[innerCol];\\n          }\\n        }\\n      }\\n      workgroupBarrier();\\n    }\\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\n      let gRow = globalRowStart + localRow + innerRow * ${t[1]};\\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\n        let gCol = globalColStart + localCol + innerCol * ${t[0]};\\n        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\\n      }\\n    }\\n    `:`\\nlet tileRow = i32(localId.y) * rowPerThread;\\nlet tileCol = i32(localId.x) * colPerThread;\\n\\nlet globalRow = i32(globalId.y) * rowPerThread;\\nlet globalCol = i32(globalId.x) * colPerThread;\\nlet globalRowStart = i32(workgroupId.y) * ${u};\\n\\nlet tileRowA = i32(localId.y) * ${h};\\nlet tileColA = i32(localId.x) * ${m};\\nlet tileRowB = i32(localId.y) * ${f};\\n// Loop over shared dimension.\\nfor (var t = 0; t < num_tiles; t = t + 1) {\\n  // Load one tile of A into local memory.\\n  for (var innerRow = 0; innerRow < ${h}; innerRow = innerRow + 1) {\\n    for (var innerCol = 0; innerCol < ${m}; innerCol = innerCol + 1) {\\n      let inputRow = tileRowA + innerRow;\\n      let inputCol = tileColA + innerCol;\\n      ${Ba(a,r)}\\n    }\\n  }\\n\\n  // Load one tile of B into local memory.\\n  for (var innerRow = 0; innerRow < ${f}; innerRow = innerRow + 1) {\\n    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\n      let inputRow = tileRowB + innerRow;\\n      let inputCol = tileCol + innerCol;\\n      mm_Bsub[inputRow][inputCol] = mm_readB(batch,\\n        kStart + inputRow,\\n        globalCol + innerCol${r?\", batchIndices\":\"\"});\\n    }\\n  }\\n  kStart = kStart + tileInner;\\n  workgroupBarrier();\\n\\n  // Compute acc values for a single thread.\\n  var BCached : array<${n}, colPerThread>;\\n  for (var k = 0; k < tileInner; k = k + 1) {\\n    for (var inner = 0; inner < colPerThread; inner = inner + 1) {\\n      BCached[inner] = mm_Bsub[k][tileCol + inner];\\n    }\\n\\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\n      ${La(a)}\\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\n        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];\\n      }\\n    }\\n  }\\n\\n  workgroupBarrier();\\n}\\n\\nfor (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\n  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\n    mm_write(batch, globalRow + innerRow, globalCol + innerCol,\\n        acc[innerRow][innerCol]);\\n  }\\n}\\n`;"}},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":166809,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":166810},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":166811,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":166812},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":166813,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":166814},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":166819,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":166820},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":166821,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":166822},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":166823,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":166824},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":166825,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":166826},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":166830,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":166831},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":100,"column":166840,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":166841},{"ruleId":"prefer-const","severity":2,"message":"'f' is never reassigned. Use 'const' instead.","line":100,"column":166850,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":166851,"fix":{"range":[229257,229325],"text":"const[i,o,l]=a,[u,d,c,p]=r,h=Ut(i,l),m=Ut(o,l),f=Ft(r[0].type.tensor);"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":167144,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":167145},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":167153,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":167154},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":167798,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":167799},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":167807,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":167808},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":168646,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":168647},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":168658,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":168659},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":168670,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":168671},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":168686,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":168687},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":168702,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":168703},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":168734,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":168735},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":168747,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":168748},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":168763,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":168764},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":100,"column":168779,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":168780},{"ruleId":"prefer-const","severity":2,"message":"'f' is never reassigned. Use 'const' instead.","line":100,"column":168795,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":168796},{"ruleId":"prefer-const","severity":2,"message":"'g' is never reassigned. Use 'const' instead.","line":100,"column":168812,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":168813},{"ruleId":"prefer-const","severity":2,"message":"'_' is never reassigned. Use 'const' instead.","line":100,"column":168835,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":168836},{"ruleId":"prefer-const","severity":2,"message":"'w' is never reassigned. Use 'const' instead.","line":100,"column":168845,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":168846},{"ruleId":"prefer-const","severity":2,"message":"'y' is never reassigned. Use 'const' instead.","line":100,"column":168918,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":168919},{"ruleId":"prefer-const","severity":2,"message":"'b' is never reassigned. Use 'const' instead.","line":100,"column":168926,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":168927},{"ruleId":"prefer-const","severity":2,"message":"'v' is never reassigned. Use 'const' instead.","line":100,"column":168941,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":168942},{"ruleId":"prefer-const","severity":2,"message":"'x' is never reassigned. Use 'const' instead.","line":100,"column":168952,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":168953},{"ruleId":"prefer-const","severity":2,"message":"'M' is never reassigned. Use 'const' instead.","line":100,"column":168967,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":168968},{"ruleId":"prefer-const","severity":2,"message":"'T' is never reassigned. Use 'const' instead.","line":100,"column":168978,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":168979},{"ruleId":"prefer-const","severity":2,"message":"'k' is never reassigned. Use 'const' instead.","line":100,"column":168990,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":168991,"fix":{"range":[231094,231494],"text":"const i=e[0].dims,o=e[1].dims,l=i.slice(0,-2),u=o.slice(0,-2),d=r?r.slice(0,-2):n.slice(0,-2),c=Tt.size(d),p=i[i.length-2],h=i[i.length-1],m=o[o.length-1],f=h%4==0&&m%4==0,g=p<=8?[4,1,1]:[4,4,1],_=[8,8,1],w=[Math.ceil(m/_[0]/g[0]),Math.ceil(p/_[1]/g[1]),Math.ceil(c/_[2]/g[2])],y=f?4:1,b=[...l,p,h/y],v=b.length,x=[...u,h,m/y],M=x.length,T=[c,p,m/y],k=[{type:6,data:p},{type:6,data:m},{type:6,data:h}];"}},{"ruleId":"prefer-const","severity":2,"message":"'$' is never reassigned. Use 'const' instead.","line":100,"column":169075,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":169076},{"ruleId":"prefer-const","severity":2,"message":"'C' is never reassigned. Use 'const' instead.","line":100,"column":169093,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":169094,"fix":{"range":[231523,231558],"text":"const $=[\"rank\",\"rank\"],C=e.length>2;"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":169408,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":169409},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":169419,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":169420},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":169455,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":169456},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":169475,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":169476},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":169503,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":169504},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":169531,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":169532},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":169571,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":169572,"fix":{"range":[231856,232031],"text":"const r=d.length,s=jt(\"batchDims\",e[0].dataType,r,1),i=Ft(e[0].dataType),o=Nt(\"a\",e[0].dataType,v,y),c=Nt(\"b\",e[1].dataType,M,y),p=Vt(\"result\",e[0].dataType,T.length,y),h=[o,c];"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":169589,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":169590,"fix":{"range":[232037,232049],"text":"const t=a?y:1;"}},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":100,"column":169653,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":169654,"fix":{"range":[232101,232203],"text":"const m=[{name:\"dim_a_outer\",type:\"i32\"},{name:\"dim_b_outer\",type:\"i32\"},{name:\"dim_inner\",type:\"i32\"}];"}},{"ruleId":"prefer-const","severity":2,"message":"'w' is never reassigned. Use 'const' instead.","line":100,"column":169763,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":169764},{"ruleId":"prefer-const","severity":2,"message":"'b' is never reassigned. Use 'const' instead.","line":100,"column":169783,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":169784},{"ruleId":"prefer-const","severity":2,"message":"'x' is never reassigned. Use 'const' instead.","line":100,"column":169806,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":169807,"fix":{"range":[232211,232290],"text":"const w=Ft(p.type.tensor),b=$a(t,p.type.value,w),x=Ra(y,C,b,[s,o,c,p],[l,u,d],a);"}},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":170088,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":170089},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":170214,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":170215},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":170440,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":170441},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":170498,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":170499},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":100,"column":170556,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":170557},{"ruleId":"prefer-const","severity":2,"message":"'f' is never reassigned. Use 'const' instead.","line":100,"column":170572,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":170573},{"ruleId":"prefer-const","severity":2,"message":"'g' is never reassigned. Use 'const' instead.","line":100,"column":170588,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":170589},{"ruleId":"prefer-const","severity":2,"message":"'_' is never reassigned. Use 'const' instead.","line":100,"column":171730,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":171731},{"ruleId":"prefer-const","severity":2,"message":"'w' is never reassigned. Use 'const' instead.","line":100,"column":172122,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":172123},{"ruleId":"prefer-const","severity":2,"message":"'y' is never reassigned. Use 'const' instead.","line":100,"column":172351,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":172352},{"ruleId":"prefer-const","severity":2,"message":"'b' is never reassigned. Use 'const' instead.","line":100,"column":172361,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":172362},{"ruleId":"prefer-const","severity":2,"message":"'v' is never reassigned. Use 'const' instead.","line":100,"column":172375,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":172376},{"ruleId":"prefer-const","severity":2,"message":"'x' is never reassigned. Use 'const' instead.","line":100,"column":172389,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":172390,"fix":{"range":[232536,234853],"text":"const d=e?\"\\n    let coord = vec4<i32>(batch, xRow, xCol, xCh);\\n    \":\"\\n    let coord = vec4<i32>(batch, xCh, xRow, xCol);\\n    \",c=e?\"\\n    let coords = vec4<i32>(\\n      batch,\\n      row / outWidth,\\n      row % outWidth,\\n      col);\\n    \":\"\\n    let coords = vec4<i32>(\\n      batch,\\n      row,\\n      col / outWidth,\\n      col % outWidth);\\n    \",p=e?\"i32(uniforms.x_shape[1])\":\"i32(uniforms.x_shape[2])\",h=e?\"i32(uniforms.x_shape[2])\":\"i32(uniforms.x_shape[3])\",m=e?\"row\":\"col\",f=e?\"col\":\"row\",g=`\\n    let inChannels = i32(uniforms.w_shape[2]);\\n    let outWidth = ${e?\"i32(uniforms.result_shape[2])\":\"i32(uniforms.result_shape[3])\"};\\n    let outRow = ${m} / outWidth;\\n    let outCol = ${m} % outWidth;\\n\\n    let WRow = ${f} / (i32(uniforms.w_shape[1]) * inChannels);\\n    let WCol = ${f} / inChannels % i32(uniforms.w_shape[1]);\\n    let xRow = outRow * uniforms.stride[0] + uniforms.dilation[0] * WRow - uniforms.pad[0];\\n    let xCol = outCol * uniforms.stride[1] + uniforms.dilation[1] * WCol - uniforms.pad[1];\\n    let xCh = ${f} % inChannels;\\n    var resData = ${Ea(i,u)}(0.0);\\n    // The bounds checking is always needed since we use it to pad zero for\\n    // the 'same' padding type.\\n    if (xRow >= 0 && xRow < ${p} && xCol >= 0 && xCol < ${h}) {\\n      ${d}\\n      let xIndex = getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape));\\n      ${(e=>{switch(e){case 1:return\"resData = x[xIndex];\";case 3:return`resData = vec3<${u}>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);`;case 4:return\"resData = x[xIndex / 4];\";default:throw new Error(`innerElementSize ${e} is not supported.`)}})(i)}\\n    }\\n    return resData;`,_=e?t&&r?`\\n    let col = colIn * ${i};\\n    ${g}`:`\\n    let col = colIn * ${i};\\n    if (row < uniforms.dim_a_outer && col < uniforms.dim_inner) {\\n      ${g}\\n    }\\n    return ${Ea(i,u)}(0.0);`:r&&n?`\\n    let col = colIn * ${i};\\n    ${g}`:`\\n    let col = colIn * ${i};\\n    if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {\\n      ${g}\\n    }\\n    return ${Ea(i,u)}(0.0);`,w=`${(e=>{switch(e){case 1:return\"return w[row * i32(uniforms.w_shape[3]) + colIn];\";case 4:return\"return w[row * i32(uniforms.w_shape[3]) / 4 + colIn];\";default:throw new Error(`innerElementSize ${e} is not supported.`)}})(o)}`,y=Ea(l,u),b=Ea(e?i:o,u),v=Ea(e?o:i,u),x=$a(s,y,u);"}},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":173049,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":173050},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":173069,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":173070},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":173099,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":173100},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":173106,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":173107},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":173120,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":173121},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":100,"column":173134,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":173135},{"ruleId":"prefer-const","severity":2,"message":"'f' is never reassigned. Use 'const' instead.","line":100,"column":173148,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":173149},{"ruleId":"prefer-const","severity":2,"message":"'g' is never reassigned. Use 'const' instead.","line":100,"column":173178,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":173179},{"ruleId":"prefer-const","severity":2,"message":"'_' is never reassigned. Use 'const' instead.","line":100,"column":173188,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":173189},{"ruleId":"prefer-const","severity":2,"message":"'w' is never reassigned. Use 'const' instead.","line":100,"column":173198,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":173199},{"ruleId":"prefer-const","severity":2,"message":"'y' is never reassigned. Use 'const' instead.","line":100,"column":173208,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":173209},{"ruleId":"prefer-const","severity":2,"message":"'b' is never reassigned. Use 'const' instead.","line":100,"column":173231,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":173232,"fix":{"range":[235497,235756],"text":"const u=\"NHWC\"===t.format,d=u?e[0].dims[3]:e[0].dims[1],c=n[0],p=u?n[2]:n[3],h=u?n[1]:n[2],m=u?n[3]:n[1],f=u&&(d%4==0||d%3==0)&&m%4==0,g=u?m:p*h,_=u?p*h:m,w=[8,8,1],y=r<=8?[4,1,1]:[4,4,1],b=[Math.ceil(g/w[0]/y[0]),Math.ceil(_/w[1]/y[1]),Math.ceil(c/w[2]/y[2])];"}},{"ruleId":"prefer-const","severity":2,"message":"'v' is never reassigned. Use 'const' instead.","line":100,"column":173365,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":173366},{"ruleId":"prefer-const","severity":2,"message":"'x' is never reassigned. Use 'const' instead.","line":100,"column":173385,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":173386},{"ruleId":"prefer-const","severity":2,"message":"'M' is never reassigned. Use 'const' instead.","line":100,"column":173397,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":173398},{"ruleId":"prefer-const","severity":2,"message":"'T' is never reassigned. Use 'const' instead.","line":100,"column":173409,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":173410},{"ruleId":"prefer-const","severity":2,"message":"'k' is never reassigned. Use 'const' instead.","line":100,"column":173433,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":173434},{"ruleId":"prefer-const","severity":2,"message":"'$' is never reassigned. Use 'const' instead.","line":100,"column":173442,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":173443},{"ruleId":"prefer-const","severity":2,"message":"'C' is never reassigned. Use 'const' instead.","line":100,"column":173451,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":173452},{"ruleId":"prefer-const","severity":2,"message":"'S' is never reassigned. Use 'const' instead.","line":100,"column":173460,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":173461},{"ruleId":"prefer-const","severity":2,"message":"'P' is never reassigned. Use 'const' instead.","line":100,"column":173480,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":173481,"fix":{"range":[235813,236070],"text":"const v=f?u&&d%4!=0?3:4:1,x=w[1]*y[1],M=w[0]*y[0],T=Math.max(w[0]*v,w[1]),k=r%x==0,$=a%M==0,C=s%T==0,S=f?[v,4,4]:[1,1,1],P=[{type:6,data:r},{type:6,data:a},{type:6,data:s},{type:6,data:[t.pads[0],t.pads[1]]},{type:6,data:t.strides},{type:6,data:t.dilations}];"}},{"ruleId":"prefer-const","severity":2,"message":"'E' is never reassigned. Use 'const' instead.","line":100,"column":173665,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":173666,"fix":{"range":[236113,236135],"text":"const E=[\"rank\",\"rank\"];"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":174014,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":174015,"fix":{"range":[236462,236671],"text":"const a=[{name:\"dim_a_outer\",type:\"i32\"},{name:\"dim_b_outer\",type:\"i32\"},{name:\"dim_inner\",type:\"i32\"},{name:\"pad\",type:\"i32\",length:2},{name:\"stride\",type:\"i32\",length:2},{name:\"dilation\",type:\"i32\",length:2}];"}},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":174231,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":174232},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":174239,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":174240},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":174650,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":174651},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":174744,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":174745},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":174794,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":174795,"fix":{"range":[237242,237292],"text":"const t=Nt(\"bias\",e[2].dataType,e[2].dims.length,s);"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":175717,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":175718,"fix":{"range":[238165,238179],"text":"const a=Ua(t,r);"}},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":175816,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":175817,"fix":{"range":[238264,238280],"text":"const s=[0,0,0,n];"}},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":100,"column":176050,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":176051,"fix":{"range":[238498,238538],"text":"const m=Ha([t,n,r,1],[o,l,u],1,[a,s,i],e);"}},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":100,"column":176288,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":176289,"fix":{"range":[238736,238779],"text":"const m=Ha([t,n,r,1],[o,l,u],1,[a,s,i],e[0]);"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":176476,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":176477},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":100,"column":176490,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":176491},{"ruleId":"prefer-const","severity":2,"message":"'f' is never reassigned. Use 'const' instead.","line":100,"column":176504,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":176505},{"ruleId":"prefer-const","severity":2,"message":"'g' is never reassigned. Use 'const' instead.","line":100,"column":176518,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":176519},{"ruleId":"prefer-const","severity":2,"message":"'_' is never reassigned. Use 'const' instead.","line":100,"column":176536,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":176537},{"ruleId":"prefer-const","severity":2,"message":"'w' is never reassigned. Use 'const' instead.","line":100,"column":176542,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":176543},{"ruleId":"prefer-const","severity":2,"message":"'y' is never reassigned. Use 'const' instead.","line":100,"column":176560,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":176561},{"ruleId":"prefer-const","severity":2,"message":"'b' is never reassigned. Use 'const' instead.","line":100,"column":176566,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":176567,"fix":{"range":[238924,239036],"text":"const e=(c-1)*a+o-t,m=(p-1)*s+l-n,f=(h-1)*i+u-r,g=Math.floor(e/2),_=e-g,w=Math.floor(m/2),y=m-w,b=Math.floor(f/2);"}},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":176867,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":176868},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":176870,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":176871},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":100,"column":176872,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":176873},{"ruleId":"prefer-const","severity":2,"message":"'f' is never reassigned. Use 'const' instead.","line":100,"column":176874,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":176875},{"ruleId":"prefer-const","severity":2,"message":"'g' is never reassigned. Use 'const' instead.","line":100,"column":176880,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":176881},{"ruleId":"prefer-const","severity":2,"message":"'_' is never reassigned. Use 'const' instead.","line":100,"column":176882,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":176883},{"ruleId":"prefer-const","severity":2,"message":"'w' is never reassigned. Use 'const' instead.","line":100,"column":176884,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":176885},{"ruleId":"prefer-const","severity":2,"message":"'y' is never reassigned. Use 'const' instead.","line":100,"column":176894,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":176895},{"ruleId":"prefer-const","severity":2,"message":"'b' is never reassigned. Use 'const' instead.","line":100,"column":176896,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":176897},{"ruleId":"prefer-const","severity":2,"message":"'v' is never reassigned. Use 'const' instead.","line":100,"column":176898,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":176899},{"ruleId":"prefer-const","severity":2,"message":"'x' is never reassigned. Use 'const' instead.","line":100,"column":176907,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":176908},{"ruleId":"prefer-const","severity":2,"message":"'M' is never reassigned. Use 'const' instead.","line":100,"column":176917,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":176918},{"ruleId":"prefer-const","severity":2,"message":"'T' is never reassigned. Use 'const' instead.","line":100,"column":176927,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":176928},{"ruleId":"prefer-const","severity":2,"message":"'k' is never reassigned. Use 'const' instead.","line":100,"column":176946,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":176947},{"ruleId":"prefer-const","severity":2,"message":"'$' is never reassigned. Use 'const' instead.","line":100,"column":176957,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":176958},{"ruleId":"prefer-const","severity":2,"message":"'C' is never reassigned. Use 'const' instead.","line":100,"column":176969,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":176970},{"ruleId":"prefer-const","severity":2,"message":"'S' is never reassigned. Use 'const' instead.","line":100,"column":176980,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":176981},{"ruleId":"prefer-const","severity":2,"message":"'P' is never reassigned. Use 'const' instead.","line":100,"column":177007,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":177008},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":177500,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":177501},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":177521,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":177522},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":177575,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":177576,"fix":{"range":[239948,240072],"text":"const i=\"channelsLast\"===s,o=(i?e[0].dims[3]:e[0].dims[1],{x:n.map(((e,t)=>t))}),l=[Math.ceil(qa(o.x.map((e=>n[e])))/64),1,1];"}},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":177684,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":177685,"fix":{"range":[240132,240252],"text":"const u=[{type:12,data:Tt.size(n)},{type:12,data:r},{type:12,data:a},{type:12,data:t.strides},{type:12,data:t.dilations}];"}},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":177847,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":177848},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":177865,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":177866,"fix":{"range":[240295,240332],"text":"const d=[\"rank\",\"rank\"],c=3===e.length;"}},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":178175,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":178176,"fix":{"range":[240623,240860],"text":"const o=[{name:\"output_size\",type:\"u32\"},{name:\"filter_dims\",type:\"u32\",length:r.length},{name:\"pads\",type:\"u32\",length:a.length},{name:\"strides\",type:\"u32\",length:t.strides.length},{name:\"dilations\",type:\"u32\",length:t.dilations.length}];"}},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":178420,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":178421},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":178440,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":178441},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":178483,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":178484},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":178526,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":178527},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":178534,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":178535},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":178589,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":178590,"fix":{"range":[241037,241087],"text":"const t=Nt(\"bias\",e[2].dataType,e[2].dims.length,1);"}},{"ruleId":"prefer-const","severity":2,"message":"'f' is never reassigned. Use 'const' instead.","line":100,"column":178783,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":178784},{"ruleId":"prefer-const","severity":2,"message":"'g' is never reassigned. Use 'const' instead.","line":100,"column":178793,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":178794,"fix":{"range":[241231,241257],"text":"const f=Ea(1,l),g=$a(t,f,l);"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":184540,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":184541},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":184553,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":184554},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":184590,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":184591},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":184602,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":184603},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":184614,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":184615},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":184634,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":184635},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":184648,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":184649},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":184660,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":184661},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":184678,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":184679},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":184693,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":184694,"fix":{"range":[246988,247290],"text":"const a=e.length>2,s=a?\"value += b[output_channel];\":\"\",i=e[0].dims,o=e[1].dims,l=\"NHWC\"===t.format,u=l?n[3]:n[1],d=u/t.group,c=l&&d>=4?zt(u):1,p=Tt.size(n)/c,h=[{type:12,data:p},{type:12,data:t.dilations},{type:12,data:[t.strides[0],t.strides[1]]},{type:12,data:[t.pads[0],t.pads[1]]},{type:12,data:d}];"}},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":100,"column":184891,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":184892,"fix":{"range":[247339,247386],"text":"const m=a?[\"rank\",\"rank\",\"rank\"]:[\"rank\",\"rank\"];"}},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":185203,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":185204},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":185243,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":185244},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":185263,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":185264},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":185286,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":185287},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":100,"column":185319,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":185320},{"ruleId":"prefer-const","severity":2,"message":"'f' is never reassigned. Use 'const' instead.","line":100,"column":185354,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":185355,"fix":{"range":[247651,247814],"text":"const u=Vt(\"output\",e[0].dataType,n.length,c),d=Ft(u.type.tensor),p=$a(t,u.type.value,d),h=Nt(\"x\",e[0].dataType,i.length),m=Nt(\"w\",e[1].dataType,o.length,c),f=[h,m];"}},{"ruleId":"prefer-const","severity":2,"message":"'g' is never reassigned. Use 'const' instead.","line":100,"column":185411,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":185412,"fix":{"range":[247859,248072],"text":"const g=[{name:\"output_size\",type:\"u32\"},{name:\"dilations\",type:\"u32\",length:t.dilations.length},{name:\"strides\",type:\"u32\",length:2},{name:\"pads\",type:\"u32\",length:2},{name:\"output_channels_per_group\",type:\"u32\"}];"}},{"ruleId":"prefer-const","severity":2,"message":"'_' is never reassigned. Use 'const' instead.","line":100,"column":185632,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":185633,"fix":{"range":[248080,249890],"text":"const _=l?`\\n      for (var wHeight: u32 = 0u; wHeight < uniforms.w_shape[0]; wHeight++) {\\n        let xHeight = xRCCorner.x + wHeight * uniforms.dilations[0];\\n\\n        if (xHeight < 0u || xHeight >= uniforms.x_shape[1]) {\\n          continue;\\n        }\\n\\n        for (var wWidth: u32 = 0u; wWidth < uniforms.w_shape[1]; wWidth++) {\\n          let xWidth = xRCCorner.y + wWidth * uniforms.dilations[1];\\n          if (xWidth < 0u || xWidth >= uniforms.x_shape[2]) {\\n            continue;\\n          }\\n\\n          for (var wInChannel: u32 = 0u; wInChannel < uniforms.w_shape[2]; wInChannel++) {\\n            let input_channel = in_channel_offset + wInChannel;\\n            let xVal = ${h.get(\"batch\",\"xHeight\",\"xWidth\",\"input_channel\")};\\n            let wVal = ${m.get(\"wHeight\",\"wWidth\",\"wInChannel\",\"output_channel\")};\\n            value += xVal * wVal;\\n          }\\n        }\\n      }\\n      `:`\\n      for (var wInChannel: u32 = 0u; wInChannel < uniforms.w_shape[1]; wInChannel++) {\\n        let input_channel = in_channel_offset + wInChannel;\\n        for (var wHeight: u32 = 0u; wHeight < uniforms.w_shape[2]; wHeight++) {\\n          let xHeight = xRCCorner.x + wHeight * uniforms.dilations[0];\\n\\n          if (xHeight < 0u || xHeight >= uniforms.x_shape[2]) {\\n            continue;\\n          }\\n\\n          for (var wWidth: u32 = 0u; wWidth < uniforms.w_shape[3]; wWidth++) {\\n            let xWidth = xRCCorner.y + wWidth * uniforms.dilations[1];\\n            if (xWidth < 0u || xWidth >= uniforms.x_shape[3]) {\\n              continue;\\n            }\\n\\n            let xVal = ${h.get(\"batch\",\"input_channel\",\"xHeight\",\"xWidth\")};\\n            let wVal = ${m.get(\"output_channel\",\"wInChannel\",\"wHeight\",\"wWidth\")};\\n            value += xVal * wVal;\\n          }\\n        }\\n      }\\n      `;"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":188191,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":188192},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":188204,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":188205},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":188215,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":188216},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":188226,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":188227},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":188243,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":188244},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":188301,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":188302},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":188359,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":188360},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":188385,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":188386,"fix":{"range":[250639,250936],"text":"const a=e.length>2,s=zt(n[3]),i=zt(n[2]),o=Tt.size(n)/s/i,l=[e[0].dims[0],e[0].dims[1],e[0].dims[2],e[0].dims[3]/s],u=[e[1].dims[0],e[1].dims[1],e[1].dims[2],e[1].dims[3]/s],d=[n[0],n[1],n[2],n[3]/s],c=[{type:12,data:o},{type:6,data:[t.strides[0],t.strides[1]]},{type:6,data:[t.pads[0],t.pads[1]]}];"}},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":188517,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":188518,"fix":{"range":[250965,250995],"text":"const p=(i-1)*t.strides[1]+u[1];"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":188848,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":188849},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":188888,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":188889},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":188908,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":188909},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":188931,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":188932},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":100,"column":188966,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":188967},{"ruleId":"prefer-const","severity":2,"message":"'f' is never reassigned. Use 'const' instead.","line":100,"column":189001,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":189002,"fix":{"range":[251296,251461],"text":"const r=Vt(\"output\",e[0].dataType,d.length,s),o=Ft(r.type.tensor),c=$a(t,r.type.value,o),h=Nt(\"x\",e[0].dataType,l.length,s),m=Nt(\"w\",e[1].dataType,u.length,s),f=[h,m];"}},{"ruleId":"prefer-const","severity":2,"message":"'g' is never reassigned. Use 'const' instead.","line":100,"column":189058,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":189059},{"ruleId":"prefer-const","severity":2,"message":"'_' is never reassigned. Use 'const' instead.","line":100,"column":189095,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":189096,"fix":{"range":[251506,251654],"text":"const g=a?\"value += b[output_channel];\":\"\",_=[{name:\"output_size\",type:\"u32\"},{name:\"strides\",type:\"i32\",length:2},{name:\"pads\",type:\"i32\",length:2}];"}},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":191124,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":191125},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":191136,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":191137},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":191148,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":191149},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":191164,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":191165},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":191180,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":191181},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":191196,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":191197},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":191204,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":191205},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":191212,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":191213},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":100,"column":191220,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":191221},{"ruleId":"prefer-const","severity":2,"message":"'f' is never reassigned. Use 'const' instead.","line":100,"column":191237,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":191238},{"ruleId":"prefer-const","severity":2,"message":"'g' is never reassigned. Use 'const' instead.","line":100,"column":191250,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":191251},{"ruleId":"prefer-const","severity":2,"message":"'_' is never reassigned. Use 'const' instead.","line":100,"column":191282,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":191283},{"ruleId":"prefer-const","severity":2,"message":"'w' is never reassigned. Use 'const' instead.","line":100,"column":191301,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":191302,"fix":{"range":[253572,253825],"text":"const i=e[0].dims,o=e[1].dims,l=i[i.length-2],u=o[o.length-1],d=i[i.length-1],c=zt(u),p=zt(d),h=zt(l),m=Tt.size(n)/c/h,f=e.length>2,g=r?r.slice(0,-2):n.slice(0,-2),_=[Tt.size(g),l,u],w=[{type:12,data:m},{type:12,data:l},{type:12,data:u},{type:12,data:d}];"}},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":191733,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":191734},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":191775,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":191776},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":191810,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":191811},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":191845,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":191846},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":100,"column":191885,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":191886},{"ruleId":"prefer-const","severity":2,"message":"'w' is never reassigned. Use 'const' instead.","line":100,"column":191905,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":191906},{"ruleId":"prefer-const","severity":2,"message":"'y' is never reassigned. Use 'const' instead.","line":100,"column":191928,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":191929},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":191951,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":191952,"fix":{"range":[254399,254411],"text":"const t=a?c:1;"}},{"ruleId":"prefer-const","severity":2,"message":"'v' is never reassigned. Use 'const' instead.","line":100,"column":192096,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":192097},{"ruleId":"prefer-const","severity":2,"message":"'x' is never reassigned. Use 'const' instead.","line":100,"column":192112,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":192113},{"ruleId":"prefer-const","severity":2,"message":"'M' is never reassigned. Use 'const' instead.","line":100,"column":192128,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":192129},{"ruleId":"prefer-const","severity":2,"message":"'T' is never reassigned. Use 'const' instead.","line":100,"column":192138,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":192139},{"ruleId":"prefer-const","severity":2,"message":"'k' is never reassigned. Use 'const' instead.","line":100,"column":192148,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":192149,"fix":{"range":[254544,254702],"text":"const v=i.slice(0,-2),x=o.slice(0,-2),M=Ut(v,g),T=Ut(x,g),k=[{name:\"output_size\",type:\"u32\"},{name:\"M\",type:\"u32\"},{name:\"N\",type:\"u32\"},{name:\"K\",type:\"u32\"}];"}},{"ruleId":"prefer-const","severity":2,"message":"'$' is never reassigned. Use 'const' instead.","line":100,"column":192262,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":192263,"fix":{"range":[254710,255112],"text":"const $=(e,t)=>{let n=e.rank,r=e.name;if(2===n)return`var ${r}_indices = ${e.type.indices}(0u, 0u);`;let a=s.rank,i=`var ${r}_indices: ${e.type.indices};`;for(let e=n-2-1,t=a-1;e>=0;e--,t--)i+=`\\n${r}_indices[${e}] = ${a>1?`batch_indices[${t}]`:\"batch_indices\"};`;return t.forEach((e=>{i+=`\\n${r}_indices[${e}] = 0;`})),i+=`${r}_indices[${n-2}] = 0u;\\n                     ${r}_indices[${n-1}] = 0u;`,i};"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":192276,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":192277},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":192285,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":192286,"fix":{"range":[254724,254746],"text":"const n=e.rank,r=e.name;"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":192361,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":192362},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":194298,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":194299,"fix":{"range":[256746,256803],"text":"const t=Mt.calcShape(e.inputs[0].dims,e.inputs[1].dims,!0);"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":194418,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":194419},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":194434,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":194435,"fix":{"range":[256866,256932],"text":"const n=t[t.length-1],r=e.inputs[0].dims[e.inputs[0].dims.length-1];"}},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":194651,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":194652},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":194658,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":194659},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":194681,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":194682},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":194692,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":194693},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":194699,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":194700},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":194743,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":194744,"fix":{"range":[257099,257272],"text":"const i=e[0],o=e.slice(s?1:2,s?3:4),l=o.length,u=t[0],d=t.slice(2).map(((e,t)=>e+(e-1)*(n[t]-1))),c=o.map(((e,t)=>e+r[t]+r[t+l])).map(((e,t)=>Math.floor((e-d[t]+a[t])/a[t])));"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":195398,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":195399,"fix":{"range":[257846,257871],"text":"const n=e[0].dims.length-2;"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":195749,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":195750,"fix":{"range":[258197,258225],"text":"const n=e.kernelShape.slice();"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":195929,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":195930,"fix":{"range":[258377,258398],"text":"const r=e.pads.slice();"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":196043,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":196044,"fix":{"range":[258491,258517],"text":"const a=Object.assign({},e);"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":196126,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":196127},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":196134,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":196135,"fix":{"range":[258574,258597],"text":"const t=Pa(e),n=e.format;"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":196409,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":196410},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":196429,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":196430,"fix":{"range":[258857,258938],"text":"const a=\"NHWC\"===n.format,s=ns(t[0].dims,t[1].dims,n.dilations,n.pads,n.strides,a);"}},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":196506,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":196507,"fix":{"range":[258954,258967],"text":"const i=[t[0]];"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":196525,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":196526,"fix":{"range":[258973,259068],"text":"const r=e.kernelCustomData.wT??e.compute(Yt(t[1],rs),{inputs:[1],outputs:[n.wIsConst?-2:-1]})[0];"}},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":196943,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":196944},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":196958,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":196959},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":196977,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":196978},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":196996,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":196997},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":197015,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":197016},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":197030,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":197031},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":197045,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":197046},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":197056,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":197057},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":100,"column":197067,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":197068},{"ruleId":"prefer-const","severity":2,"message":"'f' is never reassigned. Use 'const' instead.","line":100,"column":197078,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":197079,"fix":{"range":[259391,259578],"text":"const i=3===t.length,o=t[0].dims[a?1:2],l=t[0].dims[a?2:3],u=t[0].dims[a?3:1],d=t[1].dims[2],c=t[1].dims[3],p=s[a?1:2],h=s[a?2:3],m=s[a?3:1],f=a&&d===o&&c===l&&0===n.pads[0]&&0===n.pads[1];"}},{"ruleId":"prefer-const","severity":2,"message":"'_' is never reassigned. Use 'const' instead.","line":100,"column":197262,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":197263},{"ruleId":"prefer-const","severity":2,"message":"'w' is never reassigned. Use 'const' instead.","line":100,"column":197269,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":197270},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":197284,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":197285,"fix":{"range":[259732,259827],"text":"const r=e.kernelCustomData.wT??e.compute(Yt(t[1],rs),{inputs:[1],outputs:[n.wIsConst?-2:-1]})[0];"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":197447,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":197448,"fix":{"range":[259895,259907],"text":"const e=o*l*u;"}},{"ruleId":"prefer-const","severity":2,"message":"'y' is never reassigned. Use 'const' instead.","line":100,"column":197701,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":197702},{"ruleId":"prefer-const","severity":2,"message":"'b' is never reassigned. Use 'const' instead.","line":100,"column":197708,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":197709,"fix":{"range":[260149,260192],"text":"const y=g[2],b=w[0].dims[w[0].dims.length-1];"}},{"ruleId":"prefer-const","severity":2,"message":"'g' is never reassigned. Use 'const' instead.","line":100,"column":197842,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":197843,"fix":{"range":[260290,260385],"text":"const g=e.kernelCustomData.wT??e.compute(Yt(t[1],rs),{inputs:[1],outputs:[n.wIsConst?-2:-1]})[0];"}},{"ruleId":"prefer-const","severity":2,"message":"'_' is never reassigned. Use 'const' instead.","line":100,"column":197999,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":198000,"fix":{"range":[260447,260462],"text":"const _=[t[0],g];"}},{"ruleId":"prefer-const","severity":2,"message":"'w' is never reassigned. Use 'const' instead.","line":100,"column":198030,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":198031},{"ruleId":"prefer-const","severity":2,"message":"'y' is never reassigned. Use 'const' instead.","line":100,"column":198040,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":198041},{"ruleId":"prefer-const","severity":2,"message":"'b' is never reassigned. Use 'const' instead.","line":100,"column":198050,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":198051,"fix":{"range":[260478,260510],"text":"const w=a?p*h:m,y=a?m:p*h,b=d*c*u;"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":198119,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":198120},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":198139,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":198140,"fix":{"range":[260567,260831],"text":"const n=\"NHWC\"===t.format,r=[e.inputs[0].reshape(n?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":198424,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":198425},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":198452,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":198453},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":198476,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":198477},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":198502,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":198503},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":198530,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":198531,"fix":{"range":[260872,261040],"text":"const a=[0,t.pads[0],0,t.pads[1]],s=[1].concat(t.strides),i=[1].concat(t.dilations),o=[1].concat(t.kernelShape),l=ss({...t,pads:a,strides:s,dilations:i,kernelShape:o},r);"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":198657,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":198658},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":198708,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":198709},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":198718,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":198719},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":198758,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":198759,"fix":{"range":[261105,261265],"text":"const r=\"NHWC\"===n.format?\"channelsLast\":\"channelsFirst\",a=ss(n,t),s=\"NOTSET\"===n.autoPad?n.pads:n.autoPad,i=Ka(t[0].dims,t[1].dims,n.strides,n.dilations,s,!1,r);"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":199065,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":199066,"fix":{"range":[261513,261534],"text":"const n=ss(t,e.inputs);"}},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":199176,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":199177},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":199402,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":199403},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":199418,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":199419},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":199434,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":199435},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":200639,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":200640},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":200945,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":200946},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":202374,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":202375,"fix":{"range":[261624,264836],"text":"const s=e?\"\\n    let coords = vec4<i32>(\\n      batch,\\n      row / outWidth,\\n      row % outWidth,\\n      col);\\n    \":\"\\n    let coords = vec4<i32>(\\n      batch,\\n      row,\\n      col / outWidth,\\n      col % outWidth);\\n    \",i=e?\"row\":\"col\",o=e?\"col\":\"row\",l=`\\n      let inChannels = ${e?\"i32(uniforms.x_shape[3])\":\"i32(uniforms.x_shape[1])\"};\\n      let outWidth = ${e?\"i32(uniforms.result_shape[2])\":\"i32(uniforms.result_shape[3])\"};\\n      let outRow = ${i} / outWidth;\\n      let outCol = ${i} % outWidth;\\n\\n      let WRow = ${o} / (uniforms.filter_dims[1] * inChannels);\\n      let WCol = ${o} / inChannels % uniforms.filter_dims[1];\\n      let xR = f32(outRow - uniforms.pads[0] + uniforms.dilations[0] * WRow) / f32(uniforms.strides[0]);\\n      let xC = f32(outCol - uniforms.pads[1] + uniforms.dilations[1] * WCol) / f32(uniforms.strides[1]);\\n      if (xR < 0.0 || xR >= f32(${e?\"i32(uniforms.x_shape[1])\":\"i32(uniforms.x_shape[2])\"}) || fract(xR) > 0.0) {\\n        return ${r}(0.0);\\n      }\\n      if (xC < 0.0 || xC >= f32(${e?\"i32(uniforms.x_shape[2])\":\"i32(uniforms.x_shape[3])\"}) || fract(xC) > 0.0) {\\n        return ${r}(0.0);\\n      }\\n      let iXR = i32(xR);\\n      let iXC = i32(xC);\\n      let xCh = ${o} % inChannels;\\n      ${e?\"\\n      let coord = vec4<i32>(batch, iXR, iXC, xCh);\\n      \":\"\\n      let coord = vec4<i32>(batch, xCh, iXR, iXC);\\n      \"}\\n      return x[getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape))/${a}];`,u=e?`\\n      let col = colIn * ${a};\\n      if (row < uniforms.dim_a_outer && col < uniforms.dim_inner) {\\n        ${l}\\n      }\\n      return ${r}(0.0);`:`\\n      let col = colIn * ${a};\\n      if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {\\n        ${l}\\n      }\\n      return ${r}(0.0);`,d=`\\n      let col = colIn * ${a};\\n      let inChannels = ${e?\"i32(uniforms.x_shape[3])\":\"i32(uniforms.x_shape[1])\"};\\n      let coordX = uniforms.filter_dims[0] - 1 - row / (uniforms.filter_dims[1] * inChannels);\\n      let coordY = uniforms.filter_dims[1] - 1 - (row / inChannels) % uniforms.filter_dims[1];\\n      if (${e?\"row < uniforms.dim_inner && col < uniforms.dim_b_outer\":\"row < uniforms.dim_inner && col < uniforms.dim_a_outer\"}  && coordX >= 0 && coordY >= 0) {\\n        let rowInner = row % inChannels;\\n        let coord = vec4<i32>(coordX, coordY, col, rowInner);\\n        ${(e=>{switch(e){case 1:return\"return w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];\";case 4:return`\\n            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);\\n            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);\\n            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);\\n            let v0 = w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];\\n            let v1 = w[getIndexFromCoords4D(coord1, vec4<i32>(uniforms.w_shape))];\\n            let v2 = w[getIndexFromCoords4D(coord2, vec4<i32>(uniforms.w_shape))];\\n            let v3 = w[getIndexFromCoords4D(coord3, vec4<i32>(uniforms.w_shape))];\\n            return ${r}(v0, v1, v2, v3);\\n            `;default:throw new Error(`innerElementSize ${e} is not supported.`)}})(a)}\\n      }\\n      return ${r}(0.0);\\n      `,c=$a(n,r);"}},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":203022,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":203023},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":203042,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":203043},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":203072,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":203073},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":203079,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":203080},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":203093,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":203094},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":203107,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":203108},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":100,"column":203121,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":203122},{"ruleId":"prefer-const","severity":2,"message":"'f' is never reassigned. Use 'const' instead.","line":100,"column":203146,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":203147},{"ruleId":"prefer-const","severity":2,"message":"'g' is never reassigned. Use 'const' instead.","line":100,"column":203156,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":203157},{"ruleId":"prefer-const","severity":2,"message":"'_' is never reassigned. Use 'const' instead.","line":100,"column":203166,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":203167},{"ruleId":"prefer-const","severity":2,"message":"'w' is never reassigned. Use 'const' instead.","line":100,"column":203176,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":203177},{"ruleId":"prefer-const","severity":2,"message":"'y' is never reassigned. Use 'const' instead.","line":100,"column":203199,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":203200,"fix":{"range":[265470,265724],"text":"const l=\"NHWC\"===t.format,u=l?e[0].dims[3]:e[0].dims[1],d=n[0],c=l?n[2]:n[3],p=l?n[1]:n[2],h=l?n[3]:n[1],m=l&&u%4==0&&u%3&&h%4==0,f=l?h:c*p,g=l?c*p:h,_=[8,8,1],w=r<=8?[4,1,1]:[4,4,1],y=[Math.ceil(f/_[0]/w[0]),Math.ceil(g/_[1]/w[1]),Math.ceil(d/_[2]/w[2])];"}},{"ruleId":"prefer-const","severity":2,"message":"'b' is never reassigned. Use 'const' instead.","line":100,"column":203340,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":203341},{"ruleId":"prefer-const","severity":2,"message":"'v' is never reassigned. Use 'const' instead.","line":100,"column":203348,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":203349},{"ruleId":"prefer-const","severity":2,"message":"'x' is never reassigned. Use 'const' instead.","line":100,"column":203372,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":203373},{"ruleId":"prefer-const","severity":2,"message":"'M' is never reassigned. Use 'const' instead.","line":100,"column":203380,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":203381},{"ruleId":"prefer-const","severity":2,"message":"'T' is never reassigned. Use 'const' instead.","line":100,"column":203426,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":203427},{"ruleId":"prefer-const","severity":2,"message":"'k' is never reassigned. Use 'const' instead.","line":100,"column":203540,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":203541},{"ruleId":"prefer-const","severity":2,"message":"'$' is never reassigned. Use 'const' instead.","line":100,"column":203630,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":203631,"fix":{"range":[265788,266216],"text":"const b=m?4:1,v=Math.max(_[0]*b,_[1]),x=m?4:1,M=[t.kernelShape[l?1:2],t.kernelShape[l?2:3]],T=[M[0]+(t.dilations[0]<=1?0:(M[0]-1)*(t.dilations[0]-1)),M[1]+(t.dilations[1]<=1?0:(M[1]-1)*(t.dilations[1]-1))],k=[T[0]-1-Math.floor((t.pads[0]+t.pads[2])/2),T[1]-1-Math.floor((t.pads[1]+t.pads[3])/2)],$=[{type:6,data:r},{type:6,data:a},{type:6,data:s},{type:6,data:t.strides},{type:6,data:t.dilations},{type:6,data:M},{type:6,data:k}];"}},{"ruleId":"prefer-const","severity":2,"message":"'C' is never reassigned. Use 'const' instead.","line":100,"column":203811,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":203812,"fix":{"range":[266259,266281],"text":"const C=[\"rank\",\"rank\"];"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":204137,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":204138},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":204180,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":204181},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":204223,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":204224},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":204263,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":204264},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":204286,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":204287,"fix":{"range":[266734,266784],"text":"const t=Nt(\"bias\",e[2].dataType,e[2].dims.length,x);"}},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":204502,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":204503,"fix":{"range":[266950,267217],"text":"const p=[{name:\"dim_a_outer\",type:\"i32\"},{name:\"dim_b_outer\",type:\"i32\"},{name:\"dim_inner\",type:\"i32\"},{name:\"strides\",type:\"i32\",length:2},{name:\"dilations\",type:\"i32\",length:2},{name:\"filter_dims\",type:\"i32\",length:M.length},{name:\"pads\",type:\"i32\",length:k.length}];"}},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":204777,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":204778,"fix":{"range":[267225,267251],"text":"const h=Ft(e[0].dataType,1);"}},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":205178,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":205179},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":205186,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":205187},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":205194,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":205195},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":205202,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":205203},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":100,"column":205495,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":205496},{"ruleId":"prefer-const","severity":2,"message":"'f' is never reassigned. Use 'const' instead.","line":100,"column":205503,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":205504},{"ruleId":"prefer-const","severity":2,"message":"'g' is never reassigned. Use 'const' instead.","line":100,"column":205546,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":205547},{"ruleId":"prefer-const","severity":2,"message":"'_' is never reassigned. Use 'const' instead.","line":100,"column":205590,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":205591,"fix":{"range":[267943,268050],"text":"const m=s?4:1,f=Nt(\"W\",t[1].dataType,t[1].dims.length,m),g=Nt(\"Dy\",t[0].dataType,t[0].dims.length,m),_=[g,f];"}},{"ruleId":"prefer-const","severity":2,"message":"'w' is never reassigned. Use 'const' instead.","line":100,"column":205654,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":205655},{"ruleId":"prefer-const","severity":2,"message":"'y' is never reassigned. Use 'const' instead.","line":100,"column":205694,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":205695},{"ruleId":"prefer-const","severity":2,"message":"'b' is never reassigned. Use 'const' instead.","line":100,"column":210842,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":210843,"fix":{"range":[268102,275846],"text":"const w=Vt(\"result\",t[0].dataType,n.length,m),y=`{\\n        let batch: u32 = ${a?\"global_id.z\":\"workgroup_id.z\"} / uniforms.result_shape[1];\\n        let r = ${a?\"global_id.z\":\"workgroup_id.z\"} % uniforms.result_shape[1];\\n        let c = ${a?\"global_id.y\":\"workgroup_id.y\"} * ${p};\\n        let d1: u32 = ${a?\"global_id.x\":\"workgroup_id.x\"} * 4;\\n\\n        let dyCorner = vec2<i32>(i32(r), i32(c)) - vec2<i32>(uniforms.pads);\\n\\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\\n        // ? = to be determined. : = across all values in that axis.\\n        var dotProd: array<vec4<${i}>, ${p}>;\\n        for (var i = 0; i < ${p}; i++) {\\n          dotProd[i] = vec4<${i}>(0.0);\\n        }\\n        for (var wR: u32 = 0; wR < uniforms.filter_dims[0]; wR = wR + 1) {\\n          var dyR = (${i}(dyCorner.x) + ${i}(wR)) / ${i}(uniforms.strides.x);\\n          let wRPerm = uniforms.filter_dims[0] - 1 - wR;\\n          if (dyR < 0.0 || dyR >= ${i}(uniforms.Dy_shape[1]) ||\\n              fract(dyR) > 0.0 || wRPerm < 0) {\\n            continue;\\n          }\\n          let idyR: u32 = u32(dyR);\\n\\n          for (var wC: u32 = 0; wC < uniforms.filter_dims[1]; wC = wC + 1) {\\n            let dyC = (${i}(dyCorner.y) + ${i}(wC)) / ${i}(uniforms.strides.y);\\n            let dyC2 = (${i}(dyCorner.y) + 1.0 + ${i}(wC)) / ${i}(uniforms.strides.y);\\n            let wCPerm = uniforms.filter_dims[1] - 1 - wC;\\n            if (wCPerm < 0) {\\n              continue;\\n            }\\n            var bDyCVal = true;\\n            var bDyCVal2 = true;\\n            if (dyC < 0.0 || dyC >= ${i}(uniforms.Dy_shape[2]) ||\\n                fract(dyC) > 0.0) {\\n              bDyCVal = false;\\n            }\\n            if (dyC2 < 0.0 || dyC2 >= ${i}(uniforms.Dy_shape[2]) ||\\n                fract(dyC2) > 0.0) {\\n              bDyCVal2 = false;\\n            }\\n\\n            let idyC: u32 = u32(dyC);\\n            let idyC2: u32 = u32(dyC2);\\n            if (bDyCVal && bDyCVal2) {\\n              let d2Length = uniforms.Dy_shape[3];\\n              for (var d2 :u32 = 0; d2 < d2Length; d2 = d2 + 4) {\\n                let wValue0 = ${f.get(\"u32(wRPerm)\",\"u32(wCPerm)\",\"d1\",\"d2\")};\\n                let wValue1 = ${f.get(\"u32(wRPerm)\",\"u32(wCPerm)\",\"d1 + 1\",\"d2\")};\\n                let wValue2 = ${f.get(\"u32(wRPerm)\",\"u32(wCPerm)\",\"d1 + 2\",\"d2\")};\\n                let wValue3 = ${f.get(\"u32(wRPerm)\",\"u32(wCPerm)\",\"d1 + 3\",\"d2\")};\\n\\n                var xValue = ${g.get(\"batch\",\"idyR\",\"idyC\",\"d2\")};\\n                let tmpval = vec4<${i}>(dot(xValue, wValue0),\\n                                      dot(xValue, wValue1),\\n                                      dot(xValue, wValue2),\\n                                      dot(xValue, wValue3));\\n                dotProd[0] = dotProd[0] + tmpval;\\n\\n                xValue =  ${g.get(\"batch\",\"idyR\",\"idyC2\",\"d2\")};\\n\\n                dotProd[1] = dotProd[1] + vec4<${i}>(dot(xValue, wValue0),\\n                                                    dot(xValue, wValue1),\\n                                                    dot(xValue, wValue2),\\n                                                    dot(xValue, wValue3));\\n              }\\n            } else if (bDyCVal) {\\n              let d2Length = uniforms.Dy_shape[${c}];\\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\\n                let wValue0 = ${f.get(\"u32(wRPerm)\",\"u32(wCPerm)\",\"d1\",\"d2\")};\\n                let wValue1 = ${f.get(\"u32(wRPerm)\",\"u32(wCPerm)\",\"d1 + 1\",\"d2\")};\\n                let wValue2 = ${f.get(\"u32(wRPerm)\",\"u32(wCPerm)\",\"d1 + 2\",\"d2\")};\\n                let wValue3 = ${f.get(\"u32(wRPerm)\",\"u32(wCPerm)\",\"d1 + 3\",\"d2\")};\\n\\n                var xValue = ${g.get(\"batch\",\"idyR\",\"idyC\",\"d2\")};\\n                let tmpval = vec4<${i}>(dot(xValue, wValue0),\\n                                      dot(xValue, wValue1),\\n                                      dot(xValue, wValue2),\\n                                      dot(xValue, wValue3));\\n                dotProd[0] = dotProd[0] + tmpval;\\n              }\\n            } else if (bDyCVal2) {\\n              let d2Length = uniforms.Dy_shape[3];\\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\\n                let wValue0 = ${f.get(\"u32(wRPerm)\",\"u32(wCPerm)\",\"d1\",\"d2\")};\\n                let wValue1 = ${f.get(\"u32(wRPerm)\",\"u32(wCPerm)\",\"d1 + 1\",\"d2\")};\\n                let wValue2 = ${f.get(\"u32(wRPerm)\",\"u32(wCPerm)\",\"d1 + 2\",\"d2\")};\\n                let wValue3 = ${f.get(\"u32(wRPerm)\",\"u32(wCPerm)\",\"d1 + 3\",\"d2\")};\\n\\n                var xValue = ${g.get(\"batch\",\"idyR\",\"idyC2\",\"d2\")};\\n                let tmpval = vec4<${i}>(dot(xValue, wValue0),\\n                                      dot(xValue, wValue1),\\n                                      dot(xValue, wValue2),\\n                                      dot(xValue, wValue3));\\n                dotProd[1] = dotProd[1] + tmpval;\\n              }\\n            }\\n          }\\n        }\\n\\n        for (var i: u32 = 0; i < ${p}; i = i + 1) {\\n          let value = dotProd[i] + ${r?\"bias[c+i]\":`vec4<${i}>(0.0)`};\\n          ${w.set(\"batch\",\"r\",\"c + i\",\"d1\",\"value\")};\\n        }\\n      }`,b=`\\n          let outputIndices = ${w.offsetToIndices(\"global_idx\")};\\n          let batch = ${w.indicesGet(\"outputIndices\",0)};\\n          let d1 = ${w.indicesGet(\"outputIndices\",c)};\\n          let r = ${w.indicesGet(\"outputIndices\",u)};\\n          let c = ${w.indicesGet(\"outputIndices\",d)};\\n          let dyCorner = vec2<i32>(i32(r), i32(c)) - uniforms.pads;\\n          let dyRCorner = dyCorner.x;\\n          let dyCCorner = dyCorner.y;\\n          let groupId = d1 / uniforms.output_channels_per_group;\\n          let wOutChannel = d1 - groupId * uniforms.output_channels_per_group;\\n          // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\\n          // ? = to be determined. : = across all values in that axis.\\n          var dotProd = ${i}(0.0);\\n          for (var wR: u32 = 0; wR < uniforms.effective_filter_dims.x; wR = wR + 1) {\\n            if (wR % uniforms.dilations.x != 0) {\\n              continue;\\n            }\\n            let dyR = (${i}(dyRCorner) + ${i}(wR)) / ${i}(uniforms.strides[0]);\\n            let wRPerm = uniforms.filter_dims.x - 1 - wR / uniforms.dilations.x;\\n            if (dyR < 0.0 || dyR >= ${i}(uniforms.Dy_shape[${u}]) || fract(dyR) > 0.0 ||\\n                wRPerm < 0) {\\n              continue;\\n            }\\n            let idyR: u32 = u32(dyR);\\n\\n            for (var wC: u32 = 0; wC < uniforms.effective_filter_dims.y; wC = wC + 1) {\\n              if (wC % uniforms.dilations.y != 0) {\\n                continue;\\n              }\\n              let dyC = (${i}(dyCCorner) + ${i}(wC)) / ${i}(uniforms.strides.y);\\n              let wCPerm = uniforms.filter_dims.y - 1 - wC / uniforms.dilations.y;\\n              if (dyC < 0.0 || dyC >= ${i}(uniforms.Dy_shape[${d}]) ||\\n                  fract(dyC) > 0.0 || wCPerm < 0) {\\n                continue;\\n              }\\n              let idyC: u32 = u32(dyC);\\n              var inputChannel = groupId * uniforms.input_channels_per_group;\\n              for (var d2: u32 = 0; d2 < uniforms.input_channels_per_group; d2 = d2 + 1) {\\n                let xValue = ${l?g.get(\"batch\",\"idyR\",\"idyC\",\"inputChannel\"):g.get(\"batch\",\"inputChannel\",\"idyR\",\"idyC\")};\\n                let wValue = ${f.get(\"inputChannel\",\"wOutChannel\",\"u32(wRPerm)\",\"u32(wCPerm)\")};\\n                dotProd = dotProd + xValue * wValue;\\n                inputChannel = inputChannel + 1;\\n              }\\n            }\\n          }\\n          let value = dotProd + ${r?\"bias[d1]\":`${i}(0.0)`};\\n          ${w.setByOffset(\"global_idx\",\"value\")};\\n        `;"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":213592,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":213593},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":213605,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":213606},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":213621,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":213622},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":213634,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":213635,"fix":{"range":[276040,276110],"text":"const r=e.length>2,a=t.outputShape,s=Tt.size(a),i=[Math.ceil(s/64),1,1];"}},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":213725,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":213726},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":213745,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":213746},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":213763,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":213764},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":213793,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":213794},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":213839,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":213840},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":213873,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":213874},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":214019,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":214020},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":100,"column":214107,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":214108},{"ruleId":"prefer-const","severity":2,"message":"'f' is never reassigned. Use 'const' instead.","line":100,"column":214117,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":214118},{"ruleId":"prefer-const","severity":2,"message":"'g' is never reassigned. Use 'const' instead.","line":100,"column":214129,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":214130},{"ruleId":"prefer-const","severity":2,"message":"'_' is never reassigned. Use 'const' instead.","line":100,"column":214138,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":214139},{"ruleId":"prefer-const","severity":2,"message":"'w' is never reassigned. Use 'const' instead.","line":100,"column":214145,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":214146,"fix":{"range":[276173,276763],"text":"const o=\"NHWC\"===t.format,l=[\"rank\",\"rank\"],u=[t.strides[0],t.strides[1]],d=[t.kernelShape[o?1:2],t.kernelShape[o?2:3]],c=[t.dilations[0],t.dilations[1]],p=[d[0]+(t.dilations[0]<=1?0:(t.kernelShape[o?1:2]-1)*(t.dilations[0]-1)),d[1]+(t.dilations[1]<=1?0:(t.kernelShape[o?2:3]-1)*(t.dilations[1]-1))],h=[p[0]-1-Math.floor((t.pads[0]+t.pads[2])/2),p[1]-1-Math.floor(t.pads[1]+t.pads[3])/2],m=t.group,f=e[1].dims,g=f[0]/m,_=f[1],w=[{type:12,data:s},{type:12,data:u},{type:12,data:d},{type:12,data:c},{type:12,data:p},{type:6,data:h},{type:12,data:g},{type:12,data:_},...It(e[0].dims,e[1].dims)];"}},{"ruleId":"prefer-const","severity":2,"message":"'y' is never reassigned. Use 'const' instead.","line":100,"column":214377,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":214378,"fix":{"range":[276825,276850],"text":"const y=1===i[1]&&1===i[2];"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":214631,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":214632},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":214995,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":214996,"fix":{"range":[277079,277467],"text":"const n=[{name:\"output_size\",type:\"u32\"},{name:\"strides\",type:\"u32\",length:u.length},{name:\"filter_dims\",type:\"u32\",length:d.length},{name:\"dilations\",type:\"u32\",length:d.length},{name:\"effective_filter_dims\",type:\"u32\",length:p.length},{name:\"pads\",type:\"i32\",length:h.length},{name:\"input_channels_per_group\",type:\"u32\"},{name:\"output_channels_per_group\",type:\"u32\"}],s=Ft(e[0].dataType);"}},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":215150,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":215151,"fix":{"range":[277598,277620],"text":"const s=Math.floor(e/2);"}},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":215271,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":215272},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":215284,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":215285,"fix":{"range":[277719,277751],"text":"const d=e.length-2,c=0===u.length;"}},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":215352,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":215353},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":215359,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":215360,"fix":{"range":[277800,277824],"text":"const p=e[0],h=t[o?3:1]*a;"}},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":215422,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":215423},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":215429,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":215430},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":100,"column":215445,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":215446,"fix":{"range":[277870,277927],"text":"const o=e[p],h=c?o*i[a]:u[a],m=fs(o,i[a],s[a],t[p],n[a],h);"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":215598,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":215599,"fix":{"range":[278046,278074],"text":"const n=e.kernelShape.slice();"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":215764,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":215765,"fix":{"range":[278212,278236],"text":"const r=\"NHWC\"===e.format;"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":215846,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":215847},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":215863,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":215864},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":215887,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":215888},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":215913,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":215914},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":215984,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":215985,"fix":{"range":[278432,278457],"text":"const e=t[0].dims.length-2;"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":216089,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":216090,"fix":{"range":[278537,278562],"text":"const e=t[0].dims.length-2;"}},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":216175,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":216176,"fix":{"range":[278623,278649],"text":"const d=Object.assign({},e);"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":216310,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":216311},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":216318,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":216319},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":216329,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":216330},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":216410,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":216411},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":216424,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":216425},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":216434,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":216435},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":216450,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":216451},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":216459,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":216460},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":216471,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":216472,"fix":{"range":[278758,278938],"text":"const t=Pa(e),n=e.format,r=[\"NOTSET\",\"VALID\",\"SAME_UPPER\",\"SAME_LOWER\"][typeof e.autoPad>\"u\"?0:e.autoPad],a=e.dilations,s=e.group,i=e.kernelShape,o=e.pads,l=e.strides,u=e.wIsConst();"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":217120,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":217121,"fix":{"range":[279568,279595],"text":"const n=e[1].dims[1]*t.group;"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":217237,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":217238,"fix":{"range":[279685,279710],"text":"const r=e[0].dims.length-2;"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":217969,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":217970},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":217979,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":217980},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":217999,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":218000},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":218015,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":218016},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":218026,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":218027,"fix":{"range":[280417,280497],"text":"const r=ws(n,t),a=\"NHWC\"===n.format,s=r.outputShape,i=s[a?3:1],o=t[0].dims[a?3:1];"}},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":218109,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":218110},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":218120,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":218121},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":218131,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":218132},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":218141,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":218142},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":218151,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":218152},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":218181,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":218182,"fix":{"range":[280557,280724],"text":"const l=s[a?1:2],u=s[a?2:3],d=a?l*u:i,c=a?i:l*u,p=t[1].dims[2]*t[1].dims[3]*o,h=e.kernelCustomData.wT??e.compute(Yt(t[1],vs),{inputs:[1],outputs:[n.wIsConst?-2:-1]})[0];"}},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":100,"column":218338,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":218339},{"ruleId":"prefer-const","severity":2,"message":"'f' is never reassigned. Use 'const' instead.","line":100,"column":218349,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":218350,"fix":{"range":[280786,280816],"text":"const m=[t[0],h],f=3===t.length;"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":218506,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":218507},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":218526,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":218527,"fix":{"range":[280954,281218],"text":"const n=\"NHWC\"===t.format,r=[e.inputs[0].reshape(n?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];"}},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":219088,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":219089,"fix":{"range":[281536,281598],"text":"const l=ws({...t,pads:o,strides:i,dilations:s,kernelShape:a},r);"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":219340,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":219341},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":219353,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":219354},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":219364,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":219365},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":219382,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":219383},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":219401,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":219402},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":219471,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":219472,"fix":{"range":[281788,281947],"text":"const a=Tt.size(t),s=t.length,i=Nt(\"input\",e,s),o=Vt(\"output\",e,s),l=6===n.dataType?n.getInt32Array()[0]:Number(n.getBigInt64Array()[0]),u=Tt.normalizeAxis(l,s);"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":219743,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":219744},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":219802,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":219803},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":219849,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":219850},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":219891,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":219892,"fix":{"range":[282191,282383],"text":"const t=` i32(${i.indicesGet(\"inputIndices\",\"uniforms.axis\")}) `,n=Dt(\"uniforms.input_shape\",\"uniforms.axis\",s),a=r.reverse?t+(r.exclusive?\" + 1\":\"\"):\"0\",l=r.reverse?n:t+(r.exclusive?\"\":\" + 1\");"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":220701,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":220702},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":220720,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":220721},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":220743,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":220744,"fix":{"range":[283149,283209],"text":"const n=e.inputs[0].dims,r=e.inputs[0].dataType,a=e.inputs[1];"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":220805,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":220806},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":220823,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":220824,"fix":{"range":[283253,283291],"text":"const t=1===e.exclusive,n=1===e.reverse;"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":221081,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":221082,"fix":{"range":[283529,283538],"text":"const a=[];"}},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":221310,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":221311},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":221330,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":221331},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":221344,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":221345},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":221588,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":221589},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":221603,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":221604},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":221619,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":221620},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":100,"column":221632,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":221633},{"ruleId":"prefer-const","severity":2,"message":"'f' is never reassigned. Use 'const' instead.","line":100,"column":221646,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":221647,"fix":{"range":[284036,284117],"text":"const c=e.reshape(i),p=c.dims.length,h=e.dataType,m=Nt(\"a\",h,p),f=Vt(\"output\",h,p);"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":221794,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":221795},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":221836,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":221837},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":221849,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":221850},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":221858,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":221859,"fix":{"range":[284242,284336],"text":"const t=l?[n,r*u,a*u,s/u**2]:[n,s/u**2,r*u,a*u],i=Tt.size(t),d=c.dims,p=Tt.sortBasedOnPerm(d,o);"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":222924,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":222925},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":223066,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":223067,"fix":{"range":[285514,285538],"text":"const r=e[n].dims.slice();"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":223150,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":223151,"fix":{"range":[285598,285631],"text":"const a=this.processTerm(t,!0,r,n);"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":223487,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":223488,"fix":{"range":[285935,285966],"text":"const t=this.symbolToInfo.get(e);"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":223916,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":223917},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":224017,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":224018},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":224043,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":224044,"fix":{"range":[286465,286507],"text":"const l=e.match(RegExp(Is,\"g\")),u=new Ls(r);"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":224173,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":224174,"fix":{"range":[286621,286640],"text":"const e=a-l.length+1;"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":224547,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":224548,"fix":{"range":[286995,287042],"text":"const t=String.fromCharCode(\"0\".charCodeAt(0)+e);"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":224775,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":224776},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":224832,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":224833},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":224845,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":224846},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":224871,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":224872,"fix":{"range":[287223,287395],"text":"const a=e.map((e=>e.length)).map(((e,n)=>Nt(`input${n}`,t,e))),s=Tt.size(r),i=Vt(\"output\",t,r.length),o=[...n.symbolToInfo.keys()].filter((e=>!n.rhs.symbolToIndices.has(e)));"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":225052,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":225053,"fix":{"range":[287500,287605],"text":"const a=o.filter((e=>n.symbolToInfo.has(e))).map((e=>({type:12,data:n.symbolToInfo.get(e)?.dimValue||0})));"}},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":225182,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":225183,"fix":{"range":[287630,287694],"text":"const i=e.map(((e,t)=>[...It(e)])).reduce(((e,t)=>e.concat(t)),a);"}},{"ruleId":"no-unused-vars","severity":2,"message":"'t' is defined but never used.","line":100,"column":225194,"nodeType":"Identifier","messageId":"unusedVar","endLine":100,"endColumn":225195,"suggestions":[{"messageId":"removeVar","data":{"varName":"t"},"fix":{"range":[287645,287647],"text":""},"desc":"Remove unused variable 't'."}]},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":225375,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":225376},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":225380,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":225381},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":225385,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":225386},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":225390,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":225391},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":225395,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":225396},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":225400,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":225401,"fix":{"range":[287823,287903],"text":"const t=[],r=[],s=[],l=[],u=[],d=n.symbolToInfo.size===n.rhs.symbolToIndices.size;"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":225520,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":225521,"fix":{"range":[287968,288008],"text":"const r=n.rhs.symbolToIndices.get(o)?.[0];"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":225626,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":225627,"fix":{"range":[288074,288105],"text":"const e=n.symbolToIndices.get(o);"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":225875,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":225876,"fix":{"range":[288323,288354],"text":"const e=t.symbolToIndices.get(o);"}},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":226184,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":226185,"fix":{"range":[288632,288803],"text":"const c=d?[...t,`let sum = ${a.map(((e,t)=>e.getByIndices(`input${t}Indices`))).join(\" * \")};`]:[...t,\"var sum = 0.0;\",...s,...r,\"var prod = 1.0;\",...u,\"sum += prod;\",...l];"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":226881,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":226882},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":226911,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":226912},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":226926,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":226927,"fix":{"range":[289329,289410],"text":"const n=new Ds(e.inputs,t.equation),r=n.outputDims,a=e.inputs.map(((e,t)=>e.dims));"}},{"ruleId":"no-unused-vars","severity":2,"message":"'t' is defined but never used.","line":100,"column":226945,"nodeType":"Identifier","messageId":"unusedVar","endLine":100,"endColumn":226946,"suggestions":[{"messageId":"removeVar","data":{"varName":"t"},"fix":{"range":[289396,289398],"text":""},"desc":"Remove unused variable 't'."}]},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":227012,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":227013,"fix":{"range":[289460,289496],"text":"const t=e.equation.replace(/\\s+/g,\"\");"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":227173,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":227174},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":227185,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":227186},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":227467,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":227468},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":227487,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":227488,"fix":{"range":[289915,289944],"text":"const n=e.length-t.length,r=[];"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":227646,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":227647},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":227658,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":227659},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":227703,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":227704},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":227713,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":227714},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":227729,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":227730},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":227741,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":227742},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":227767,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":227768,"fix":{"range":[290094,290251],"text":"const t=e[0].dims,n=Array.from(e[1].getBigInt64Array(),Number),r=Us(t,n),a=e[0].dataType,s=9===a?4:1,i=Math.ceil(Tt.size(r)/s),o=[{type:12,data:i},...It(t,r)];"}},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":227906,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":227907},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":227933,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":227934},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":227975,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":227976,"fix":{"range":[290423,290787],"text":"const e=(e,t,n=\"\")=>`\\n          let outputIndices${t} = ${o.offsetToIndices(`outputOffset + ${t}u`)};\\n          let offset${t} = ${i.broadcastedIndicesToOffset(`outputIndices${t}`,o)};\\n          let index${t} = offset${t} / 4u;\\n          let component${t} = offset${t} % 4u;\\n          ${e}[${t}] = ${n}(${i.getByOffset(`index${t}`)}[component${t}]);\\n        `;"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":229224,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":229225},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":229240,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":229241},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":229261,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":229262},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":229282,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":229283,"fix":{"range":[291672,291743],"text":"const t=e[0].dataType,n=Tt.size(e[0].dims),r=Tt.size(e[1].dims),a=r%4==0;"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":229406,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":229407},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":229424,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":229425},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":229445,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":229446},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":229463,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":229464},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":229635,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":229636,"fix":{"range":[291854,292265],"text":"const n=Nt(\"x\",t,[1],4),r=Nt(\"bias\",t,[1],4),s=Vt(\"y\",t,[1],4),i=e=>`\\n      let bias${e}_offset: u32 = (global_idx * 4 + ${e}) % uniforms.bias_size;\\n      let bias${e} = ${r.getByOffset(`bias${e}_offset / 4`)}[bias${e}_offset % 4];`,o=a?`\\n      let bias = ${r.getByOffset(\"global_idx % (uniforms.bias_size / 4)\")};`:`${i(0)}${i(1)}${i(2)}${i(3)}\\n      let bias = ${n.type.value}(bias0, bias1, bias2, bias3);`;"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":230586,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":230587},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":230598,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":230599},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":230610,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":230611},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":230621,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":230622},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":230650,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":230651,"fix":{"range":[293034,293115],"text":"const n=e[0].dims,r=e[1].dims,a=n.length,s=Tt.normalizeAxis(t.axis,a),i=n.slice(0);"}},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":230686,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":230687},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":230693,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":230694},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":230717,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":230718},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":230743,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":230744,"fix":{"range":[293134,293278],"text":"const o=n[s],l=9===e[0].dataType?4:1,u=Math.ceil(Tt.size(i)/l),d=[{type:12,data:u},{type:6,data:o},{type:12,data:s},...It(e[0].dims,e[1].dims,i)];"}},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":231050,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":231051},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":231096,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":231097},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":231148,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":231149},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":231188,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":231189},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":231198,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":231199},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":231919,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":231920,"fix":{"range":[294367,294736],"text":"const e=(e,t,n=\"\")=>`\\n          let outputIndices${t} = ${d.offsetToIndices(`outputOffset + ${t}u`)};\\n          ${c(t)};\\n          let offset${t} = ${o.indicesToOffset(`dataIndices${t}`)};\\n          let index${t} = offset${t} / 4u;\\n          let component${t} = offset${t} % 4u;\\n          ${e}[${t}] = ${n}(${o.getByOffset(`index${t}`)}[component${t}]);\\n        `;"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":233062,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":233063,"fix":{"range":[295510,295525],"text":"const n=e.inputs;"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":233245,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":233246},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":233297,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":233298},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":233311,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":233312},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":233318,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":233319},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":233325,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":233326,"fix":{"range":[295693,295804],"text":"const n=Tt.normalizeAxis(t.quantizeAxis,e[0].dims.length),r=t.blockSize,a=e[0],s=e[2],i=4===e.length?e[3]:void 0;"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":233947,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":233948},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":233959,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":233960},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":233971,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":233972},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":233982,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":233983},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":234017,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":234018},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":234054,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":234055,"fix":{"range":[296395,296519],"text":"const n=e[0].dims,r=e[1].dims,a=n.length,s=Tt.normalizeAxis(t.gatherAxis,a),i=Tt.normalizeAxis(t.quantizeAxis,a),o=n.slice(0);"}},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":234090,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":234091},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":234103,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":234104},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":234119,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":234120},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":234140,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":234141,"fix":{"range":[296538,296709],"text":"const l=Tt.size(o),u=e[2].dataType,d=22===e[0].dataType,c=[{type:12,data:l},{type:12,data:i},{type:12,data:s},{type:12,data:t.blockSize},...It(...e.map(((e,t)=>e.dims)),o)];"}},{"ruleId":"no-unused-vars","severity":2,"message":"'t' is defined but never used.","line":100,"column":234240,"nodeType":"Identifier","messageId":"unusedVar","endLine":100,"endColumn":234241,"suggestions":[{"messageId":"removeVar","data":{"varName":"t"},"fix":{"range":[296691,296693],"text":""},"desc":"Remove unused variable 't'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":100,"column":234440,"nodeType":"Identifier","messageId":"unusedVar","endLine":100,"endColumn":234441,"suggestions":[{"messageId":"removeVar","data":{"varName":"e"},"fix":{"range":[296892,296894],"text":""},"desc":"Remove unused variable 'e'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'t' is defined but never used.","line":100,"column":234442,"nodeType":"Identifier","messageId":"unusedVar","endLine":100,"endColumn":234443,"suggestions":[{"messageId":"removeVar","data":{"varName":"t"},"fix":{"range":[296893,296895],"text":""},"desc":"Remove unused variable 't'."}]},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":234581,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":234582},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":234625,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":234626},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":234677,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":234678},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":234723,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":234724},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":234790,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":234791},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":234816,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":234817,"fix":{"range":[297029,297278],"text":"const a=Nt(\"data\",e[0].dataType,e[0].dims.length),i=Nt(\"inputIndices\",e[1].dataType,e[1].dims.length),l=Nt(\"scales\",e[2].dataType,e[2].dims.length),c=e.length>3?Nt(\"zeroPoint\",e[3].dataType,e[3].dims.length):void 0,p=Vt(\"output\",u,o.length),h=[a,i,l];"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":237822,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":237823,"fix":{"range":[300270,300285],"text":"const n=e.inputs;"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":238350,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":238351},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":238362,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":238363},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":238378,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":238379},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":238389,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":238390},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":238401,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":238402},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":238417,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":238418},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":238446,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":238447},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":238453,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":238454},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":238466,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":238467},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":238479,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":238480},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":238497,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":238498},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":238529,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":238530},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":100,"column":238555,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":238556,"fix":{"range":[300798,301061],"text":"const n=e[0].dims,r=e[0].dataType,a=n.length,s=e[1].dims,i=e[1].dataType,o=Tt.normalizeAxis(t.axis,a),l=n[o],u=s.slice(0),d=Tt.size(u),c=Nt(\"input\",r,a),p=Nt(\"indicesInput\",i,s.length),h=Vt(\"output\",r,u.length),m=[{type:12,data:d},{type:6,data:l},{type:12,data:o}];"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":239547,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":239548,"fix":{"range":[301995,302010],"text":"const n=e.inputs;"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":239955,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":239956},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":239975,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":239976},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":239996,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":239997},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":239998,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":239999},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":240000,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":240001},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":240080,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":240081,"fix":{"range":[302403,302540],"text":"const n=e[0].dims.slice(),r=e[1].dims.slice(),[a,s,i]=$t.getShapeOfGemmResult(n,t.transA,r,t.transB,3===e.length?e[2].dims:void 0),o=[a,s];"}},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":240153,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":240154},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":240166,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":240167},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":240281,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":240282,"fix":{"range":[302601,302751],"text":"const l=Tt.size(o),u=[{type:12,data:l},{type:12,data:a},{type:12,data:s},{type:12,data:i},{type:1,data:t.alpha},{type:1,data:t.beta}],d=[\"type\",\"type\"];"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":240915,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":240916},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":240959,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":240960},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":240993,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":240994},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":241027,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":241028},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":241049,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":241050},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":241128,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":241129,"fix":{"range":[303576,303618],"text":"const c=Vt(\"output\",e[0].dataType,o.length);"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":242137,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":242138},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":242144,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":242145},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":242154,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":242155},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":242164,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":242165},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":242174,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":242175},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":242184,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":242185},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":242194,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":242195},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":242204,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":242205,"fix":{"range":[304585,304666],"text":"const n=e[0],r=pi(e,1),a=pi(e,2),s=pi(e,3),i=pi(e,4),o=pi(e,5),l=pi(e,6),u=pi(e,7);"}},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":242329,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":242330},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":242341,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":242342},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":242353,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":242354},{"ruleId":"prefer-const","severity":2,"message":"'_' is never reassigned. Use 'const' instead.","line":100,"column":242416,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":242417},{"ruleId":"prefer-const","severity":2,"message":"'w' is never reassigned. Use 'const' instead.","line":100,"column":244680,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":244681},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":244723,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":244724,"fix":{"range":[307171,307184],"text":"const e=i.dims;"}},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":246336,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":246337},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":246346,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":246347},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":246359,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":246360,"fix":{"range":[308784,308866],"text":"const o=[r,a,s],l=Tt.size(o),u=[{type:12,data:l},{type:12,data:i},{type:12,data:s}];"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":246661,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":246662},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":246696,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":246697},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":246721,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":246722,"fix":{"range":[309109,309199],"text":"const r=Vt(\"qkv_with_bias\",t.dataType,o),a=Nt(\"qkv\",t.dataType,o),s=Nt(\"bias\",n.dataType,o);"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":247622,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":247623},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":247639,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":247640},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":247653,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":247654},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":247670,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":247671},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":247687,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":247688},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":247704,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":247705},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":247721,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":247722},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":247738,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":247739},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":247755,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":247756,"fix":{"range":[310070,310224],"text":"const n=hi(e.inputs,t),r=e.inputs[0],a=pi(e.inputs,1),s=pi(e.inputs,2),i=pi(e.inputs,3),o=pi(e.inputs,4),l=pi(e.inputs,5),u=pi(e.inputs,6),d=pi(e.inputs,7);"}},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":247916,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":247917},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":247961,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":247962,"fix":{"range":[310364,310478],"text":"const c=a&&s&&4===a.dims.length&&4===s.dims.length,p=_i(e,n.batchSize,n.numHeads,n.sequenceLength,n.headSize,r,i,0);"}},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":248131,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":248132},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":100,"column":248209,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":248210,"fix":{"range":[310579,310742],"text":"const h=_i(e,n.batchSize,n.numHeads,n.kvSequenceLength,n.headSize,a,i,n.hiddenSize),m=_i(e,n.batchSize,n.numHeads,n.kvSequenceLength,n.vHeadSize,s,i,2*n.hiddenSize);"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":248429,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":248430},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":248820,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":248821},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":248831,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":248832,"fix":{"range":[311268,311288],"text":"const t=e.length,n=[];"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":248861,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":248862,"fix":{"range":[311309,311364],"text":"const a=e[r].setByIndices(\"indices\",\"input[global_idx]\");"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":249219,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":249220},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":249231,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":249232},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":249244,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":249245},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":249260,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":249261},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":249296,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":249297},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":249322,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":249323},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":249347,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":249348},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":249373,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":249374},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":249378,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":249379},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":249387,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":249388},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":249470,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":249471,"fix":{"range":[311918,311934],"text":"const o=n.slice();"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":250472,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":250473,"fix":{"range":[312920,312963],"text":"const n=1===e.inputs.length?t:bi(e.inputs,t);"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":250562,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":250563},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":250571,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":250572},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":250586,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":250587,"fix":{"range":[313010,313077],"text":"const t=e.axis,n=e.splitSizes,r=e.numOutputs<0?n.length:e.numOutputs;"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":250923,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":250924},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":250930,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":250931},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":250937,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":250938},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":250944,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":250945},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":250951,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":250952,"fix":{"range":[313371,313410],"text":"const n=e[0],r=e[1],a=e[2],s=e[3],i=e[4];"}},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":251362,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":251363},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":251374,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":251375},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":251445,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":251446},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":251469,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":251470},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":100,"column":251552,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":251553},{"ruleId":"prefer-const","severity":2,"message":"'f' is never reassigned. Use 'const' instead.","line":100,"column":251575,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":251576,"fix":{"range":[314000,314050],"text":"const m=s&&0!==s.dims.length,f=i&&0!==i.dims.length;"}},{"ruleId":"prefer-const","severity":2,"message":"'y' is never reassigned. Use 'const' instead.","line":100,"column":253886,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":253887,"fix":{"range":[316334,316363],"text":"const y=e.length>4?e[5]:void 0;"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":254485,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":254486},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":254685,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":254686,"fix":{"range":[317133,317154],"text":"const n=$i(e.inputs,t);"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":254866,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":254867},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":254880,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":254881},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":254940,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":254941},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":255000,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":255001},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":255062,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":255063},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":255124,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":255125},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":255163,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":255164},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":255202,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":255203},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":255241,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":255242},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":255331,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":255332},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":255333,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":255334},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":100,"column":255335,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":255336},{"ruleId":"prefer-const","severity":2,"message":"'f' is never reassigned. Use 'const' instead.","line":100,"column":255404,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":255405,"fix":{"range":[317314,317926],"text":"const r=e.inputs[0],a=e.inputs[1]&&e.inputs[1].dims.length>0?e.inputs[1]:void 0,s=e.inputs[2]&&e.inputs[2].dims.length>0?e.inputs[2]:void 0,i=e.inputs[3]&&0!==e.inputs[3].dims.length?e.inputs[3]:void 0,o=e.inputs[4]&&0!==e.inputs[4].dims.length?e.inputs[4]:void 0,l=e.inputs.length>4?e.inputs[5]:void 0,u=e.inputs.length>5?e.inputs[6]:void 0,d=n.kvNumHeads?n.kvNumHeads:n.numHeads,c=vt({axis:2,numOutputs:3,splitSizes:[n.numHeads*n.headSize,d*n.headSize,d*n.headSize]}),[p,h,m]=a||s?[r,a,s]:e.compute(Mi([r],c),{inputs:[r],outputs:[-1,-1,-1]}),f=_i(e,n.batchSize,n.numHeads,n.sequenceLength,n.headSize,p,void 0,0);"}},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":255595,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":255596},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":255603,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":255604},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":255628,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":255629},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":255657,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":255658},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":255663,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":255664},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":255675,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":255676},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":100,"column":255685,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":255686,"fix":{"range":[318043,318142],"text":"const l=zt(s),u=1===l?\"f32\":`vec${l}f`,d=1===l?\"vec2f\":`mat2x${l}f`,c=a*i,p=[a,i,s/l],h=[a,i,2],m=[];"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":255954,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":255955},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":255979,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":255980,"fix":{"range":[318402,318515],"text":"const a=Nt(\"x\",t.dataType,3,l),s=[a,Nt(\"scale\",n.dataType,n.dims),Nt(\"bias\",r.dataType,r.dims),Vt(\"output\",1,3,2)];"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":257561,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":257562},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":257573,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":257574},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":257577,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":257578},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":257584,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":257585},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":257591,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":257592},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":257619,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":257620},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":257627,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":257628},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":257642,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":257643},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":257681,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":257682},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":257693,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":257694,"fix":{"range":[320009,320153],"text":"const r=t[0].dims,a=r,s=r[0],i=r[1],o=Tt.sizeFromDimension(r,2),l=zt(o),u=Tt.size(a)/l,d=Ei(e,t[0],t[1],t[2],s,o,i,n.epsilon),c=[s,i,o/l],p=[s,i];"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":257968,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":257969},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":258003,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":258004},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":258036,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":258037},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":258076,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":258077,"fix":{"range":[320416,320538],"text":"const n=Nt(\"x\",t[0].dataType,c.length,l),r=Nt(\"scale_shift\",1,p.length,2),a=Vt(\"output\",t[0].dataType,c.length,l),s=[n,r,a];"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":258673,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":258674},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":258685,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":258686},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":258689,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":258690},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":258696,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":258697},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":258712,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":258713},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":258742,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":258743},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":258750,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":258751},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":258765,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":258766},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":258817,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":258818,"fix":{"range":[321121,321286],"text":"const r=t[0].dims,a=r,s=r[0],i=r[r.length-1],o=Tt.sizeFromDimension(r,1)/i,l=zt(i),u=Tt.size(a)/l,d=[{type:12,data:o},{type:12,data:Math.floor(i/l)}],c=[0,r.length-1];"}},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":258879,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":258880},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":258949,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":258950,"fix":{"range":[321327,321437],"text":"const p=e.compute(Yt(e.inputs[0],c),{inputs:[e.inputs[0]],outputs:[-1]})[0],h=Ei(e,p,t[1],t[2],s,o,i,n.epsilon);"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":259226,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":259227},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":259246,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":259247},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":259275,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":259276},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":259285,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":259286},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":259301,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":259302,"fix":{"range":[321733,321778],"text":"const t=0===e?\"x\":\"y\",r=1===l?\"f32\":`vec${l}f`;"}},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":259586,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":259587},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":259626,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":259627,"fix":{"range":[321674,322111],"text":"const n=Ft(t[0].dataType),r=1===l?\"vec2f\":`mat${l}x2f`,s=e=>{let t=0===e?\"x\":\"y\",r=1===l?\"f32\":`vec${l}f`;switch(l){case 1:return`${n}(${r}(scale.${t}))`;case 2:return`vec2<${n}>(${r}(scale[0].${t}, scale[1].${t}))`;case 4:return`vec4<${n}>(${r}(scale[0].${t}, scale[1].${t}, scale[2].${t}, scale[3].${t}))`;default:throw new Error(`Not supported compoents ${l}`)}},i=Nt(\"input\",t[0].dataType,t[0].dims,l),o=Vt(\"output\",t[0].dataType,a,l);"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":260569,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":260570},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":260584,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":260585},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":260596,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":260597},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":260603,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":260604},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":260614,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":260615},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":260618,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":260619},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":260654,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":260655},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":260680,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":260681},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":260708,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":260709},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":260726,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":260727,"fix":{"range":[323017,323200],"text":"const r=t.simplified,a=e[0].dims,s=e[1],i=!r&&e[2],o=a,l=Tt.normalizeAxis(t.axis,a.length),u=Tt.sizeToDimension(a,l),d=Tt.sizeFromDimension(a,l),c=Tt.size(s.dims),p=i?Tt.size(i.dims):0;"}},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":260939,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":260940,"fix":{"range":[323387,323396],"text":"const h=[];"}},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":100,"column":261002,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":261003},{"ruleId":"prefer-const","severity":2,"message":"'f' is never reassigned. Use 'const' instead.","line":100,"column":261010,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":261011},{"ruleId":"prefer-const","severity":2,"message":"'g' is never reassigned. Use 'const' instead.","line":100,"column":261028,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":261029,"fix":{"range":[323450,323572],"text":"const m=zt(d),f=[\"type\",\"type\"],g=[{type:12,data:u},{type:1,data:d},{type:12,data:Math.floor(d/m)},{type:1,data:t.epsilon}];"}},{"ruleId":"prefer-const","severity":2,"message":"'_' is never reassigned. Use 'const' instead.","line":100,"column":261142,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":261143},{"ruleId":"prefer-const","severity":2,"message":"'w' is never reassigned. Use 'const' instead.","line":100,"column":261148,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":261149},{"ruleId":"prefer-const","severity":2,"message":"'y' is never reassigned. Use 'const' instead.","line":100,"column":261154,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":261155,"fix":{"range":[323590,323642],"text":"const _=n>1,w=n>2,y=[{dims:o,dataType:e[0].dataType}];"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":261447,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":261448},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":261467,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":261468,"fix":{"range":[323895,323989],"text":"const n=Ft(e[0].dataType),a=[Nt(\"x\",e[0].dataType,e[0].dims,m),Nt(\"scale\",s.dataType,s.dims,m)];"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":263147,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":263148},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":263154,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":263155,"fix":{"range":[325595,325622],"text":"const n=e[0],r=n.dims.length;"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":263269,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":263270},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":263315,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":263316},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":263338,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":263339,"fix":{"range":[325717,325797],"text":"const a=Math.floor((t.k+t.blockSize-1)/t.blockSize),s=t.blockSize/8*t.bits,i=e[1];"}},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":263478,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":263479,"fix":{"range":[325926,325942],"text":"const o=e[2].dims;"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":263577,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":263578},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":263589,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":263590,"fix":{"range":[326025,326082],"text":"const n=e[3].dims,r=t.bits>4?t.n*a:t.n*Math.floor((a+1)/2);"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":263713,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":263714},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":263725,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":263726},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":263736,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":263737},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":263745,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":263746},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":263751,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":263752},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":263757,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":263758},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":263774,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":263775},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":263787,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":263788},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":263804,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":263805},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":263820,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":263821},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":263830,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":263831},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":263838,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":263839},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":100,"column":263846,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":263847},{"ruleId":"prefer-const","severity":2,"message":"'f' is never reassigned. Use 'const' instead.","line":100,"column":263864,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":263865},{"ruleId":"prefer-const","severity":2,"message":"'g' is never reassigned. Use 'const' instead.","line":100,"column":263884,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":263885},{"ruleId":"prefer-const","severity":2,"message":"'_' is never reassigned. Use 'const' instead.","line":100,"column":263901,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":263902},{"ruleId":"prefer-const","severity":2,"message":"'w' is never reassigned. Use 'const' instead.","line":100,"column":263906,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":263907},{"ruleId":"prefer-const","severity":2,"message":"'y' is never reassigned. Use 'const' instead.","line":100,"column":263911,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":263912},{"ruleId":"prefer-const","severity":2,"message":"'b' is never reassigned. Use 'const' instead.","line":100,"column":263923,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":263924,"fix":{"range":[326161,326412],"text":"const n=e[0].dims,r=n.length,a=n[r-2],s=t.k,i=t.n,o=n.slice(0,r-2),l=Tt.size(o),u=e[1].dims[2]/4,d=e[0].dataType,c=zt(t.k),p=zt(u),h=zt(i),m=o.concat([a,i]),f=a>1&&i/h%2==0?2:1,g=Tt.size(m)/h/f,_=64,w=[],y=[l,a,s/c],b=Tt.convertShape(e[1].dims).slice();"}},{"ruleId":"prefer-const","severity":2,"message":"'v' is never reassigned. Use 'const' instead.","line":100,"column":264098,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":264099,"fix":{"range":[326546,326562],"text":"const v=[l,a,i/h];"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":264380,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":264381},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":264391,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":264392},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":264419,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":264420},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":264443,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":264444},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":264489,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":264490},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":264499,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":264500,"fix":{"range":[326828,327011],"text":"const r=y.length,a=Nt(\"a\",e[0].dataType,r,c),s=Nt(\"b\",12,b.length,p),i=Nt(\"scales\",e[2].dataType,e[2].dims.length),o=[a,s,i],l=4===e.length?Nt(\"zero_points\",12,e[3].dims.length):void 0;"}},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":264576,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":264577},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":100,"column":264587,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":264588},{"ruleId":"prefer-const","severity":2,"message":"'g' is never reassigned. Use 'const' instead.","line":100,"column":264620,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":264621},{"ruleId":"prefer-const","severity":2,"message":"'w' is never reassigned. Use 'const' instead.","line":100,"column":264640,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":264641,"fix":{"range":[327024,327261],"text":"const d=v.length,m=Vt(\"output\",e[0].dataType,d,h),g=Ft(e[0].dataType),w=(()=>{switch(c){case 1:return`array<${g}, 8>`;case 2:return`mat4x2<${g}>`;case 4:return`mat2x4<${g}>`;default:throw new Error(`${c}-component is not supported.`)}})();"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":269131,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":269132},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":269143,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":269144},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":269154,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":269155},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":269163,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":269164},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":269169,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":269170},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":269175,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":269176},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":269192,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":269193},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":269205,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":269206},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":269222,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":269223},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":269238,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":269239},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":269248,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":269249},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":269256,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":269257},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":100,"column":269274,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":269275},{"ruleId":"prefer-const","severity":2,"message":"'f' is never reassigned. Use 'const' instead.","line":100,"column":269296,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":269297},{"ruleId":"prefer-const","severity":2,"message":"'g' is never reassigned. Use 'const' instead.","line":100,"column":269304,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":269305},{"ruleId":"prefer-const","severity":2,"message":"'_' is never reassigned. Use 'const' instead.","line":100,"column":269312,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":269313},{"ruleId":"prefer-const","severity":2,"message":"'w' is never reassigned. Use 'const' instead.","line":100,"column":269318,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":269319},{"ruleId":"prefer-const","severity":2,"message":"'y' is never reassigned. Use 'const' instead.","line":100,"column":269334,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":269335},{"ruleId":"prefer-const","severity":2,"message":"'b' is never reassigned. Use 'const' instead.","line":100,"column":269349,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":269350},{"ruleId":"prefer-const","severity":2,"message":"'v' is never reassigned. Use 'const' instead.","line":100,"column":269354,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":269355},{"ruleId":"prefer-const","severity":2,"message":"'x' is never reassigned. Use 'const' instead.","line":100,"column":269366,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":269367,"fix":{"range":[331579,331855],"text":"const n=e[0].dims,r=n.length,a=n[r-2],s=t.k,i=t.n,o=n.slice(0,r-2),l=Tt.size(o),u=e[1].dims[2]/4,d=e[0].dataType,c=zt(t.k),p=zt(u),h=o.concat([a,i]),m=i%8==0?8:i%4==0?4:1,f=128/m,g=f*p*8,_=g/c,w=g/t.blockSize,y=Tt.size(h)/m,b=[],v=[l,a,s/c],x=Tt.convertShape(e[1].dims).slice();"}},{"ruleId":"prefer-const","severity":2,"message":"'M' is never reassigned. Use 'const' instead.","line":100,"column":269541,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":269542,"fix":{"range":[331989,332003],"text":"const M=[l,a,i];"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":269819,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":269820},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":269830,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":269831},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":269858,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":269859},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":269882,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":269883},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":269928,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":269929},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":269938,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":269939,"fix":{"range":[332267,332450],"text":"const r=v.length,a=Nt(\"a\",e[0].dataType,r,c),s=Nt(\"b\",12,x.length,p),i=Nt(\"scales\",e[2].dataType,e[2].dims.length),o=[a,s,i],l=4===e.length?Nt(\"zero_points\",12,e[3].dims.length):void 0;"}},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":270015,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":270016},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":270026,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":270027},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":270057,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":270058,"fix":{"range":[332463,332529],"text":"const u=M.length,d=Vt(\"output\",e[0].dataType,u),h=Ft(e[0].dataType);"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":277620,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":277621},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":277660,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":277661},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":277672,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":277673},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":277723,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":277724,"fix":{"range":[340068,340200],"text":"const n=Tt.padShape(e[0].dims.slice(),t.pads),r=e[0].dims,a=[{type:12,data:Tt.size(n)},{type:6,data:t.pads}],s=e.length>=3&&e[2].data;"}},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":278059,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":278060},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":278097,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":278098},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":278130,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":278131},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":278145,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":278146},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":278164,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":278165,"fix":{"range":[340507,340698],"text":"const i=Vt(\"output\",e[0].dataType,n.length),o=Nt(\"x\",e[0].dataType,r.length),l=o.type.value,u=Hi(i,r.length,t),d=[{name:\"output_size\",type:\"u32\"},{name:\"pads\",type:\"i32\",length:t.pads.length}];"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":278689,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":278690},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":278715,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":278716},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":278812,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":278813},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":278831,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":278832,"fix":{"range":[341137,341313],"text":"const n=e[1].getBigInt64Array(),r=e.length>=3&&e[2].data?10===e[2].dataType?e[2].getUint16Array()[0]:e[2].getFloat32Array()[0]:0,a=e[0].dims.length,s=new Int32Array(2*a).fill(0);"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":278881,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":278882,"fix":{"range":[341329,341359],"text":"const t=e[3].getBigInt64Array();"}},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":279055,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":279056,"fix":{"range":[341503,341512],"text":"const i=[];"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":279160,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":279161,"fix":{"range":[341608,341629],"text":"const n=Ki(e.inputs,t);"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":279375,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":279376},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":279395,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":279396,"fix":{"range":[341823,341864],"text":"const r=\"NHWC\"===t.format,a=e.dims.slice();"}},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":279441,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":279442},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":279485,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":279486},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":279509,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":279510},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":279529,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":279530},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":279556,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":279557,"fix":{"range":[341889,342025],"text":"const s=Object.hasOwnProperty.call(t,\"dilations\"),i=t.kernelShape.slice(),o=t.strides.slice(),l=s?t.dilations.slice():[],u=t.pads.slice();"}},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":279614,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":279615},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":279665,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":279666,"fix":{"range":[342062,342139],"text":"const d=kt.computePoolOutputShape(n,a,o,l,i,u,t.autoPad),c=Object.assign({},t);"}},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":279845,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":279846,"fix":{"range":[342293,342309],"text":"const p=d.slice();"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":279915,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":279916},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":279935,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":279936},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":280003,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":280004,"fix":{"range":[342363,342521],"text":"const n=\"NHWC\"===t.format,r=[{type:12,data:Tt.size(e)},{type:12,data:Tt.size(t.kernelShape)}],a=[{name:\"outputSize\",type:\"u32\"},{name:\"kernelSize\",type:\"u32\"}];"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":280101,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":280102},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":280141,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":280142},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":280173,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":280174},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":280201,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":280202},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":280227,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":280228,"fix":{"range":[342549,342689],"text":"const e=t.kernelShape[t.kernelShape.length-1],n=t.strides[t.strides.length-1],s=t.pads[t.pads.length/2-1],i=t.pads[t.pads.length-1],o=!!(s+i);"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":280463,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":280464},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":280503,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":280504},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":280535,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":280536},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":280563,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":280564,"fix":{"range":[342911,343041],"text":"const e=t.kernelShape[t.kernelShape.length-2],n=t.strides[t.strides.length-2],s=t.pads[t.pads.length/2-2],i=t.pads[t.pads.length-2];"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":280901,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":280902,"fix":{"range":[343349,343388],"text":"const e=Tt.computeStrides(t.kernelShape);"}},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":281250,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":281251},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":281270,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":281271},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":100,"column":281285,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":281286,"fix":{"range":[343698,343768],"text":"const p=\"NHWC\"===a.format,h=t.type.value,m=Vt(\"output\",t.type.tensor,r);"}},{"ruleId":"prefer-const","severity":2,"message":"'g' is never reassigned. Use 'const' instead.","line":100,"column":281363,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":281364},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":282134,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":282135,"fix":{"range":[344582,344598],"text":"const e=n-(p?3:2);"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":283338,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":283339},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":283361,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":283362},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":285397,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":285398},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":285399,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":285400},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":285412,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":285413},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":285447,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":285448},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":285582,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":285583,"fix":{"range":[348030,348053],"text":"const[u,d,c,p,h]=Ji(s,a);"}},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":285584,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":285585,"fix":{"range":[348030,348053],"text":"const[u,d,c,p,h]=Ji(s,a);"}},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":285586,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":285587,"fix":{"range":[348030,348053],"text":"const[u,d,c,p,h]=Ji(s,a);"}},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":285588,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":285589,"fix":{"range":[348030,348053],"text":"const[u,d,c,p,h]=Ji(s,a);"}},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":285590,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":285591,"fix":{"range":[348030,348053],"text":"const[u,d,c,p,h]=Ji(s,a);"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":285930,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":285931},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":285956,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":285957,"fix":{"range":[348378,348416],"text":"const t=0!==e.count_include_pad,n=ao(e);"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":286076,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":286077,"fix":{"range":[348524,348567],"text":"const r={countIncludePad:t,...n,cacheKey:\"\"};"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":286334,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":286335,"fix":{"range":[348782,348797],"text":"const t=e.format;"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":286476,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":286477},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":286478,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":286479},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":286491,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":286492},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":286527,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":286528,"fix":{"range":[348924,348998],"text":"const[a,s]=Zi(t,r,n),i=Nt(\"x\",t.dataType,t.dims.length),[o,l,u,d,c]=Ji(s,a);"}},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":286529,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":286530,"fix":{"range":[348924,348998],"text":"const[a,s]=Zi(t,r,n),i=Nt(\"x\",t.dataType,t.dims.length),[o,l,u,d,c]=Ji(s,a);"}},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":286531,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":286532,"fix":{"range":[348924,348998],"text":"const[a,s]=Zi(t,r,n),i=Nt(\"x\",t.dataType,t.dims.length),[o,l,u,d,c]=Ji(s,a);"}},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":286533,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":286534,"fix":{"range":[348924,348998],"text":"const[a,s]=Zi(t,r,n),i=Nt(\"x\",t.dataType,t.dims.length),[o,l,u,d,c]=Ji(s,a);"}},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":286535,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":286536,"fix":{"range":[348924,348998],"text":"const[a,s]=Zi(t,r,n),i=Nt(\"x\",t.dataType,t.dims.length),[o,l,u,d,c]=Ji(s,a);"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":286995,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":286996},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":287013,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":287014},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":287027,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":287028,"fix":{"range":[349443,349487],"text":"const t=e.storage_order,n=e.dilations,r=ao(e);"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":287231,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":287232,"fix":{"range":[349679,349731],"text":"const a={storageOrder:t,dilations:n,...r,cacheKey:\"\"};"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":287319,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":287320,"fix":{"range":[349767,349782],"text":"const t=e.format;"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":288939,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":288940},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":288959,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":288960,"fix":{"range":[351387,351431],"text":"const n=e[0].dims[t.axis],r=e[1].dims[t.axis];"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":289157,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":289158},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":289201,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":289202},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":289217,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":289218},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":289225,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":289226},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":289237,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":289238},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":289253,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":289254},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":289266,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":289267},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":289281,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":289282},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":289329,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":289330},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":289341,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":289342},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":289366,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":289367},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":289417,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":289418},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":100,"column":289456,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":289457},{"ruleId":"prefer-const","severity":2,"message":"'f' is never reassigned. Use 'const' instead.","line":100,"column":289479,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":289480},{"ruleId":"prefer-const","severity":2,"message":"'g' is never reassigned. Use 'const' instead.","line":100,"column":289487,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":289488},{"ruleId":"prefer-const","severity":2,"message":"'_' is never reassigned. Use 'const' instead.","line":100,"column":289504,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":289505},{"ruleId":"prefer-const","severity":2,"message":"'w' is never reassigned. Use 'const' instead.","line":100,"column":289512,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":289513},{"ruleId":"prefer-const","severity":2,"message":"'y' is never reassigned. Use 'const' instead.","line":100,"column":289524,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":289525},{"ruleId":"prefer-const","severity":2,"message":"'b' is never reassigned. Use 'const' instead.","line":100,"column":289556,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":289557},{"ruleId":"prefer-const","severity":2,"message":"'v' is never reassigned. Use 'const' instead.","line":100,"column":289581,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":289582},{"ruleId":"prefer-const","severity":2,"message":"'x' is never reassigned. Use 'const' instead.","line":100,"column":289625,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":289626},{"ruleId":"prefer-const","severity":2,"message":"'M' is never reassigned. Use 'const' instead.","line":100,"column":289653,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":289654,"fix":{"range":[351605,352113],"text":"const n=Tt.normalizeAxis(t.axis,e[0].dims.length),r=e[0].dataType,a=3===r,s=e[0].dims,i=e[1].dataType,o=Tt.size(s),l=3===r||2===r,u=l?[Math.ceil(Tt.size(e[0].dims)/4)]:e[0].dims,d=e[1].dims,c=e.length>2?e[2]:void 0,p=c?l?[Math.ceil(Tt.size(c.dims)/4)]:c.dims:void 0,h=0===d.length||1===d.length&&1===d[0],m=!1===h&&1===d.length,f=zt(o),g=h&&(!l||4===f),_=g?f:1,w=g&&!l?f:1,y=Nt(\"input\",l?12:r,u.length,w),b=Nt(\"scale\",i,d.length),v=c?Nt(\"zero_point\",l?12:r,p.length):void 0,x=Vt(\"output\",i,s.length,_),M=[y,b];"}},{"ruleId":"prefer-const","severity":2,"message":"'T' is never reassigned. Use 'const' instead.","line":100,"column":289678,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":289679,"fix":{"range":[352126,352138],"text":"const T=[u,d];"}},{"ruleId":"prefer-const","severity":2,"message":"'k' is never reassigned. Use 'const' instead.","line":100,"column":289703,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":289704,"fix":{"range":[352151,352236],"text":"const k=[{type:12,data:o/_},{type:12,data:n},{type:12,data:t.blockSize},...It(...T,s)];"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":292936,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":292937},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":292967,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":292968},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":292973,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":292974},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":292977,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":292978,"fix":{"range":[355384,355491],"text":"const a=Math.abs(Math.ceil((t-e)/n)),s=[a],i=a,o=[{type:12,data:i},{type:r,data:e},{type:r,data:n},...It(s)];"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":293109,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":293110},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":293135,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":293136},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":293150,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":293151,"fix":{"range":[355557,355681],"text":"const t=Vt(\"output\",r,s.length),n=t.type.value,a=[{name:\"outputSize\",type:\"u32\"},{name:\"start\",type:n},{name:\"delta\",type:n}];"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":294832,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":294833,"fix":{"range":[357280,357307],"text":"const r=new Array(n).fill(1);"}},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":294918,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":294919},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":294920,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":294921},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":294922,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":294923},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":294962,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":294963,"fix":{"range":[357366,357433],"text":"const[i,o,l]=n>10?[1,2,3]:[-1,e.length>1?1:-1,-1],u=e[0].dims.length;"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":299367,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":299368},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":299419,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":299420,"fix":{"range":[361815,361898],"text":"const r=new Array(n).fill(0).concat(new Array(n).fill(1)),a=0===e.length?r:e.slice();"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":299875,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":299876,"fix":{"range":[362323,362717],"text":"const r=(()=>{switch(n.keepAspectRatioPolicy){case\"not_larger\":return n.axes.length>0?Math.min(...n.axes.map((e=>t[e])),Number.MAX_VALUE):Math.min(...t,Number.MAX_VALUE);case\"not_smaller\":return n.axes.length>0?Math.max(...n.axes.map((e=>t[e])),Number.MIN_VALUE):Math.max(...t,Number.MIN_VALUE);default:throw new Error(`Keep aspect ratio policy ${n.keepAspectRatioPolicy} is not supported`)}})();"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":300290,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":300291,"fix":{"range":[362738,362754],"text":"const a=e.slice();"}},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":303593,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":303594},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":303595,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":303596},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":303597,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":303598},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":303599,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":303600},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":303637,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":303638,"fix":{"range":[366041,366104],"text":"const[s,i,o,l]=2===n.length?[-1,0,1,-1]:[0,2,3,1],u=e.type.value;"}},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":305490,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":305491},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":305506,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":305507},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":305508,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":305509},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":305525,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":305526},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":100,"column":305540,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":305541,"fix":{"range":[367938,369313],"text":"const d=2===n.length,[c,p]=d?[0,1]:[2,3],h=e.type.value,m=i=>{let d=i===c?\"row\":\"col\";return`\\n      fn ${d}CubicInterpolation(input_indices: ${e.type.indices}, output_indices: ${t.type.indices}) -> ${h} {\\n        var output_index = ${t.indicesGet(\"output_indices\",i)};\\n        var originalIdx: ${h} = getOriginalCoordinateFromResizedCoordinate(output_index, ${a[i]},\\n        ${r[i]}, ${n[i]}, ${s[i]}, ${s[i]} + ${n.length});\\n        var fractOriginalIdx: ${h} = originalIdx - floor(originalIdx);\\n        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);\\n\\n        if (${o} && (originalIdx < 0 || originalIdx > (${n[i]} - 1))) {\\n          return ${l};\\n        }\\n        var data: array<${h}, 4> = array<${h}, 4>(0.0, 0.0, 0.0, 0.0);\\n        for (var i: i32 = -1; i < 3; i++) {\\n          var ${d}: ${h} = originalIdx + ${h}(i);\\n          if (${d} < 0 || ${d} >= ${n[i]}) {\\n            ${u?\"coefs[i + 1] = 0.0;\\n                        continue;\":o?`return ${l};`:`${d} = max(0, min(${d}, ${n[i]} - 1));`};\\n          }\\n        var input_indices_copy: ${e.type.indices} = input_indices;\\n          ${e.indicesSet(\"input_indices_copy\",i,`u32(${d})`)};\\n          data[i + 1] = ${i===c?e.getByIndices(\"input_indices_copy\"):\"rowCubicInterpolation(input_indices_copy, output_indices)\"};\\n        }\\n        return cubicInterpolation1D(data, coefs);\\n      }`};"}},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":305550,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":305551,"fix":{"range":[367998,368022],"text":"const d=i===c?\"row\":\"col\";"}},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":308055,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":308056},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":308057,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":308058},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":308059,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":308060},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":308061,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":308062},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":308063,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":308064},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":308105,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":308106,"fix":{"range":[370503,370572],"text":"const[s,i,o,l,u]=3===n.length?[-1,0,1,2,-1]:[0,2,3,4,1],d=e.type.value;"}},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":311034,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":311035},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":311043,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":311044},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":311202,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":311203},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":311237,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":311238},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":311271,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":311272},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":311284,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":311285},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":100,"column":311334,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":311335},{"ruleId":"prefer-const","severity":2,"message":"'f' is never reassigned. Use 'const' instead.","line":100,"column":311385,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":311386},{"ruleId":"prefer-const","severity":2,"message":"'g' is never reassigned. Use 'const' instead.","line":100,"column":311408,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":311409,"fix":{"range":[373650,373875],"text":"const d=Vt(\"output\",e.dataType,l.length),c=Nt(\"input\",e.dataType,i.length),p=Tt.size(l),h=i.length===l.length&&i.every(((e,t)=>e===l[t])),m=\"tf_crop_and_resize\"===t.coordinateTransformMode,f=t.extrapolationValue,g=c.type.value;"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":313754,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":313755,"fix":{"range":[376202,376227],"text":"const t=e.customDataBuffer;"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":313835,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":313836},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":313840,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":313841},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":313845,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":313846},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":313850,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":313851,"fix":{"range":[376283,376310],"text":"const n=[],r=[],a=[],s=No(e);"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":314037,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":314038},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":314051,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":314052},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":314060,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":314061},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":314088,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":314089},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":314104,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":314105},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":314127,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":314128},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":314150,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":314151},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":314176,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":314177},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":314185,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":314186,"fix":{"range":[376485,376681],"text":"const t=e.antialias,n=e.axes,r=e.coordinateTransformMode,a=e.cubicCoeffA,s=0!==e.excludeOutside,i=e.extrapolationValue,o=e.keepAspectRatioPolicy,l=e.mode,u=\"\"===e.nearestMode?\"simple\":e.nearestMode;"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":314434,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":314435},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":314436,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":314437},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":314438,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":314439},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":314440,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":314441},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":314455,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":314456,"fix":{"range":[376882,376933],"text":"const[n,r,a,s]=e,{numHeads:i,rotaryEmbeddingDim:o}=t;"}},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":314476,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":314477,"fix":{"range":[376882,376933],"text":"const[n,r,a,s]=e,{numHeads:i,rotaryEmbeddingDim:o}=t;"}},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":315234,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":315235},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":315246,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":315247},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":315272,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":315273},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":315284,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":315285},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":315319,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":315320,"fix":{"range":[377682,377795],"text":"const l=n.dims[0],u=n.dims[n.dims.length-2],d=a.dims[0],c=Tt.sizeFromDimension(n.dims,1)/u,p=0===o?2*a.dims[1]:c/i;"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":315985,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":315986},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":315996,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":315997},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":316017,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":316018},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":316025,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":316026},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":316030,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":316031},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":316045,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":316046},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":316081,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":316082},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":316113,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":316114},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":316119,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":316120},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":316134,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":316135},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":316150,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":316151},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":316175,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":316176},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":100,"column":316198,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":316199},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":316587,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":316588},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":316632,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":316633},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":316684,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":316685},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":316733,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":316734},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":316782,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":316783,"fix":{"range":[379035,379280],"text":"const r=Nt(\"input\",e[0].dataType,e[0].dims.length),a=Nt(\"position_ids\",e[1].dataType,e[1].dims.length),s=Nt(\"cos_cache\",e[2].dataType,e[2].dims.length),i=Nt(\"sin_cache\",e[3].dataType,e[3].dims.length),o=Vt(\"output\",e[0].dataType,e[0].dims.length);"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":318742,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":318743},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":318749,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":318750},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":318756,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":318757,"fix":{"range":[381190,381215],"text":"const t=e[0],n=e[1],r=e[2];"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":319041,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":319042},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":319067,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":319068,"fix":{"range":[381489,381545],"text":"const a=t.dims[t.dims.length-1],s=t.dims[t.dims.length-2];"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":319459,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":319460,"fix":{"range":[381907,381918],"text":"const t=e[3];"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":319636,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":319637,"fix":{"range":[382084,382095],"text":"const t=e[4];"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":319815,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":319816},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":319830,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":319831},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":319842,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":319843},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":319855,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":319856},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":319859,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":319860},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":319863,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":319864},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":319880,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":319881},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":319911,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":319912},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":319928,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":319929},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":319941,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":319942},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":100,"column":319950,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":319951},{"ruleId":"prefer-const","severity":2,"message":"'f' is never reassigned. Use 'const' instead.","line":100,"column":319959,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":319960},{"ruleId":"prefer-const","severity":2,"message":"'g' is never reassigned. Use 'const' instead.","line":100,"column":319965,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":319966},{"ruleId":"prefer-const","severity":2,"message":"'_' is never reassigned. Use 'const' instead.","line":100,"column":319970,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":319971},{"ruleId":"prefer-const","severity":2,"message":"'w' is never reassigned. Use 'const' instead.","line":100,"column":319978,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":319979},{"ruleId":"prefer-const","severity":2,"message":"'y' is never reassigned. Use 'const' instead.","line":100,"column":320057,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":320058,"fix":{"range":[382263,382545],"text":"const a=t.simplified,s=e[0].dims,i=Tt.size(s),o=s,l=i,u=s.slice(-1)[0],d=r?s.slice(0,-1).concat(1):[],c=!a&&e.length>3,p=e.length>4,h=r&&n>1,m=r&&n>2,f=n>3,g=64,_=zt(u),w=[{type:12,data:l},{type:12,data:_},{type:12,data:u},{type:1,data:t.epsilon}],y=[{dims:o,dataType:e[0].dataType}];"}},{"ruleId":"no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":100,"column":320308,"nodeType":"Identifier","messageId":"unusedVar","endLine":100,"endColumn":320309,"suggestions":[{"messageId":"removeVar","data":{"varName":"e"},"fix":{"range":[382760,382762],"text":""},"desc":"Remove unused variable 'e'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'t' is defined but never used.","line":100,"column":320310,"nodeType":"Identifier","messageId":"unusedVar","endLine":100,"endColumn":320311,"suggestions":[{"messageId":"removeVar","data":{"varName":"t"},"fix":{"range":[382761,382763],"text":""},"desc":"Remove unused variable 't'."}]},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":320348,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":320349,"fix":{"range":[382796,382913],"text":"const n=[Nt(\"x\",e[0].dataType,e[0].dims,_),Nt(\"skip\",e[1].dataType,e[1].dims,_),Nt(\"gamma\",e[2].dataType,e[2].dims,_)];"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":320724,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":320725},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":320744,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":320745,"fix":{"range":[383172,383206],"text":"const r=Ft(e[0].dataType),s=Ft(1,_);"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":323214,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":323215,"fix":{"range":[385662,385672],"text":"const n=[0];"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":323868,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":323869,"fix":{"range":[386316,386325],"text":"const n=[];"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":324148,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":324149},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":324158,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":324159},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":325408,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":325409},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":325420,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":325421},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":325433,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":325434},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":325636,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":325637},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":325675,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":325676,"fix":{"range":[388084,388164],"text":"const i=t.starts.map(((e,t)=>Zo(e,t,n,a,s))),o=t.ends.map(((e,t)=>Zo(e,t,n,a,s)));"}},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":325958,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":325959,"fix":{"range":[388406,388437],"text":"const l=s.map((e=>Math.sign(e)));"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":326018,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":326019},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":326034,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":326035},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":326041,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":326042,"fix":{"range":[388466,388504],"text":"const r=(o[t]-i[t])/e,a=i[t],l=a+r*s[t];"}},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":326082,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":326083,"fix":{"range":[388530,388547],"text":"const u=n.slice(0);"}},{"ruleId":"no-unused-vars","severity":2,"message":"'t' is defined but never used.","line":100,"column":326109,"nodeType":"Identifier","messageId":"unusedVar","endLine":100,"endColumn":326110,"suggestions":[{"messageId":"removeVar","data":{"varName":"t"},"fix":{"range":[388560,388562],"text":""},"desc":"Remove unused variable 't'."}]},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":326154,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":326155},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":326188,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":326189},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":326226,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":326227},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":326271,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":326272},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":100,"column":326284,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":326285},{"ruleId":"prefer-const","severity":2,"message":"'f' is never reassigned. Use 'const' instead.","line":100,"column":326446,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":326447,"fix":{"range":[388602,388988],"text":"const d={dims:u,dataType:e[0].dataType},c=Vt(\"output\",e[0].dataType,u.length),p=Nt(\"input\",e[0].dataType,e[0].dims.length),h=Tt.size(u),m=[{name:\"outputSize\",type:\"u32\"},{name:\"starts\",type:\"u32\",length:i.length},{name:\"signs\",type:\"i32\",length:l.length},{name:\"steps\",type:\"u32\",length:s.length}],f=[{type:12,data:h},{type:12,data:i},{type:6,data:l},{type:12,data:s},...It(e[0].dims,u)];"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":327177,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":327178,"fix":{"range":[389625,389646],"text":"const n=Yo(e.inputs,t);"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":327245,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":327246},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":327256,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":327257},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":327265,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":327266,"fix":{"range":[389693,389726],"text":"const t=e.starts,n=e.ends,r=e.axes;"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":327443,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":327444},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":327457,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":327458},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":327466,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":327467},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":327479,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":327480},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":327490,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":327491},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":327519,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":327520},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":327655,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":327656},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":327664,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":327665},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":327673,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":327674},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":327679,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":327680},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":100,"column":327687,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":327688},{"ruleId":"prefer-const","severity":2,"message":"'f' is never reassigned. Use 'const' instead.","line":100,"column":327693,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":327694},{"ruleId":"prefer-const","severity":2,"message":"'g' is never reassigned. Use 'const' instead.","line":100,"column":327723,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":327724},{"ruleId":"prefer-const","severity":2,"message":"'_' is never reassigned. Use 'const' instead.","line":100,"column":327758,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":327759},{"ruleId":"prefer-const","severity":2,"message":"'w' is never reassigned. Use 'const' instead.","line":100,"column":327773,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":327774},{"ruleId":"prefer-const","severity":2,"message":"'y' is never reassigned. Use 'const' instead.","line":100,"column":327873,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":327874,"fix":{"range":[390103,393299],"text":"const d=n.dims,c=d[i-1],p=s/c,h=zt(c),m=c/h,f=Nt(\"x\",n.dataType,n.dims,h),g=Vt(\"result\",n.dataType,n.dims,h),_=f.type.value,w=\"f32\"===Ft(n.dataType)?`var threadMax = ${_}(-3.402823e+38f);`:`var threadMax = ${_}(-65504.0h);`,y=e.compute({name:\"Softmax\",shaderCache:{hint:`${h}`,inputDependencies:[\"type\"]},getRunData:()=>({outputs:[{dims:d,dataType:n.dataType}],dispatchGroup:{x:p},programUniforms:[{type:6,data:m}]}),getShaderSource:e=>`\\n      var<workgroup> rowMaxShared : ${_};\\n      var<workgroup> rowSumShared : ${_};\\n      var<workgroup> threadShared : array<${_}, 64>;\\n\\n      fn getValue(row: i32, col: i32, row_stride: i32) -> ${_} {\\n        let index = row * row_stride + col;\\n        return x[index];\\n      }\\n\\n      fn setValue(row: i32, col: i32, row_stride: i32, value: ${_}) {\\n        let index = row * row_stride + col;\\n        result[index] = value;\\n      }\\n      ${e.registerUniform(\"packedCols\",\"i32\").declareVariables(f,g)}\\n      ${e.mainStart()}\\n        let gindex = i32(global_idx);\\n        let lindex = i32(local_idx);\\n        const wg = 64;\\n        let row = gindex / wg;\\n        let cols = uniforms.packedCols;\\n        let row_stride : i32 = uniforms.packedCols;\\n\\n        // find the rows max\\n        ${w}\\n        for (var col = lindex; col < cols; col += wg) {\\n          let value = getValue(row, col, row_stride);\\n          threadMax = max(threadMax, value);\\n        }\\n        if (lindex < cols) {\\n          threadShared[lindex] = threadMax;\\n        }\\n        workgroupBarrier();\\n\\n        var reduceSize = min(cols, wg);\\n        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {\\n          reduceSize = currSize + (reduceSize & 1);\\n          if (lindex < currSize) {\\n            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);\\n          }\\n          workgroupBarrier();\\n        }\\n        if (lindex == 0) {\\n          rowMaxShared = ${_}(${((e,t)=>4===t?`max(max(${e}.x, ${e}.y), max(${e}.z, ${e}.w))`:2===t?`max(${e}.x, ${e}.y)`:3===t?`max(max(${e}.x, ${e}.y), ${e}.z)`:e)(\"threadShared[0]\",h)});\\n        }\\n        workgroupBarrier();\\n\\n        // find the rows sum\\n        var threadSum = ${_}(0.0);\\n        for (var col = lindex; col < cols; col += wg) {\\n          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);\\n          threadSum += subExp;\\n        }\\n        threadShared[lindex] = threadSum;\\n        workgroupBarrier();\\n\\n        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {\\n          if (lindex < currSize) {\\n            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];\\n          }\\n          workgroupBarrier();\\n        }\\n        if (lindex == 0) {\\n          rowSumShared = ${_}(${Lt(\"threadShared[0]\",h)});\\n        }\\n        workgroupBarrier();\\n\\n        // calculate final value for each element in the row\\n        for (var col = lindex; col < cols; col += wg) {\\n          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;\\n          setValue(row, col, row_stride, value);\\n        }\\n      }`},{inputs:[n],outputs:[l?-1:0]})[0];"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":331574,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":331575,"fix":{"range":[394022,394031],"text":"const n=[];"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":331649,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":331650},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":331661,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":331662},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":331675,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":331676},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":331685,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":331686},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":331698,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":331699},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":331714,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":331715},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":331739,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":331740,"fix":{"range":[394097,394217],"text":"const n=e[0].dims,r=t??ol(e[1]),a=ul(n,r),s=Tt.size(a),i=e[0].dataType,o=Nt(\"input\",i,n.length),l=Vt(\"output\",i,a.length);"}},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":332800,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":332801},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":332833,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":332834},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":332881,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":332882},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":332929,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":332930},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":332977,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":332978},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":333025,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":333026,"fix":{"range":[395473,396376],"text":"const e=(e,t,n=\"\")=>{let r=`a_data[index_a${t}][component_a${t}]`,a=`b_data[index_b${t}][component_b${t}]`,s=`bool(c_data[index_c${t}] & (0xffu << (component_c${t} * 8)))`;return`\\n            let output_indices${t} = ${i.offsetToIndices(`global_idx * 4u + ${t}u`)};\\n            let offset_a${t} = ${o.broadcastedIndicesToOffset(`output_indices${t}`,i)};\\n            let offset_b${t} = ${l.broadcastedIndicesToOffset(`output_indices${t}`,i)};\\n            let offset_c${t} = ${u.broadcastedIndicesToOffset(`output_indices${t}`,i)};\\n            let index_a${t} = offset_a${t} / 4u;\\n            let index_b${t} = offset_b${t} / 4u;\\n            let index_c${t} = offset_c${t} / 4u;\\n            let component_a${t} = offset_a${t} % 4u;\\n            let component_b${t} = offset_b${t} % 4u;\\n            let component_c${t} = offset_c${t} % 4u;\\n            ${e}[${t}] = ${n}(${d(r,a,s)});\\n          `};"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":333044,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":333045},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":333085,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":333086},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":333126,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":333127,"fix":{"range":[395492,395643],"text":"const r=`a_data[index_a${t}][component_a${t}]`,a=`b_data[index_b${t}][component_b${t}]`,s=`bool(c_data[index_c${t}] & (0xffu << (component_c${t} * 8)))`;"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":334755,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":334756},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":334767,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":334768},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":334779,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":334780},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":334791,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":334792},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":334807,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":334808},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":334874,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":334875,"fix":{"range":[397322,397368],"text":"const e=Mt.calcShape(Mt.calcShape(t,n,!1),r,!1);"}},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":335006,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":335007,"fix":{"range":[397454,397475],"text":"const l=Math.ceil(o/4);"}},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":337508,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":337509},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":337530,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":337531,"fix":{"range":[399956,400021],"text":"const s=this.backend.device,i=this.backend.getComputePassEncoder();"}},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":337639,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":337640,"fix":{"range":[400087,400096],"text":"const o=[];"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":337652,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":337653,"fix":{"range":[400100,400105],"text":"const e"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":337721,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":337722,"fix":{"range":[400169,400174],"text":"const e"}},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":337827,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":337828,"fix":{"range":[400275,400384],"text":"const l=s.createBindGroup({layout:e.computePipeline.getBindGroupLayout(0),entries:o,label:e.programInfo.name});"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":337981,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":337982,"fix":{"range":[400429,400537],"text":"const t={kernelId:this.backend.currentKernelId,computePipeline:e.computePipeline,bindGroup:l,dispatchGroup:r};"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":338631,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":338632},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":338653,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":338654,"fix":{"range":[401079,401110],"text":"const n=this.backend.device,r=[];"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":338714,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":338715},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":338749,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":338750},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":338772,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":338773},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":338830,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":338831,"fix":{"range":[401162,401328],"text":"const a=Gt(t,this.backend.device.limits),s=e.getShaderSource(a),i=`${r.join(\"\\n\")}\\n${a.additionalImplementations}\\n${s}`,o=n.createShaderModule({code:i,label:e.name});"}},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":338939,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":338940,"fix":{"range":[401387,401484],"text":"const l=n.createComputePipeline({compute:{module:o,entryPoint:\"main\"},layout:\"auto\",label:e.name});"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":339154,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":339155},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":339181,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":339182},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":339211,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":339212},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":339241,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":339242,"fix":{"range":[401602,401755],"text":"const t=\"number\"==typeof e?e:e.x,n=\"number\"==typeof e?1:e.y||1,r=\"number\"==typeof e?1:e.z||1,a=this.backend.device.limits.maxComputeWorkgroupsPerDimension;"}},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":339341,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":339342},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":339701,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":339702,"fix":{"range":[402149,402158],"text":"const n=[];"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":339738,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":339739,"fix":{"range":[402186,402206],"text":"const a=e[r].dataType;"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":339843,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":339844,"fix":{"range":[402291,402314],"text":"const t=e[r].dims.length;"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":339904,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":339905,"fix":{"range":[402352,402378],"text":"const t=e[r].dims.join(\",\");"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":341068,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":341069},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":341073,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":341074,"fix":{"range":[403516,404067],"text":"const n=[],r={requiredLimits:{maxComputeWorkgroupStorageSize:t.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:t.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:t.limits.maxStorageBufferBindingSize,maxBufferSize:t.limits.maxBufferSize,maxComputeInvocationsPerWorkgroup:t.limits.maxComputeInvocationsPerWorkgroup,maxComputeWorkgroupSizeX:t.limits.maxComputeWorkgroupSizeX,maxComputeWorkgroupSizeY:t.limits.maxComputeWorkgroupSizeY,maxComputeWorkgroupSizeZ:t.limits.maxComputeWorkgroupSizeZ},requiredFeatures:n};"}},{"ruleId":"no-undef","severity":2,"message":"'GPUValidationError' is not defined.","line":100,"column":342183,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":342201},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":100,"column":342203,"nodeType":"MemberExpression","messageId":"unexpected","endLine":100,"endColumn":342216},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":342791,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":342792},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":342818,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":342819,"fix":{"range":[405239,405275],"text":"const e=this.getCommandEncoder(),t={};"}},{"ruleId":"no-undef","severity":2,"message":"'GPUBufferUsage' is not defined.","line":100,"column":343459,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":343473},{"ruleId":"no-undef","severity":2,"message":"'GPUBufferUsage' is not defined.","line":100,"column":343483,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":343497},{"ruleId":"no-undef","severity":2,"message":"'GPUMapMode' is not defined.","line":100,"column":343872,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":343882},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":343904,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":343905},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":343945,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":343946,"fix":{"range":[406352,406426],"text":"const t=new BigUint64Array(e.getMappedRange()),n=this.pendingQueries.get(e);"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":344008,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":344009},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":344015,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":344016},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":344028,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":344029},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":344050,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":344051},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":344065,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":344066},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":344080,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":344081},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":344096,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":344097},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":344117,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":344118},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":344139,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":344140},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":344148,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":344149,"fix":{"range":[406456,406611],"text":"const r=n[e],a=r.kernelId,s=this.kernels.get(a),i=s.kernelType,o=s.kernelName,l=r.programName,u=r.inputTensorViews,d=r.outputTensorViews,c=t[2*e],p=t[2*e+1];"}},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":344217,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":344218},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":100,"column":344248,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":344249,"fix":{"range":[406665,406731],"text":"const h=Number(c-this.queryTimeBase),m=Number(p-this.queryTimeBase);"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":100,"column":344846,"nodeType":"MemberExpression","messageId":"unexpected","endLine":100,"endColumn":344857},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":345042,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":345043,"fix":{"range":[407490,407499],"text":"const i=[];"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":345079,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":345080,"fix":{"range":[407527,407543],"text":"const n=t[e].data;"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":345113,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":345114,"fix":{"range":[407561,407594],"text":"const r=this.gpuDataManager.get(n);"}},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":345217,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":345218},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":345233,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":345234},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":345251,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":345252},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":345270,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":345271,"fix":{"range":[407657,407757],"text":"const{outputs:o,dispatchGroup:l,programUniforms:u}=e.getRunData(t),d=0===n.length?o.map(((e,t)=>t)):n;"}},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":345407,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":345408},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":345412,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":345413},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":345565,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":345566},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":345577,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":345578},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":345589,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":345590,"fix":{"range":[408013,408107],"text":"const t=-1===d[e],n=-2===d[e],i=t||n?a(o[e].dataType,o[e].dims):r(d[e],o[e].dataType,o[e].dims);"}},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":345692,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":345693,"fix":{"range":[408140,408178],"text":"const l=this.gpuDataManager.get(i.data);"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":346168,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":346169},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":346192,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":346193,"fix":{"range":[408640,408686],"text":"const r=\"number\"==typeof n.data?[n.data]:n.data;"}},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":346265,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":346266},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":346432,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":346433,"fix":{"range":[408880,408902],"text":"const o=10===n.type?8:4;"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":346506,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":346507,"fix":{"range":[408954,408963],"text":"const n=16;"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":346534,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":346535,"fix":{"range":[408982,409007],"text":"const r=new ArrayBuffer(e);"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":346578,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":346579},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":346585,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":346586,"fix":{"range":[409026,409079],"text":"const a=t[n],s=\"number\"==typeof e.data?[e.data]:e.data;"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":346915,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":346916,"fix":{"range":[409363,409446],"text":"const a=this.gpuDataManager.create(e,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);"}},{"ruleId":"no-undef","severity":2,"message":"'GPUBufferUsage' is not defined.","line":100,"column":346946,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":346960},{"ruleId":"no-undef","severity":2,"message":"'GPUBufferUsage' is not defined.","line":100,"column":346970,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":346984},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":100,"column":347116,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":347117},{"ruleId":"prefer-const","severity":2,"message":"'f' is never reassigned. Use 'const' instead.","line":100,"column":347168,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":347169},{"ruleId":"prefer-const","severity":2,"message":"'g' is never reassigned. Use 'const' instead.","line":100,"column":347189,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":347190},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":347629,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":347630},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":347636,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":347637},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":347645,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":347646},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":347688,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":347689,"fix":{"range":[410077,410171],"text":"const t=u[e],n=t.type,r=\"number\"==typeof t.data?1:t.data.length,[a,s]=_.uniformVariablesInfo[e];"}},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":347690,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":347691,"fix":{"range":[410077,410171],"text":"const t=u[e],n=t.type,r=\"number\"==typeof t.data?1:t.data.length,[a,s]=_.uniformVariablesInfo[e];"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":348043,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":348044,"fix":{"range":[410491,410599],"text":"const e={kernelId:this.currentKernelId,programName:_.programInfo.name,inputTensorViews:t,outputTensorViews:p};"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":348595,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":348596,"fix":{"range":[411043,411059],"text":"const a=fl.get(e);"}},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":348665,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":348666,"fix":{"range":[411113,411184],"text":"const s={kernelType:e,kernelName:r,kernelEntry:a[0],attributes:[a[1],n]};"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":348775,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":348776,"fix":{"range":[411223,411262],"text":"const t=this.kernelPersistentData.get(e);"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":348824,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":348825,"fix":{"range":[411272,411277],"text":"const e"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":348981,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":348982,"fix":{"range":[411429,411455],"text":"const r=this.kernels.get(e);"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":349057,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":349058},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":349072,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":349073},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":349087,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":349088},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":349103,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":349104,"fix":{"range":[411505,411570],"text":"const a=r.kernelType,s=r.kernelName,i=r.kernelEntry,o=r.attributes;"}},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":349357,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":349358,"fix":{"range":[411805,411826],"text":"const l=this.env.debug;"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":349686,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":349687,"fix":{"range":[412134,412139],"text":"const e"}},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":349922,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":349923},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":349933,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":349934,"fix":{"range":[412370,412437],"text":"const s=a.get(t),i=this.gpuDataManager.registerExternalBuffer(n,r,s);"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":350034,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":350035,"fix":{"range":[412482,412527],"text":"const t=this.sessionExternalDataMapping.get(e);"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":350206,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":350207,"fix":{"range":[412654,412687],"text":"const t=this.gpuDataManager.get(e);"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":350350,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":350351,"fix":{"range":[412798,412823],"text":"const r=await _t(this,e,t);"}},{"ruleId":"no-undef","severity":2,"message":"'GPUBufferUsage' is not defined.","line":100,"column":351068,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":351082},{"ruleId":"no-undef","severity":2,"message":"'GPUBufferUsage' is not defined.","line":100,"column":351092,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":351106},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":351575,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":351576},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":351629,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":351630},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":351686,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":351687,"fix":{"range":[414023,414149],"text":"const e=this.capturedCommandList.get(this.currentSessionId),t=this.capturedPendingKernels.get(this.currentSessionId),n=e.length;"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":351745,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":351746},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":351776,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":351777,"fix":{"range":[414193,414235],"text":"const n=this.getComputePassEncoder(),a=e[r];"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":353671,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":353672,"fix":{"range":[416119,416164],"text":"const r=MLTensorUsage.READ|MLTensorUsage.WRITE;"}},{"ruleId":"no-undef","severity":2,"message":"'MLTensorUsage' is not defined.","line":100,"column":353673,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":353686},{"ruleId":"no-undef","severity":2,"message":"'MLTensorUsage' is not defined.","line":100,"column":353692,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":353705},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":354495,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":354496,"fix":{"range":[416943,416954],"text":"const e=xl();"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":354578,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":354579,"fix":{"range":[417026,417063],"text":"const t=this.tensorTrackersById.get(e);"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":354853,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":354854,"fix":{"range":[417301,417338],"text":"const a=this.tensorTrackersById.get(e);"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":354974,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":354975,"fix":{"range":[417422,417459],"text":"const n=this.tensorTrackersById.get(e);"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":355185,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":355186,"fix":{"range":[417633,417670],"text":"const n=this.tensorTrackersById.get(e);"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":355318,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":355319,"fix":{"range":[417766,417771],"text":"const t"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":355460,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":355461},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":355467,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":355468,"fix":{"range":[417908,418009],"text":"const a=xl(),s=new Ml({sessionId:this.backend.currentSessionId,context:e,tensor:t,dataType:n,shape:r});"}},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":355677,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":355678,"fix":{"range":[418125,418161],"text":"const s=this.backend.currentSessionId;"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":355717,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":355718,"fix":{"range":[418165,418173],"text":"const[n,r]"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":355719,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":355720,"fix":{"range":[418165,418173],"text":"const[n,r]"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":355783,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":355784,"fix":{"range":[418231,418269],"text":"const e=this.freeTensors.splice(n,1)[0];"}},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":355844,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":355845,"fix":{"range":[418292,418326],"text":"const i=this.backend.currentContext;"}},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":355961,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":355962,"fix":{"range":[418409,418501],"text":"const o=await i.createTensor({dataType:e,shape:t,dimensions:t,usage:n,writable:r,readable:a});"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":356742,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":356743,"fix":{"range":[419190,419237],"text":"const e=this.getMLContext(this.currentSessionId);"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":357057,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":357058,"fix":{"range":[419505,419544],"text":"const t=this.mlContextBySessionId.get(e);"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":357192,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":357193,"fix":{"range":[419640,419680],"text":"const n=this.sessionIdsByMLContext.get(t);"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":357559,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":357560,"fix":{"range":[420007,420023],"text":"const a=Cl.get(t);"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":358050,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":358051,"fix":{"range":[420498,420541],"text":"const n=await this.tensorManager.download(e);"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":358133,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":358134,"fix":{"range":[420581,420597],"text":"const r=Cl.get(t);"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":358207,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":358208,"fix":{"range":[420655,420722],"text":"const a=this.tensorManager.registerTensor(this.currentContext,e,r,n);"}},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":358545,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":358546,"fix":{"range":[420993,421008],"text":"const o=s.get(i);"}},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":358750,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":358751},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":359381,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":376830},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":359695,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":359696,"fix":{"range":[422143,422168],"text":"const e=Tt.size(this.dims);"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":359882,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":359883,"fix":{"range":[422330,422355],"text":"const e=Tt.size(this.dims);"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":360068,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":360069,"fix":{"range":[422516,422541],"text":"const e=Tt.size(this.dims);"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":360269,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":360270,"fix":{"range":[422717,422742],"text":"const e=Tt.size(this.dims);"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":360648,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":360649},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":360700,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":360701,"fix":{"range":[423148,423161],"text":"const s=r[a++];"}},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":360793,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":360794,"fix":{"range":[423241,423250],"text":"const i=[];"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":360823,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":360824},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":360832,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":360833},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":360841,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":360842},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":360850,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":360851,"fix":{"range":[423271,423307],"text":"const t=r[a++],n=r[a++],s=r[a++],o=[];"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":361430,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":361431},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":361502,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":361503,"fix":{"range":[423878,423971],"text":"const n=t?.inputs?.map((e=>\"number\"==typeof e?this.inputs[e]:e))??this.inputs,r=t?.outputs??[];"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":361614,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":361615,"fix":{"range":[424062,424076],"text":"const n=Qe(e,t);"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":361681,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":361682,"fix":{"range":[424129,424182],"text":"const r=n>0?this.backend.gpuDataManager.create(n).id:0;"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":361799,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":361800,"fix":{"range":[424247,424277],"text":"const n=this.module.stackSave();"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":361833,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":361834},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":362288,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":362289,"fix":{"range":[424736,424753],"text":"const a=t.jsepInit;"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":362429,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":362430,"fix":{"range":[424877,424890],"text":"const e=new bl;"}},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":362717,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":362718,"fix":{"range":[425165,425206],"text":"const s=t.HEAPU8.subarray(n>>>0,(n>>>0)+a);"}},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":363142,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":363143,"fix":{"range":[425590,425610],"text":"const i=new Wu(t,e,r);"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":363255,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":363256,"fix":{"range":[425703,425719],"text":"const e=new Sl(n);"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":363623,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":363624,"fix":{"range":[426071,426095],"text":"const n=(Cd(),G(Gu)).init;"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":363998,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":363999,"fix":{"range":[426446,426477],"text":"const n=e.webgpu.powerPreference;"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":364143,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":364144,"fix":{"range":[426591,426627],"text":"const r=e.webgpu.forceFallbackAdapter;"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":364681,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":364682},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":364688,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":364689,"fix":{"range":[427129,427156],"text":"const t=De(),n=t.stackSave();"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":364712,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":364713,"fix":{"range":[427160,427182],"text":"const n=t.stackAlloc(8);"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":364892,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":364893},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":364899,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":364900,"fix":{"range":[427340,427377],"text":"const t=De(),n=t._malloc(e.byteLength);"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":365097,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":365098},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":365223,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":365224},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":365228,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":365229},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":365294,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":365295,"fix":{"range":[427742,427751],"text":"const e=[];"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":365307,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":365308,"fix":{"range":[427755,427760],"text":"const n"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":365332,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":365333,"fix":{"range":[427780,427814],"text":"const t=\"string\"==typeof n?n:n.path;"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":365469,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":365470,"fix":{"range":[427917,427922],"text":"const e"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":365681,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":365682},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":365685,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":365686},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":365698,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":365699},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":365713,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":365714},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":365729,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":365730,"fix":{"range":[428129,428202],"text":"const t=e,n=t?.context,r=t?.gpuDevice,s=t?.deviceType,i=t?.powerPreference;"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":366160,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":366161},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":366162,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":366163},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":366171,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":366172},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":366197,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":366198},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":100,"column":366202,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":366203},{"ruleId":"prefer-const","severity":2,"message":"'f' is never reassigned. Use 'const' instead.","line":100,"column":366207,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":366208,"fix":{"range":[428608,428664],"text":"const[e,c]=Zu(s),p=!!t?.enableGraphCapture,h=[],m=[],f=[];"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":366237,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":366238,"fix":{"range":[428685,428715],"text":"const e=a._OrtGetInputName(s,t);"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":366362,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":366363,"fix":{"range":[428810,428841],"text":"const n=a._OrtGetOutputName(s,e);"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":366442,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":366443,"fix":{"range":[428890,428914],"text":"const r=a.UTF8ToString(n);"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":366550,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":366551,"fix":{"range":[428998,429113],"text":"const e=\"string\"==typeof t?.preferredOutputLocation?t.preferredOutputLocation:t?.preferredOutputLocation?.[r]??\"cpu\";"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":367482,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":367483},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":367489,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":367490,"fix":{"range":[429930,429953],"text":"const t=De(),n=Yu.get(e);"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":367579,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":367580,"fix":{"range":[430027,430044],"text":"const[r,a,s,i,o]=n;"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":367581,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":367582,"fix":{"range":[430027,430044],"text":"const[r,a,s,i,o]=n;"}},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":367583,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":367584,"fix":{"range":[430027,430044],"text":"const[r,a,s,i,o]=n;"}},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":367585,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":367586,"fix":{"range":[430027,430044],"text":"const[r,a,s,i,o]=n;"}},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":367587,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":367588,"fix":{"range":[430027,430044],"text":"const[r,a,s,i,o]=n;"}},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":367849,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":367850},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":367856,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":367857},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":367863,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":367864},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":367870,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":367871},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":368149,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":368150,"fix":{"range":[430597,430618],"text":"const t=e[2].gpuBuffer;"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":368184,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":368185,"fix":{"range":[430632,430659],"text":"const n=l.jsepRegisterBuffer;"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":368342,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":368343,"fix":{"range":[430790,430810],"text":"const t=e[2].mlTensor;"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":368376,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":368377,"fix":{"range":[430824,430853],"text":"const n=l.jsepRegisterMLTensor;"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":368516,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":368517,"fix":{"range":[430964,430975],"text":"const t=e[2];"}},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":368842,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":368843},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":368858,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":368859,"fix":{"range":[431290,431337],"text":"const p=l.stackSave(),h=l.stackAlloc(4*d.length);"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":368935,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":368936,"fix":{"range":[431383,431436],"text":"const n=l._OrtCreateTensor(Xe(u),i,o,h,d.length,tt(c));"}},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":369127,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":369128},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":369134,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":369135,"fix":{"range":[431575,431598],"text":"const i=De(),o=Yu.get(e);"}},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":369222,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":369223},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":369229,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":369230},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":369236,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":369237},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":100,"column":369243,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":369244},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":369250,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":369251},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":369257,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":369258},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":100,"column":369264,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":369265},{"ruleId":"prefer-const","severity":2,"message":"'f' is never reassigned. Use 'const' instead.","line":100,"column":369275,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":369276},{"ruleId":"prefer-const","severity":2,"message":"'w' is never reassigned. Use 'const' instead.","line":100,"column":369295,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":369296},{"ruleId":"prefer-const","severity":2,"message":"'y' is never reassigned. Use 'const' instead.","line":100,"column":369300,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":369301},{"ruleId":"prefer-const","severity":2,"message":"'b' is never reassigned. Use 'const' instead.","line":100,"column":369305,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":369306},{"ruleId":"prefer-const","severity":2,"message":"'v' is never reassigned. Use 'const' instead.","line":100,"column":369310,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":369311},{"ruleId":"prefer-const","severity":2,"message":"'x' is never reassigned. Use 'const' instead.","line":100,"column":369326,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":369327},{"ruleId":"prefer-const","severity":2,"message":"'M' is never reassigned. Use 'const' instead.","line":100,"column":369346,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":369347},{"ruleId":"prefer-const","severity":2,"message":"'T' is never reassigned. Use 'const' instead.","line":100,"column":369366,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":369367},{"ruleId":"prefer-const","severity":2,"message":"'k' is never reassigned. Use 'const' instead.","line":100,"column":369386,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":369387},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":369707,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":369708,"fix":{"range":[432148,432225],"text":"const{handle:n,outputPreferredLocations:s,outputPreferredLocationsEncoded:o}=c;"}},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":369734,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":369735,"fix":{"range":[432148,432225],"text":"const{handle:n,outputPreferredLocations:s,outputPreferredLocationsEncoded:o}=c;"}},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":369768,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":369769,"fix":{"range":[432148,432225],"text":"const{handle:n,outputPreferredLocations:s,outputPreferredLocationsEncoded:o}=c;"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":369932,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":369933,"fix":{"range":[432380,432391],"text":"const a=t[r];"}},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":370051,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":370052,"fix":{"range":[432499,432510],"text":"const l=r[t];"}},{"ruleId":"prefer-const","severity":2,"message":"'P' is never reassigned. Use 'const' instead.","line":100,"column":370412,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":370413,"fix":{"range":[432860,432869],"text":"const P=[];"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":370442,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":370443,"fix":{"range":[432890,432913],"text":"const t=i.HEAPU32[T/4+e];"}},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":370502,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":370503},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":370518,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":370519},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":370656,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":370657},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":370694,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":370695},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":100,"column":370711,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":370712},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":100,"column":370728,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":370729,"fix":{"range":[433142,433185],"text":"const d=i.HEAPU32[a++],p=i.HEAPU32[a++],h=[];"}},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":100,"column":370796,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":370797,"fix":{"range":[433244,433275],"text":"const m=h.reduce(((e,t)=>e*t),1);"}},{"ruleId":"prefer-const","severity":2,"message":"'f' is never reassigned. Use 'const' instead.","line":100,"column":370835,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":370836,"fix":{"range":[433283,433323],"text":"const f=c?.outputPreferredLocations[r[e]];"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":370987,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":370988},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":371023,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":371024},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":371040,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":371041,"fix":{"range":[433471,433524],"text":"const r=i.HEAPU32[t++],a=n===m-1?void 0:i.HEAPU32[t]-r;"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":371157,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":371158,"fix":{"range":[433605,433627],"text":"const e=i.jsepGetBuffer;"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":371274,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":371275},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":371281,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":371282,"fix":{"range":[433722,433743],"text":"const r=e(u),a=Qe(s,m);"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":371516,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":371517,"fix":{"range":[433964,433989],"text":"const e=i.jsepEnsureTensor;"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":371709,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":371710,"fix":{"range":[434157,434181],"text":"const r=await e(u,s,h,!1);"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":371889,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":371890,"fix":{"range":[434337,434357],"text":"const e=new(Ye(n))(m);"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":372383,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":372384},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":372390,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":372391,"fix":{"range":[434831,434854],"text":"const t=De(),n=Yu.get(e);"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":372450,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":372451},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":372457,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":372458,"fix":{"range":[434898,434933],"text":"const r=n[0],a=t._OrtEndProfiling(r);"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":372552,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":372553,"fix":{"range":[435000,435009],"text":"const t=[];"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":372565,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":372566,"fix":{"range":[435013,435018],"text":"const n"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":372577,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":372578,"fix":{"range":[435025,435036],"text":"const e=n[2];"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":372765,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":372766,"fix":{"range":[435213,435229],"text":"const n=hd.get(e);"}},{"ruleId":"no-undef","severity":2,"message":"'URL' is not defined.","line":100,"column":372976,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":372979},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":373109,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":373110,"fix":{"range":[435557,435583],"text":"const t=hd.get(e.data.type);"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":373486,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":373487,"fix":{"range":[435934,435964],"text":"const a={type:\"init-wasm\",in:p};"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":373715,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":373716,"fix":{"range":[436163,436206],"text":"const r={type:\"init-ep\",in:{epName:e,env:p}};"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":373860,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":373861,"fix":{"range":[436308,436347],"text":"const r={type:\"copy-from\",in:{buffer:e}};"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":374133,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":374134},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":374179,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":374180,"fix":{"range":[436581,436636],"text":"const a={type:\"create\",in:{model:e,options:{...t}}},s=[];"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":374343,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":374344,"fix":{"range":[436791,436819],"text":"const r={type:\"release\",in:e};"}},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":374670,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":374671},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":374674,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":374675,"fix":{"range":[437118,437208],"text":"const o=n,l={type:\"run\",in:{sessionId:e,inputIndices:t,inputs:o,outputIndices:r,options:s}};"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":374891,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":374892,"fix":{"range":[437339,437373],"text":"const r={type:\"end-profiling\",in:e};"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":375369,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":375370,"fix":{"range":[437817,437828],"text":"const t=e[0];"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":375478,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":375479,"fix":{"range":[437916,437959],"text":"const{gpuBuffer:n,download:r,dispose:a}=e[2];"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":375489,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":375490,"fix":{"range":[437916,437959],"text":"const{gpuBuffer:n,download:r,dispose:a}=e[2];"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":375499,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":375500,"fix":{"range":[437916,437959],"text":"const{gpuBuffer:n,download:r,dispose:a}=e[2];"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":375598,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":375599,"fix":{"range":[438046,438057],"text":"const t=e[0];"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":375711,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":375712,"fix":{"range":[438150,438192],"text":"const{mlTensor:n,download:r,dispose:a}=e[2];"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":375722,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":375723,"fix":{"range":[438150,438192],"text":"const{mlTensor:n,download:r,dispose:a}=e[2];"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":375732,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":375733,"fix":{"range":[438150,438192],"text":"const{mlTensor:n,download:r,dispose:a}=e[2];"}},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":376173,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":376174},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":100,"column":376178,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":376179,"fix":{"range":[438621,438635],"text":"const r=[],a=[];"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":376218,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":376219},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":376225,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":376226},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":376232,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":376233,"fix":{"range":[438666,438713],"text":"const t=e[0],n=e[1],s=this.inputNames.indexOf(t);"}},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":100,"column":376338,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":376339},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":100,"column":376343,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":376344,"fix":{"range":[438786,438800],"text":"const s=[],i=[];"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":100,"column":376383,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":376384},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":376390,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":376391},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":100,"column":376397,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":376398,"fix":{"range":[438831,438879],"text":"const t=e[0],n=e[1],r=this.outputNames.indexOf(t);"}},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":100,"column":376505,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":376506},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":100,"column":376570,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":376571},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":100,"column":376644,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":376645},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":100,"column":376681,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":376682,"fix":{"range":[438953,439138],"text":"const o=r.map(((e,t)=>Td(e,(()=>`input \"${this.inputNames[a[t]]}\"`)))),l=s.map(((e,t)=>e?Td(e,(()=>`output \"${this.outputNames[i[t]]}\"`)):null)),u=await xd(this.sessionId,a,o,i,l,n),d={};"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":376917,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":377784,"fix":{"range":[439369,439372],"text":"let"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":100,"column":377074,"nodeType":"MemberExpression","messageId":"unexpected","endLine":100,"endColumn":377086},{"ruleId":"no-undef","severity":2,"message":"'self' is not defined.","line":100,"column":377431,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":377435},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":377485,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":377486,"fix":{"range":[439933,440017],"text":"const e=typeof navigator>\"u\"?V(\"node:os\").cpus().length:navigator.hardwareConcurrency;"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":100,"column":377720,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":377721,"fix":{"range":[440168,440181],"text":"const n=new $d;"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":100,"column":377799,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":100,"endColumn":377809},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":100,"column":377814,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":377815,"fix":{"range":[440262,440293],"text":"const e=(Od(),G(Fd)).wasmBackend;"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":151,"column":45,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":151,"endColumn":51,"fix":{"range":[442700,442703],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":151,"column":186,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":151,"endColumn":441},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":151,"column":855,"nodeType":"Identifier","messageId":"undef","endLine":151,"endColumn":862},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":151,"column":925,"nodeType":"Identifier","messageId":"undef","endLine":151,"endColumn":932},{"ruleId":"no-undef","severity":2,"message":"'crossOriginIsolated' is not defined.","line":151,"column":1790,"nodeType":"Identifier","messageId":"undef","endLine":151,"endColumn":1809},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":154,"column":119,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":154,"endColumn":219,"fix":{"range":[444767,444770],"text":"let"}},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":154,"column":2792,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":154,"endColumn":2892,"suggestions":[{"messageId":"addBrackets","fix":{"range":[447440,447884],"text":"{ const a=s(e.decoder),i=\"num_decoder_layers\"in a,o=(0,r.pick)(e,[\"model_type\",\"is_encoder_decoder\"]);return i?(o.num_decoder_layers=a.num_decoder_layers,o.num_decoder_heads=a.num_decoder_heads,o.decoder_hidden_size=a.decoder_hidden_size,o.num_encoder_layers=a.num_encoder_layers,o.num_encoder_heads=a.num_encoder_heads,o.encoder_hidden_size=a.encoder_hidden_size):(o.num_layers=a.num_layers,o.num_heads=a.num_heads,o.hidden_size=a.hidden_size),o }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":157,"column":72,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":157,"endColumn":145,"fix":{"range":[449876,449879],"text":"let"}},{"ruleId":"no-undef","severity":2,"message":"'self' is not defined.","line":157,"column":214,"nodeType":"Identifier","messageId":"undef","endLine":157,"endColumn":218},{"ruleId":"no-undef","severity":2,"message":"'self' is not defined.","line":157,"column":252,"nodeType":"Identifier","messageId":"undef","endLine":157,"endColumn":256},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":157,"column":402,"nodeType":"Identifier","messageId":"undef","endLine":157,"endColumn":409},{"ruleId":"no-undef","severity":2,"message":"'__dirname' is not defined.","line":157,"column":784,"nodeType":"Identifier","messageId":"undef","endLine":157,"endColumn":793},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":160,"column":101,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":160,"endColumn":155,"fix":{"range":[451229,451232],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":163,"column":590,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":163,"endColumn":756,"fix":{"range":[452986,452989],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":163,"column":789,"nodeType":"Identifier","messageId":"unusedVar","endLine":163,"endColumn":790,"suggestions":[{"messageId":"removeVar","data":{"varName":"e"},"fix":{"range":[453185,453187],"text":""},"desc":"Remove unused variable 'e'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'t' is defined but never used.","line":163,"column":791,"nodeType":"Identifier","messageId":"unusedVar","endLine":163,"endColumn":792,"suggestions":[{"messageId":"removeVar","data":{"varName":"t"},"fix":{"range":[453186,453188],"text":""},"desc":"Remove unused variable 't'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":163,"column":887,"nodeType":"Identifier","messageId":"unusedVar","endLine":163,"endColumn":888,"suggestions":[{"messageId":"removeVar","data":{"varName":"e"},"fix":{"range":[453283,453285],"text":""},"desc":"Remove unused variable 'e'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'t' is defined but never used.","line":163,"column":889,"nodeType":"Identifier","messageId":"unusedVar","endLine":163,"endColumn":890,"suggestions":[{"messageId":"removeVar","data":{"varName":"t"},"fix":{"range":[453284,453286],"text":""},"desc":"Remove unused variable 't'."}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":166,"column":93,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":166,"endColumn":259,"fix":{"range":[459217,459220],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":166,"column":472,"nodeType":"Identifier","messageId":"unusedVar","endLine":166,"endColumn":473,"suggestions":[{"messageId":"removeVar","data":{"varName":"e"},"fix":{"range":[459596,459597],"text":""},"desc":"Remove unused variable 'e'."}]},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":166,"column":553,"nodeType":"Identifier","messageId":"useConst","endLine":166,"endColumn":554},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":166,"column":611,"nodeType":"Identifier","messageId":"useConst","endLine":166,"endColumn":612,"fix":{"range":[459731,459741],"text":"const e=t*n;"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":169,"column":209,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":169,"endColumn":269,"fix":{"range":[461190,461193],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":169,"column":302,"nodeType":"Identifier","messageId":"unusedVar","endLine":169,"endColumn":303,"suggestions":[{"messageId":"removeVar","data":{"varName":"e"},"fix":{"range":[461283,461285],"text":""},"desc":"Remove unused variable 'e'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'t' is defined but never used.","line":169,"column":304,"nodeType":"Identifier","messageId":"unusedVar","endLine":169,"endColumn":305,"suggestions":[{"messageId":"removeVar","data":{"varName":"t"},"fix":{"range":[461284,461286],"text":""},"desc":"Remove unused variable 't'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'t' is defined but never used.","line":169,"column":985,"nodeType":"Identifier","messageId":"unusedVar","endLine":169,"endColumn":986,"suggestions":[{"messageId":"removeVar","data":{"varName":"t"},"fix":{"range":[461965,461967],"text":""},"desc":"Remove unused variable 't'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'t' is defined but never used.","line":169,"column":1196,"nodeType":"Identifier","messageId":"unusedVar","endLine":169,"endColumn":1197,"suggestions":[{"messageId":"removeVar","data":{"varName":"t"},"fix":{"range":[462176,462178],"text":""},"desc":"Remove unused variable 't'."}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":172,"column":132,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":172,"endColumn":272,"fix":{"range":[462483,462486],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":172,"column":284,"nodeType":"Identifier","messageId":"unusedVar","endLine":172,"endColumn":285,"suggestions":[{"messageId":"removeVar","data":{"varName":"e"},"fix":{"range":[462635,462636],"text":""},"desc":"Remove unused variable 'e'."}]},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":172,"column":395,"nodeType":"Identifier","messageId":"undef","endLine":172,"endColumn":402},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":172,"column":422,"nodeType":"MemberExpression","messageId":"unexpected","endLine":172,"endColumn":433},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":175,"column":12745,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":175,"endColumn":13763,"fix":{"range":[477878,477881],"text":"let"}},{"ruleId":"no-prototype-builtins","severity":2,"message":"Do not access Object.prototype method 'hasOwnProperty' from target object.","line":175,"column":14108,"nodeType":"CallExpression","messageId":"prototypeBuildIn","endLine":175,"endColumn":14122,"suggestions":[{"messageId":"callObjectPrototype","data":{"prop":"hasOwnProperty"},"fix":{"range":[479239,479256],"text":"Object.prototype.hasOwnProperty.call(o, "},"desc":"Call Object.prototype.hasOwnProperty explicitly."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":175,"column":14134,"nodeType":"MemberExpression","messageId":"unexpected","endLine":175,"endColumn":14146},{"ruleId":"no-prototype-builtins","severity":2,"message":"Do not access Object.prototype method 'hasOwnProperty' from target object.","line":175,"column":14350,"nodeType":"CallExpression","messageId":"prototypeBuildIn","endLine":175,"endColumn":14364,"suggestions":[{"messageId":"callObjectPrototype","data":{"prop":"hasOwnProperty"},"fix":{"range":[479481,479498],"text":"Object.prototype.hasOwnProperty.call(c, "},"desc":"Call Object.prototype.hasOwnProperty explicitly."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":175,"column":14431,"nodeType":"MemberExpression","messageId":"unexpected","endLine":175,"endColumn":14443},{"ruleId":"no-prototype-builtins","severity":2,"message":"Do not access Object.prototype method 'hasOwnProperty' from target object.","line":175,"column":14581,"nodeType":"CallExpression","messageId":"prototypeBuildIn","endLine":175,"endColumn":14595,"suggestions":[{"messageId":"callObjectPrototype","data":{"prop":"hasOwnProperty"},"fix":{"range":[479683,479729],"text":"Object.prototype.hasOwnProperty.call(s.DEFAULT_DTYPE_SUFFIX_MAPPING, "},"desc":"Call Object.prototype.hasOwnProperty explicitly."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":175,"column":15346,"nodeType":"MemberExpression","messageId":"unexpected","endLine":175,"endColumn":15358},{"ruleId":"no-prototype-builtins","severity":2,"message":"Do not access Object.prototype method 'hasOwnProperty' from target object.","line":175,"column":15759,"nodeType":"CallExpression","messageId":"prototypeBuildIn","endLine":175,"endColumn":15773,"suggestions":[{"messageId":"callObjectPrototype","data":{"prop":"hasOwnProperty"},"fix":{"range":[480890,480907],"text":"Object.prototype.hasOwnProperty.call(v, "},"desc":"Call Object.prototype.hasOwnProperty explicitly."}]},{"ruleId":"no-async-promise-executor","severity":2,"message":"Promise executor functions should not be async.","line":175,"column":15961,"nodeType":"Identifier","messageId":"async","endLine":175,"endColumn":15966},{"ruleId":"no-unused-vars","severity":2,"message":"'s' is defined but never used.","line":175,"column":15969,"nodeType":"Identifier","messageId":"unusedVar","endLine":175,"endColumn":15970,"suggestions":[{"messageId":"removeVar","data":{"varName":"s"},"fix":{"range":[481101,481103],"text":""},"desc":"Remove unused variable 's'."}]},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":175,"column":17105,"nodeType":"Identifier","messageId":"useConst","endLine":175,"endColumn":17106,"fix":{"range":[482234,482294],"text":"const n=Object.keys(t).filter((t=>!e.inputNames.includes(t)));"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":175,"column":17161,"nodeType":"MemberExpression","messageId":"unexpected","endLine":175,"endColumn":17173,"suggestions":[{"fix":{"range":[482294,482420],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":175,"column":17438,"nodeType":"MemberExpression","messageId":"unexpected","endLine":175,"endColumn":17451},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":175,"column":17505,"nodeType":"MemberExpression","messageId":"unexpected","endLine":175,"endColumn":17518},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":175,"column":17572,"nodeType":"Identifier","messageId":"useConst","endLine":175,"endColumn":17573,"fix":{"range":[482701,482706],"text":"const t"}},{"ruleId":"no-unused-vars","severity":2,"message":"'r' is assigned a value but never used.","line":175,"column":18309,"nodeType":"Identifier","messageId":"unusedVar","endLine":175,"endColumn":18310,"suggestions":[{"messageId":"removeVar","data":{"varName":"r"},"fix":{"range":[483431,483443],"text":""},"desc":"Remove unused variable 'r'."}]},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":175,"column":18309,"nodeType":"Identifier","messageId":"useConst","endLine":175,"endColumn":18310},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":175,"column":18329,"nodeType":"Identifier","messageId":"useConst","endLine":175,"endColumn":18330},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":175,"column":18334,"nodeType":"Identifier","messageId":"useConst","endLine":175,"endColumn":18335},{"ruleId":"no-unused-vars","severity":2,"message":"'u' is defined but never used.","line":175,"column":20010,"nodeType":"Identifier","messageId":"unusedVar","endLine":175,"endColumn":20011,"suggestions":[{"messageId":"removeVar","data":{"varName":"u"},"fix":{"range":[485139,485144],"text":""},"desc":"Remove unused variable 'u'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'r' is defined but never used.","line":175,"column":20573,"nodeType":"Identifier","messageId":"unusedVar","endLine":175,"endColumn":20574,"suggestions":[{"messageId":"removeVar","data":{"varName":"r"},"fix":{"range":[485705,485707],"text":""},"desc":"Remove unused variable 'r'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'r' is defined but never used.","line":175,"column":21101,"nodeType":"Identifier","messageId":"unusedVar","endLine":175,"endColumn":21102,"suggestions":[{"messageId":"removeVar","data":{"varName":"r"},"fix":{"range":[486233,486235],"text":""},"desc":"Remove unused variable 'r'."}]},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":175,"column":22430,"nodeType":"Identifier","messageId":"useConst","endLine":175,"endColumn":22431,"fix":{"range":[487559,487730],"text":"const m={progress_callback:t,config:n,cache_dir:a,local_files_only:s,revision:i,model_file_name:o,subfolder:l,device:d,dtype:c,use_external_data_format:p,session_options:h};"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":175,"column":23682,"nodeType":"MemberExpression","messageId":"unexpected","endLine":175,"endColumn":23694},{"ruleId":"no-unused-vars","severity":2,"message":"'t' is defined but never used.","line":175,"column":27048,"nodeType":"Identifier","messageId":"unusedVar","endLine":175,"endColumn":27049,"suggestions":[{"messageId":"removeVar","data":{"varName":"t"},"fix":{"range":[492167,492182],"text":""},"desc":"Remove unused variable 't'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":175,"column":27439,"nodeType":"Identifier","messageId":"unusedVar","endLine":175,"endColumn":27440,"suggestions":[{"messageId":"removeVar","data":{"varName":"e"},"fix":{"range":[492558,492574],"text":""},"desc":"Remove unused variable 'e'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'n' is defined but never used.","line":175,"column":27473,"nodeType":"Identifier","messageId":"unusedVar","endLine":175,"endColumn":27474,"suggestions":[{"messageId":"removeVar","data":{"varName":"n"},"fix":{"range":[492588,492607],"text":""},"desc":"Remove unused variable 'n'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'e' is assigned a value but never used.","line":175,"column":27625,"nodeType":"Identifier","messageId":"unusedVar","endLine":175,"endColumn":27626,"suggestions":[{"messageId":"removeVar","data":{"varName":"e"},"fix":{"range":[492748,492760],"text":""},"desc":"Remove unused variable 'e'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'n' is assigned a value but never used.","line":175,"column":27640,"nodeType":"Identifier","messageId":"unusedVar","endLine":175,"endColumn":27641,"suggestions":[{"messageId":"removeVar","data":{"varName":"n"},"fix":{"range":[492759,492774],"text":""},"desc":"Remove unused variable 'n'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'r' is assigned a value but never used.","line":175,"column":27657,"nodeType":"Identifier","messageId":"unusedVar","endLine":175,"endColumn":27658,"suggestions":[{"messageId":"removeVar","data":{"varName":"r"},"fix":{"range":[492774,492791],"text":""},"desc":"Remove unused variable 'r'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'t' is defined but never used.","line":175,"column":28369,"nodeType":"Identifier","messageId":"unusedVar","endLine":175,"endColumn":28370,"suggestions":[{"messageId":"removeVar","data":{"varName":"t"},"fix":{"range":[493484,493503],"text":""},"desc":"Remove unused variable 't'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'s' is defined but never used.","line":175,"column":28444,"nodeType":"Identifier","messageId":"unusedVar","endLine":175,"endColumn":28445,"suggestions":[{"messageId":"removeVar","data":{"varName":"s"},"fix":{"range":[493558,493578],"text":""},"desc":"Remove unused variable 's'."}]},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":175,"column":28475,"nodeType":"Identifier","messageId":"useConst","endLine":175,"endColumn":28476},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":175,"column":29169,"nodeType":"Identifier","messageId":"useConst","endLine":175,"endColumn":29170},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":175,"column":29203,"nodeType":"Identifier","messageId":"useConst","endLine":175,"endColumn":29204},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":175,"column":29719,"nodeType":"Identifier","messageId":"useConst","endLine":175,"endColumn":29720,"fix":{"range":[494848,494868],"text":"const c=d.dims.at(-1);"}},{"ruleId":"prefer-const","severity":2,"message":"'v' is never reassigned. Use 'const' instead.","line":175,"column":29979,"nodeType":"Identifier","messageId":"useConst","endLine":175,"endColumn":29980,"fix":{"range":[495108,495117],"text":"const v={};"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":175,"column":31683,"nodeType":"MemberExpression","messageId":"unexpected","endLine":175,"endColumn":31695},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":175,"column":38417,"nodeType":"MemberExpression","messageId":"unexpected","endLine":175,"endColumn":38429},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":175,"column":39002,"nodeType":"MemberExpression","messageId":"unexpected","endLine":175,"endColumn":39014},{"ruleId":"no-unused-vars","severity":2,"message":"'r' is assigned a value but never used.","line":175,"column":39255,"nodeType":"Identifier","messageId":"unusedVar","endLine":175,"endColumn":39256,"suggestions":[{"messageId":"removeVar","data":{"varName":"r"},"fix":{"range":[504369,504394],"text":""},"desc":"Remove unused variable 'r'."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":175,"column":39918,"nodeType":"MemberExpression","messageId":"unexpected","endLine":175,"endColumn":39930},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":175,"column":40526,"nodeType":"MemberExpression","messageId":"unexpected","endLine":175,"endColumn":40538},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":175,"column":40751,"nodeType":"MemberExpression","messageId":"unexpected","endLine":175,"endColumn":40763},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":175,"column":41377,"nodeType":"Identifier","messageId":"useConst","endLine":175,"endColumn":41378,"fix":{"range":[506506,506522],"text":"const t=r[e].data;"}},{"ruleId":"no-unused-vars","severity":2,"message":"'n' is defined but never used.","line":175,"column":43145,"nodeType":"Identifier","messageId":"unusedVar","endLine":175,"endColumn":43146,"suggestions":[{"messageId":"removeVar","data":{"varName":"n"},"fix":{"range":[508267,508279],"text":""},"desc":"Remove unused variable 'n'."}]},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":175,"column":44095,"nodeType":"Identifier","messageId":"useConst","endLine":175,"endColumn":44096,"fix":{"range":[509206,509280],"text":"const{last_hidden_state:e}=await L(this,{inputs_embeds:o,attention_mask:n});"}},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":175,"column":52893,"nodeType":"Identifier","messageId":"useConst","endLine":175,"endColumn":52894},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":175,"column":52949,"nodeType":"Identifier","messageId":"useConst","endLine":175,"endColumn":52950},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":175,"column":53031,"nodeType":"Identifier","messageId":"useConst","endLine":175,"endColumn":53032,"fix":{"range":[518160,518275],"text":"const a={use_cache_branch:e,output_sequence:r,encoder_attention_mask:l,speaker_embeddings:t,encoder_hidden_states:o};"}},{"ruleId":"no-undef","severity":2,"message":"'structuredClone' is not defined.","line":175,"column":54978,"nodeType":"Identifier","messageId":"undef","endLine":175,"endColumn":54993},{"ruleId":"compat/compat","severity":2,"message":"structuredClone is not supported in Safari 14, Firefox 85, Edge 88, Chrome 88","line":175,"column":54978,"nodeType":"CallExpression","endLine":175,"endColumn":54996},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":175,"column":56764,"nodeType":"MemberExpression","messageId":"unexpected","endLine":175,"endColumn":56776},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":181,"column":111,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":181,"endColumn":208,"fix":{"range":[539363,539366],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":184,"column":83,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":184,"endColumn":197,"fix":{"range":[539914,539917],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":187,"column":874,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":187,"endColumn":1327,"fix":{"range":[543946,543949],"text":"let"}},{"ruleId":"no-undef","severity":2,"message":"'URL' is not defined.","line":187,"column":1546,"nodeType":"Identifier","messageId":"undef","endLine":187,"endColumn":1549},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":187,"column":5086,"nodeType":"Identifier","messageId":"useConst","endLine":187,"endColumn":5087},{"ruleId":"no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":187,"column":6380,"nodeType":"Identifier","messageId":"unusedVar","endLine":187,"endColumn":6381,"suggestions":[{"messageId":"removeVar","data":{"varName":"e"},"fix":{"range":[549452,549453],"text":"()"},"desc":"Remove unused variable 'e'."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":187,"column":6821,"nodeType":"MemberExpression","messageId":"unexpected","endLine":187,"endColumn":6833},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":187,"column":7047,"nodeType":"MemberExpression","messageId":"unexpected","endLine":187,"endColumn":7059},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":187,"column":10127,"nodeType":"MemberExpression","messageId":"unexpected","endLine":187,"endColumn":10139},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":187,"column":10241,"nodeType":"MemberExpression","messageId":"unexpected","endLine":187,"endColumn":10253},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":187,"column":13537,"nodeType":"Identifier","messageId":"useConst","endLine":187,"endColumn":13538,"fix":{"range":[556605,556613],"text":"const[e,t]"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":187,"column":13539,"nodeType":"Identifier","messageId":"useConst","endLine":187,"endColumn":13540,"fix":{"range":[556605,556613],"text":"const[e,t]"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":187,"column":17278,"nodeType":"MemberExpression","messageId":"unexpected","endLine":187,"endColumn":17289},{"ruleId":"no-undef","severity":2,"message":"'URL' is not defined.","line":187,"column":17468,"nodeType":"Identifier","messageId":"undef","endLine":187,"endColumn":17471},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":187,"column":23266,"nodeType":"MemberExpression","messageId":"unexpected","endLine":187,"endColumn":23277},{"ruleId":"no-async-promise-executor","severity":2,"message":"Promise executor functions should not be async.","line":187,"column":23694,"nodeType":"Identifier","messageId":"async","endLine":187,"endColumn":23699},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":190,"column":1601,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":190,"endColumn":1962,"fix":{"range":[568942,568945],"text":"let"}},{"ruleId":"prefer-const","severity":2,"message":"'c' is never reassigned. Use 'const' instead.","line":190,"column":2224,"nodeType":"Identifier","messageId":"useConst","endLine":190,"endColumn":2225,"fix":{"range":[569561,569570],"text":"const c=[];"}},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":190,"column":2254,"nodeType":"Identifier","messageId":"useConst","endLine":190,"endColumn":2255},{"ruleId":"prefer-const","severity":2,"message":"'p' is never reassigned. Use 'const' instead.","line":190,"column":2275,"nodeType":"Identifier","messageId":"useConst","endLine":190,"endColumn":2276},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":190,"column":2309,"nodeType":"Identifier","messageId":"useConst","endLine":190,"endColumn":2310},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":190,"column":2316,"nodeType":"Identifier","messageId":"useConst","endLine":190,"endColumn":2317,"fix":{"range":[569591,569664],"text":"const o=null!==n?n[e]:null,p={boxes:[],classes:[],scores:[]},h=a[e],m=s[e];"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":190,"column":2350,"nodeType":"Identifier","messageId":"useConst","endLine":190,"endColumn":2351},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":190,"column":2357,"nodeType":"Identifier","messageId":"useConst","endLine":190,"endColumn":2358},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":190,"column":2441,"nodeType":"Identifier","messageId":"useConst","endLine":190,"endColumn":2442,"fix":{"range":[569778,569805],"text":"const e=(0,i.max)(a.data)[1];"}},{"ruleId":"no-unused-vars","severity":2,"message":"'s' is assigned a value but never used.","line":190,"column":3764,"nodeType":"Identifier","messageId":"unusedVar","endLine":190,"endColumn":3765,"suggestions":[{"messageId":"removeVar","data":{"varName":"s"},"fix":{"range":[571104,571111],"text":""},"desc":"Remove unused variable 's'."}]},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":190,"column":4052,"nodeType":"Identifier","messageId":"useConst","endLine":190,"endColumn":4053,"fix":{"range":[571389,571400],"text":"const r=t[n];"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":190,"column":4363,"nodeType":"MemberExpression","messageId":"unexpected","endLine":190,"endColumn":4375},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":190,"column":4540,"nodeType":"Identifier","messageId":"useConst","endLine":190,"endColumn":4541},{"ruleId":"no-unused-vars","severity":2,"message":"'d' is assigned a value but never used.","line":190,"column":4542,"nodeType":"Identifier","messageId":"unusedVar","endLine":190,"endColumn":4543,"suggestions":[{"messageId":"removeVar","data":{"varName":"d"},"fix":{"range":[571883,571884],"text":""},"desc":"Remove unused variable 'd'."}]},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":190,"column":4542,"nodeType":"Identifier","messageId":"useConst","endLine":190,"endColumn":4543},{"ruleId":"prefer-const","severity":2,"message":"'h' is never reassigned. Use 'const' instead.","line":190,"column":4689,"nodeType":"Identifier","messageId":"useConst","endLine":190,"endColumn":4690,"fix":{"range":[572026,572035],"text":"const h=[];"}},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":190,"column":4719,"nodeType":"Identifier","messageId":"useConst","endLine":190,"endColumn":4720},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":190,"column":4740,"nodeType":"Identifier","messageId":"useConst","endLine":190,"endColumn":4741},{"ruleId":"prefer-const","severity":2,"message":"'f' is never reassigned. Use 'const' instead.","line":190,"column":4747,"nodeType":"Identifier","messageId":"useConst","endLine":190,"endColumn":4748},{"ruleId":"prefer-const","severity":2,"message":"'g' is never reassigned. Use 'const' instead.","line":190,"column":4755,"nodeType":"Identifier","messageId":"useConst","endLine":190,"endColumn":4756,"fix":{"range":[572056,572114],"text":"const u=null!==s?s[e]:null,d=i[e],f=l[e],[g,_,w]=p(d,f,t,c);"}},{"ruleId":"prefer-const","severity":2,"message":"'_' is never reassigned. Use 'const' instead.","line":190,"column":4757,"nodeType":"Identifier","messageId":"useConst","endLine":190,"endColumn":4758,"fix":{"range":[572056,572114],"text":"const u=null!==s?s[e]:null,d=i[e],f=l[e],[g,_,w]=p(d,f,t,c);"}},{"ruleId":"prefer-const","severity":2,"message":"'w' is never reassigned. Use 'const' instead.","line":190,"column":4759,"nodeType":"Identifier","messageId":"useConst","endLine":190,"endColumn":4760,"fix":{"range":[572056,572114],"text":"const u=null!==s?s[e]:null,d=i[e],f=l[e],[g,_,w]=p(d,f,t,c);"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":190,"column":4794,"nodeType":"Identifier","messageId":"useConst","endLine":190,"endColumn":4795},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":190,"column":4796,"nodeType":"Identifier","messageId":"useConst","endLine":190,"endColumn":4797},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":190,"column":4819,"nodeType":"Identifier","messageId":"useConst","endLine":190,"endColumn":4820,"fix":{"range":[572131,572219],"text":"const[e,t]=u??f.dims.slice(-2),n=new o.Tensor(\"int32\",new Int32Array(e*t).fill(-1),[e,t]);"}},{"ruleId":"prefer-const","severity":2,"message":"'y' is never reassigned. Use 'const' instead.","line":190,"column":4933,"nodeType":"Identifier","messageId":"useConst","endLine":190,"endColumn":4934,"fix":{"range":[572270,572296],"text":"const[y,b]=m(g,_,w,n,r,a,u);"}},{"ruleId":"prefer-const","severity":2,"message":"'b' is never reassigned. Use 'const' instead.","line":190,"column":4935,"nodeType":"Identifier","messageId":"useConst","endLine":190,"endColumn":4936,"fix":{"range":[572270,572296],"text":"const[y,b]=m(g,_,w,n,r,a,u);"}},{"ruleId":"no-unused-vars","severity":2,"message":"'t' is defined but never used.","line":190,"column":10923,"nodeType":"Identifier","messageId":"unusedVar","endLine":190,"endColumn":10924,"suggestions":[{"messageId":"removeVar","data":{"varName":"t"},"fix":{"range":[578260,578265],"text":""},"desc":"Remove unused variable 't'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'a' is assigned a value but never used.","line":190,"column":12517,"nodeType":"Identifier","messageId":"unusedVar","endLine":190,"endColumn":12518,"suggestions":[{"messageId":"removeVar","data":{"varName":"a"},"fix":{"range":[579858,579859],"text":""},"desc":"Remove unused variable 'a'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'s' is assigned a value but never used.","line":190,"column":12519,"nodeType":"Identifier","messageId":"unusedVar","endLine":190,"endColumn":12520,"suggestions":[{"messageId":"removeVar","data":{"varName":"s"},"fix":{"range":[579860,579861],"text":""},"desc":"Remove unused variable 's'."}]},{"ruleId":"no-undef","severity":2,"message":"'structuredClone' is not defined.","line":190,"column":13396,"nodeType":"Identifier","messageId":"undef","endLine":190,"endColumn":13411},{"ruleId":"compat/compat","severity":2,"message":"structuredClone is not supported in Safari 14, Firefox 85, Edge 88, Chrome 88","line":190,"column":13396,"nodeType":"CallExpression","endLine":190,"endColumn":13414},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":190,"column":13664,"nodeType":"Identifier","messageId":"useConst","endLine":190,"endColumn":13665},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":190,"column":13671,"nodeType":"Identifier","messageId":"useConst","endLine":190,"endColumn":13672},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":190,"column":13678,"nodeType":"Identifier","messageId":"useConst","endLine":190,"endColumn":13679,"fix":{"range":[581001,581043],"text":"const a=t[r],s=n[r],i=[s[0]/a[0],s[1]/a[1]];"}},{"ruleId":"no-unused-vars","severity":2,"message":"'n' is assigned a value but never used.","line":190,"column":15294,"nodeType":"Identifier","messageId":"unusedVar","endLine":190,"endColumn":15295,"suggestions":[{"messageId":"removeVar","data":{"varName":"n"},"fix":{"range":[582621,582639],"text":""},"desc":"Remove unused variable 'n'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'r' is assigned a value but never used.","line":190,"column":15312,"nodeType":"Identifier","messageId":"unusedVar","endLine":190,"endColumn":15313,"suggestions":[{"messageId":"removeVar","data":{"varName":"r"},"fix":{"range":[582638,582663],"text":""},"desc":"Remove unused variable 'r'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'a' is assigned a value but never used.","line":190,"column":15339,"nodeType":"Identifier","messageId":"unusedVar","endLine":190,"endColumn":15340,"suggestions":[{"messageId":"removeVar","data":{"varName":"a"},"fix":{"range":[582663,582684],"text":""},"desc":"Remove unused variable 'a'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'s' is assigned a value but never used.","line":190,"column":15375,"nodeType":"Identifier","messageId":"unusedVar","endLine":190,"endColumn":15376,"suggestions":[{"messageId":"removeVar","data":{"varName":"s"},"fix":{"range":[582684,582719],"text":""},"desc":"Remove unused variable 's'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'i' is assigned a value but never used.","line":190,"column":15437,"nodeType":"Identifier","messageId":"unusedVar","endLine":190,"endColumn":15438,"suggestions":[{"messageId":"removeVar","data":{"varName":"i"},"fix":{"range":[582777,582779],"text":""},"desc":"Remove unused variable 'i'."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":190,"column":16681,"nodeType":"MemberExpression","messageId":"unexpected","endLine":190,"endColumn":16693},{"ruleId":"no-unused-vars","severity":2,"message":"'s' is assigned a value but never used.","line":190,"column":20703,"nodeType":"Identifier","messageId":"unusedVar","endLine":190,"endColumn":20704},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":190,"column":20877,"nodeType":"Identifier","messageId":"useConst","endLine":190,"endColumn":20878,"fix":{"range":[588214,588240],"text":"const n=new Float64Array(t);"}},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":190,"column":25336,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":190,"endColumn":25416,"suggestions":[{"messageId":"addBrackets","fix":{"range":[592677,592902],"text":"{ const s=\"ocr\"===r?\"quad_boxes\":\"bboxes\",i=e.matchAll(this.regexes[s]),o=[],l=[];for(const[e,t,...r]of i)o.push(t?t.trim():o.at(-1)??\"\"),l.push(r.map(((e,t)=>(Number(e)+.5)/this.size_per_bin*n[t%2])));a={labels:o,[s]:l};break; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'e' is assigned a value but never used.","line":190,"column":25426,"nodeType":"Identifier","messageId":"unusedVar","endLine":190,"endColumn":25427,"suggestions":[{"messageId":"removeVar","data":{"varName":"e"},"fix":{"range":[592767,592768],"text":""},"desc":"Remove unused variable 'e'."}]},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":190,"column":27169,"nodeType":"Identifier","messageId":"useConst","endLine":190,"endColumn":27170},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":190,"column":27304,"nodeType":"Identifier","messageId":"useConst","endLine":190,"endColumn":27305},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":190,"column":27479,"nodeType":"MemberExpression","messageId":"unexpected","endLine":190,"endColumn":27491},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":193,"column":1190,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":193,"endColumn":1687,"fix":{"range":[596300,596303],"text":"let"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":193,"column":2188,"nodeType":"MemberExpression","messageId":"unexpected","endLine":193,"endColumn":2200},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\!.","line":193,"column":2672,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":193,"endColumn":2673,"suggestions":[{"messageId":"removeEscape","fix":{"range":[597782,597783],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[597782,597782],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":193,"column":2711,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":193,"endColumn":2712,"suggestions":[{"messageId":"removeEscape","fix":{"range":[597821,597822],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[597821,597821],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":193,"column":2733,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":193,"endColumn":2734,"suggestions":[{"messageId":"removeEscape","fix":{"range":[597843,597844],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[597843,597843],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":193,"column":2756,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":193,"endColumn":2757,"suggestions":[{"messageId":"removeEscape","fix":{"range":[597866,597867],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[597866,597866],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":193,"column":2778,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":193,"endColumn":2779,"suggestions":[{"messageId":"removeEscape","fix":{"range":[597888,597889],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[597888,597888],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":193,"column":2800,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":193,"endColumn":2801,"suggestions":[{"messageId":"removeEscape","fix":{"range":[597910,597911],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[597910,597910],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":193,"column":2824,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":193,"endColumn":2825,"suggestions":[{"messageId":"removeEscape","fix":{"range":[597934,597935],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[597934,597934],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":193,"column":4329,"nodeType":"Identifier","messageId":"unusedVar","endLine":193,"endColumn":4330,"suggestions":[{"messageId":"removeVar","data":{"varName":"e"},"fix":{"range":[599439,599440],"text":""},"desc":"Remove unused variable 'e'."}]},{"ruleId":"no-undef","severity":2,"message":"'TextEncoder' is not defined.","line":193,"column":7643,"nodeType":"Identifier","messageId":"undef","endLine":193,"endColumn":7654},{"ruleId":"no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":193,"column":10352,"nodeType":"Identifier","messageId":"unusedVar","endLine":193,"endColumn":10353,"suggestions":[{"messageId":"removeVar","data":{"varName":"e"},"fix":{"range":[605462,605463],"text":""},"desc":"Remove unused variable 'e'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":193,"column":12590,"nodeType":"Identifier","messageId":"unusedVar","endLine":193,"endColumn":12591,"suggestions":[{"messageId":"removeVar","data":{"varName":"e"},"fix":{"range":[607700,607702],"text":""},"desc":"Remove unused variable 'e'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'t' is defined but never used.","line":193,"column":12592,"nodeType":"Identifier","messageId":"unusedVar","endLine":193,"endColumn":12593,"suggestions":[{"messageId":"removeVar","data":{"varName":"t"},"fix":{"range":[607701,607703],"text":""},"desc":"Remove unused variable 't'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":193,"column":12853,"nodeType":"Identifier","messageId":"unusedVar","endLine":193,"endColumn":12854,"suggestions":[{"messageId":"removeVar","data":{"varName":"e"},"fix":{"range":[607963,607964],"text":""},"desc":"Remove unused variable 'e'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'t' is defined but never used.","line":193,"column":12935,"nodeType":"Identifier","messageId":"unusedVar","endLine":193,"endColumn":12936,"suggestions":[{"messageId":"removeVar","data":{"varName":"t"},"fix":{"range":[608044,608046],"text":""},"desc":"Remove unused variable 't'."}]},{"ruleId":"no-undef","severity":2,"message":"'TextEncoder' is not defined.","line":193,"column":13303,"nodeType":"Identifier","messageId":"undef","endLine":193,"endColumn":13314},{"ruleId":"no-unused-vars","severity":2,"message":"'t' is defined but never used.","line":193,"column":13335,"nodeType":"Identifier","messageId":"unusedVar","endLine":193,"endColumn":13336,"suggestions":[{"messageId":"removeVar","data":{"varName":"t"},"fix":{"range":[608444,608446],"text":""},"desc":"Remove unused variable 't'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'t' is defined but never used.","line":193,"column":13660,"nodeType":"Identifier","messageId":"unusedVar","endLine":193,"endColumn":13661,"suggestions":[{"messageId":"removeVar","data":{"varName":"t"},"fix":{"range":[608769,608771],"text":""},"desc":"Remove unused variable 't'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'t' is defined but never used.","line":193,"column":14075,"nodeType":"Identifier","messageId":"unusedVar","endLine":193,"endColumn":14076,"suggestions":[{"messageId":"removeVar","data":{"varName":"t"},"fix":{"range":[609184,609186],"text":""},"desc":"Remove unused variable 't'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'t' is defined but never used.","line":193,"column":14280,"nodeType":"Identifier","messageId":"unusedVar","endLine":193,"endColumn":14281,"suggestions":[{"messageId":"removeVar","data":{"varName":"t"},"fix":{"range":[609389,609391],"text":""},"desc":"Remove unused variable 't'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":193,"column":14701,"nodeType":"Identifier","messageId":"unusedVar","endLine":193,"endColumn":14702,"suggestions":[{"messageId":"removeVar","data":{"varName":"e"},"fix":{"range":[609811,609813],"text":""},"desc":"Remove unused variable 'e'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'t' is defined but never used.","line":193,"column":14706,"nodeType":"Identifier","messageId":"unusedVar","endLine":193,"endColumn":14707,"suggestions":[{"messageId":"removeVar","data":{"varName":"t"},"fix":{"range":[609812,609817],"text":""},"desc":"Remove unused variable 't'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":193,"column":16933,"nodeType":"Identifier","messageId":"unusedVar","endLine":193,"endColumn":16934,"suggestions":[{"messageId":"removeVar","data":{"varName":"e"},"fix":{"range":[612043,612044],"text":""},"desc":"Remove unused variable 'e'."}]},{"ruleId":"no-undef","severity":2,"message":"'TextDecoder' is not defined.","line":193,"column":17200,"nodeType":"Identifier","messageId":"undef","endLine":193,"endColumn":17211},{"ruleId":"no-undef","severity":2,"message":"'TextDecoder' is not defined.","line":193,"column":18304,"nodeType":"Identifier","messageId":"undef","endLine":193,"endColumn":18315},{"ruleId":"no-control-regex","severity":2,"message":"Unexpected control character(s) in regular expression: \\x01, \\x08, \\x0b, \\x0e, \\x1f.","line":193,"column":20515,"nodeType":"Literal","messageId":"unexpected","endLine":193,"endColumn":20571},{"ruleId":"no-control-regex","severity":2,"message":"Unexpected control character(s) in regular expression: \\x09, \\x0a, \\x0c, \\x0d.","line":193,"column":20585,"nodeType":"Literal","messageId":"unexpected","endLine":193,"endColumn":20688},{"ruleId":"no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":193,"column":21031,"nodeType":"Identifier","messageId":"unusedVar","endLine":193,"endColumn":21032,"suggestions":[{"messageId":"removeVar","data":{"varName":"e"},"fix":{"range":[616141,616142],"text":""},"desc":"Remove unused variable 'e'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'t' is defined but never used.","line":193,"column":21062,"nodeType":"Identifier","messageId":"unusedVar","endLine":193,"endColumn":21063,"suggestions":[{"messageId":"removeVar","data":{"varName":"t"},"fix":{"range":[616171,616173],"text":""},"desc":"Remove unused variable 't'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":193,"column":21133,"nodeType":"Identifier","messageId":"unusedVar","endLine":193,"endColumn":21134,"suggestions":[{"messageId":"removeVar","data":{"varName":"e"},"fix":{"range":[616243,616244],"text":""},"desc":"Remove unused variable 'e'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'t' is defined but never used.","line":193,"column":21164,"nodeType":"Identifier","messageId":"unusedVar","endLine":193,"endColumn":21165,"suggestions":[{"messageId":"removeVar","data":{"varName":"t"},"fix":{"range":[616273,616275],"text":""},"desc":"Remove unused variable 't'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'t' is defined but never used.","line":193,"column":21363,"nodeType":"Identifier","messageId":"unusedVar","endLine":193,"endColumn":21364,"suggestions":[{"messageId":"removeVar","data":{"varName":"t"},"fix":{"range":[616472,616474],"text":""},"desc":"Remove unused variable 't'."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":193,"column":25494,"nodeType":"MemberExpression","messageId":"unexpected","endLine":193,"endColumn":25506},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":193,"column":30812,"nodeType":"MemberExpression","messageId":"unexpected","endLine":193,"endColumn":30824},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":193,"column":35139,"nodeType":"Identifier","messageId":"useConst","endLine":193,"endColumn":35140},{"ruleId":"no-unused-vars","severity":2,"message":"'t' is assigned a value but never used.","line":193,"column":35329,"nodeType":"Identifier","messageId":"unusedVar","endLine":193,"endColumn":35330,"suggestions":[{"messageId":"removeVar","data":{"varName":"t"},"fix":{"range":[630439,630440],"text":""},"desc":"Remove unused variable 't'."}]},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":193,"column":36119,"nodeType":"Identifier","messageId":"useConst","endLine":193,"endColumn":36120},{"ruleId":"prefer-const","severity":2,"message":"'i' is never reassigned. Use 'const' instead.","line":193,"column":36165,"nodeType":"Identifier","messageId":"useConst","endLine":193,"endColumn":36166},{"ruleId":"prefer-const","severity":2,"message":"'_' is never reassigned. Use 'const' instead.","line":193,"column":36554,"nodeType":"Identifier","messageId":"useConst","endLine":193,"endColumn":36555},{"ruleId":"no-unused-vars","severity":2,"message":"'a' is assigned a value but never used.","line":193,"column":36934,"nodeType":"Identifier","messageId":"unusedVar","endLine":193,"endColumn":36935,"suggestions":[{"messageId":"removeVar","data":{"varName":"a"},"fix":{"range":[632044,632045],"text":""},"desc":"Remove unused variable 'a'."}]},{"ruleId":"no-undef","severity":2,"message":"'structuredClone' is not defined.","line":193,"column":38558,"nodeType":"Identifier","messageId":"undef","endLine":193,"endColumn":38573},{"ruleId":"compat/compat","severity":2,"message":"structuredClone is not supported in Safari 14, Firefox 85, Edge 88, Chrome 88","line":193,"column":38558,"nodeType":"CallExpression","endLine":193,"endColumn":38576},{"ruleId":"no-undef","severity":2,"message":"'structuredClone' is not defined.","line":193,"column":38579,"nodeType":"Identifier","messageId":"undef","endLine":193,"endColumn":38594},{"ruleId":"compat/compat","severity":2,"message":"structuredClone is not supported in Safari 14, Firefox 85, Edge 88, Chrome 88","line":193,"column":38579,"nodeType":"CallExpression","endLine":193,"endColumn":38597},{"ruleId":"no-undef","severity":2,"message":"'structuredClone' is not defined.","line":193,"column":38600,"nodeType":"Identifier","messageId":"undef","endLine":193,"endColumn":38615},{"ruleId":"compat/compat","severity":2,"message":"structuredClone is not supported in Safari 14, Firefox 85, Edge 88, Chrome 88","line":193,"column":38600,"nodeType":"CallExpression","endLine":193,"endColumn":38618},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":193,"column":39310,"nodeType":"MemberExpression","messageId":"unexpected","endLine":193,"endColumn":39322},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":193,"column":39693,"nodeType":"MemberExpression","messageId":"unexpected","endLine":193,"endColumn":39705},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":193,"column":41398,"nodeType":"MemberExpression","messageId":"unexpected","endLine":193,"endColumn":41410},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":196,"column":166,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":196,"endColumn":346,"fix":{"range":[636874,636877],"text":"let"}},{"ruleId":"compat/compat","severity":2,"message":"AudioContext is not supported in Safari 14","line":196,"column":761,"nodeType":"NewExpression","endLine":196,"endColumn":793},{"ruleId":"no-undef","severity":2,"message":"'AudioContext' is not defined.","line":196,"column":765,"nodeType":"Identifier","messageId":"undef","endLine":196,"endColumn":777},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":196,"column":806,"nodeType":"MemberExpression","messageId":"unexpected","endLine":196,"endColumn":818},{"ruleId":"no-unused-vars","severity":2,"message":"'a' is assigned a value but never used.","line":196,"column":5946,"nodeType":"Identifier","messageId":"unusedVar","endLine":196,"endColumn":5947,"suggestions":[{"messageId":"removeVar","data":{"varName":"a"},"fix":{"range":[642646,642658],"text":""},"desc":"Remove unused variable 'a'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'n' is assigned a value but never used.","line":202,"column":889,"nodeType":"Identifier","messageId":"unusedVar","endLine":202,"endColumn":890},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":205,"column":2552,"nodeType":"Identifier","messageId":"useConst","endLine":205,"endColumn":2553,"fix":{"range":[647244,647249],"text":"const e"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":205,"column":2612,"nodeType":"Identifier","messageId":"useConst","endLine":205,"endColumn":2613,"fix":{"range":[647304,647309],"text":"const a"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":211,"column":175,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":211,"endColumn":264,"fix":{"range":[648718,648721],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'t' is defined but never used.","line":211,"column":443,"nodeType":"Identifier","messageId":"unusedVar","endLine":211,"endColumn":444},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":214,"column":108,"nodeType":"Identifier","messageId":"useConst","endLine":214,"endColumn":109,"fix":{"range":[649529,649572],"text":"const e=function(...t){return e._call(...t)};"}},{"ruleId":"no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":214,"column":209,"nodeType":"Identifier","messageId":"unusedVar","endLine":214,"endColumn":210,"suggestions":[{"messageId":"removeVar","data":{"varName":"e"},"fix":{"range":[649631,649635],"text":""},"desc":"Remove unused variable 'e'."}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":217,"column":109,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":217,"endColumn":238,"fix":{"range":[649889,649892],"text":"let"}},{"ruleId":"no-undef","severity":2,"message":"'Headers' is not defined.","line":217,"column":468,"nodeType":"Identifier","messageId":"undef","endLine":217,"endColumn":475},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":217,"column":558,"nodeType":"Identifier","messageId":"useConst","endLine":217,"endColumn":559,"fix":{"range":[650334,650354],"text":"const t=r.statSync(e);"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":217,"column":656,"nodeType":"Identifier","messageId":"useConst","endLine":217,"endColumn":657,"fix":{"range":[650432,650443],"text":"const n=this;"}},{"ruleId":"no-undef","severity":2,"message":"'ReadableStream' is not defined.","line":217,"column":677,"nodeType":"Identifier","messageId":"undef","endLine":217,"endColumn":691},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":217,"column":999,"nodeType":"Identifier","messageId":"useConst","endLine":217,"endColumn":1000,"fix":{"range":[650775,650802],"text":"const e=new l(this.filePath);"}},{"ruleId":"no-undef","severity":2,"message":"'Headers' is not defined.","line":217,"column":1114,"nodeType":"Identifier","messageId":"undef","endLine":217,"endColumn":1121},{"ruleId":"no-undef","severity":2,"message":"'Blob' is not defined.","line":217,"column":1287,"nodeType":"Identifier","messageId":"undef","endLine":217,"endColumn":1291},{"ruleId":"no-undef","severity":2,"message":"'URL' is not defined.","line":217,"column":1500,"nodeType":"Identifier","messageId":"undef","endLine":217,"endColumn":1503},{"ruleId":"no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":217,"column":1513,"nodeType":"Identifier","messageId":"unusedVar","endLine":217,"endColumn":1514},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":217,"column":1718,"nodeType":"Identifier","messageId":"undef","endLine":217,"endColumn":1725},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":217,"column":1752,"nodeType":"Identifier","messageId":"undef","endLine":217,"endColumn":1759},{"ruleId":"no-undef","severity":2,"message":"'Headers' is not defined.","line":217,"column":1804,"nodeType":"Identifier","messageId":"undef","endLine":217,"endColumn":1811},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":217,"column":1931,"nodeType":"Identifier","messageId":"undef","endLine":217,"endColumn":1938},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":217,"column":1954,"nodeType":"Identifier","messageId":"undef","endLine":217,"endColumn":1961},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":217,"column":2604,"nodeType":"Identifier","messageId":"useConst","endLine":217,"endColumn":2605},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":217,"column":2626,"nodeType":"Identifier","messageId":"useConst","endLine":217,"endColumn":2627,"fix":{"range":[652380,652417],"text":"const t=a.join(this.path,e),n=new l(t);"}},{"ruleId":"no-undef","severity":2,"message":"'Buffer' is not defined.","line":217,"column":2685,"nodeType":"Identifier","messageId":"undef","endLine":217,"endColumn":2691},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":217,"column":2724,"nodeType":"Identifier","messageId":"useConst","endLine":217,"endColumn":2725,"fix":{"range":[652500,652526],"text":"const s=a.join(this.path,e);"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":217,"column":2843,"nodeType":"MemberExpression","messageId":"unexpected","endLine":217,"endColumn":2855,"suggestions":[{"fix":{"range":[652623,652691],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"no-undef","severity":2,"message":"'caches' is not defined.","line":217,"column":3592,"nodeType":"Identifier","messageId":"undef","endLine":217,"endColumn":3598},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":217,"column":3635,"nodeType":"MemberExpression","messageId":"unexpected","endLine":217,"endColumn":3647,"suggestions":[{"fix":{"range":[653415,653483],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"prefer-const","severity":2,"message":"'m' is never reassigned. Use 'const' instead.","line":217,"column":4211,"nodeType":"Identifier","messageId":"useConst","endLine":217,"endColumn":4212},{"ruleId":"prefer-const","severity":2,"message":"'g' is never reassigned. Use 'const' instead.","line":217,"column":4220,"nodeType":"Identifier","messageId":"useConst","endLine":217,"endColumn":4221},{"ruleId":"prefer-const","severity":2,"message":"'_' is never reassigned. Use 'const' instead.","line":217,"column":4248,"nodeType":"Identifier","messageId":"useConst","endLine":217,"endColumn":4249},{"ruleId":"prefer-const","severity":2,"message":"'w' is never reassigned. Use 'const' instead.","line":217,"column":4368,"nodeType":"Identifier","messageId":"useConst","endLine":217,"endColumn":4369},{"ruleId":"prefer-const","severity":2,"message":"'y' is never reassigned. Use 'const' instead.","line":217,"column":4392,"nodeType":"Identifier","messageId":"useConst","endLine":217,"endColumn":4393},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":217,"column":4461,"nodeType":"Identifier","messageId":"useConst","endLine":217,"endColumn":4462,"fix":{"range":[654237,654242],"text":"const n"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":217,"column":4476,"nodeType":"Identifier","messageId":"useConst","endLine":217,"endColumn":4477,"fix":{"range":[654252,654275],"text":"const t=await e.match(n);"}},{"ruleId":"no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":217,"column":4515,"nodeType":"Identifier","messageId":"unusedVar","endLine":217,"endColumn":4516},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":217,"column":4905,"nodeType":"MemberExpression","messageId":"unexpected","endLine":217,"endColumn":4917,"suggestions":[{"fix":{"range":[654685,654746],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"no-undef","severity":2,"message":"'Response' is not defined.","line":217,"column":5415,"nodeType":"Identifier","messageId":"undef","endLine":217,"endColumn":5423},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":217,"column":5879,"nodeType":"MemberExpression","messageId":"unexpected","endLine":217,"endColumn":5891},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":217,"column":6131,"nodeType":"Identifier","messageId":"useConst","endLine":217,"endColumn":6132,"fix":{"range":[655907,655924],"text":"const l=s+n.length;"}},{"ruleId":"prefer-const","severity":2,"message":"'e' is never reassigned. Use 'const' instead.","line":217,"column":6160,"nodeType":"Identifier","messageId":"useConst","endLine":217,"endColumn":6161,"fix":{"range":[655936,655960],"text":"const e=new Uint8Array(r);"}},{"ruleId":"no-undef","severity":2,"message":"'Response' is not defined.","line":217,"column":6435,"nodeType":"Identifier","messageId":"undef","endLine":217,"endColumn":6443},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":217,"column":6479,"nodeType":"MemberExpression","messageId":"unexpected","endLine":217,"endColumn":6491,"suggestions":[{"fix":{"range":[656259,656321],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":217,"column":6657,"nodeType":"Identifier","messageId":"useConst","endLine":217,"endColumn":6658,"fix":{"range":[656433,656456],"text":"const a=await h(e,t,n,r);"}},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":217,"column":6701,"nodeType":"Identifier","messageId":"useConst","endLine":217,"endColumn":6702,"fix":{"range":[656477,656518],"text":"const s=new TextDecoder(\"utf-8\").decode(a);"}},{"ruleId":"no-undef","severity":2,"message":"'TextDecoder' is not defined.","line":217,"column":6707,"nodeType":"Identifier","messageId":"undef","endLine":217,"endColumn":6718},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":220,"column":74,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":220,"endColumn":227,"fix":{"range":[656852,656855],"text":"let"}},{"ruleId":"no-undef","severity":2,"message":"'self' is not defined.","line":220,"column":296,"nodeType":"Identifier","messageId":"undef","endLine":220,"endColumn":300},{"ruleId":"no-undef","severity":2,"message":"'self' is not defined.","line":220,"column":347,"nodeType":"Identifier","messageId":"undef","endLine":220,"endColumn":351},{"ruleId":"no-undef","severity":2,"message":"'self' is not defined.","line":220,"column":445,"nodeType":"Identifier","messageId":"undef","endLine":220,"endColumn":449},{"ruleId":"no-undef","severity":2,"message":"'self' is not defined.","line":220,"column":474,"nodeType":"Identifier","messageId":"undef","endLine":220,"endColumn":478},{"ruleId":"no-undef","severity":2,"message":"'self' is not defined.","line":220,"column":499,"nodeType":"Identifier","messageId":"undef","endLine":220,"endColumn":503},{"ruleId":"no-undef","severity":2,"message":"'URL' is not defined.","line":220,"column":1205,"nodeType":"Identifier","messageId":"undef","endLine":220,"endColumn":1208},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":220,"column":4216,"nodeType":"MemberExpression","messageId":"unexpected","endLine":220,"endColumn":4228},{"ruleId":"no-fallthrough","severity":2,"message":"Expected a 'break' statement before 'case'.","line":220,"column":4315,"nodeType":"SwitchCase","messageId":"case","endLine":220,"endColumn":4329},{"ruleId":"prefer-const","severity":2,"message":"'s' is never reassigned. Use 'const' instead.","line":220,"column":6034,"nodeType":"Identifier","messageId":"useConst","endLine":220,"endColumn":6035},{"ruleId":"prefer-const","severity":2,"message":"'o' is never reassigned. Use 'const' instead.","line":220,"column":6116,"nodeType":"Identifier","messageId":"useConst","endLine":220,"endColumn":6117},{"ruleId":"no-undef","severity":2,"message":"'URL' is not defined.","line":220,"column":7698,"nodeType":"Identifier","messageId":"undef","endLine":220,"endColumn":7701},{"ruleId":"no-unused-vars","severity":2,"message":"'i' is assigned a value but never used.","line":223,"column":70,"nodeType":"Identifier","messageId":"unusedVar","endLine":223,"endColumn":71,"suggestions":[{"messageId":"removeVar","data":{"varName":"i"},"fix":{"range":[664914,664927],"text":""},"desc":"Remove unused variable 'i'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'o' is assigned a value but never used.","line":223,"column":83,"nodeType":"Identifier","messageId":"unusedVar","endLine":223,"endColumn":84,"suggestions":[{"messageId":"removeVar","data":{"varName":"o"},"fix":{"range":[664927,664932],"text":""},"desc":"Remove unused variable 'o'."}]},{"ruleId":"prefer-const","severity":2,"message":"'l' is never reassigned. Use 'const' instead.","line":223,"column":7890,"nodeType":"Identifier","messageId":"useConst","endLine":223,"endColumn":7891},{"ruleId":"prefer-const","severity":2,"message":"'u' is never reassigned. Use 'const' instead.","line":223,"column":7895,"nodeType":"Identifier","messageId":"useConst","endLine":223,"endColumn":7896},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":226,"column":354,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":226,"endColumn":513,"fix":{"range":[673465,673468],"text":"let"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":226,"column":1202,"nodeType":"Identifier","messageId":"useConst","endLine":226,"endColumn":1203,"fix":{"range":[674309,674325],"text":"const n=Number(t);"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":226,"column":2219,"nodeType":"Identifier","messageId":"useConst","endLine":226,"endColumn":2220,"fix":{"range":[675326,675346],"text":"const a=n[n.length-1];"}},{"ruleId":"prefer-const","severity":2,"message":"'t' is never reassigned. Use 'const' instead.","line":226,"column":4089,"nodeType":"Identifier","messageId":"useConst","endLine":226,"endColumn":4090,"fix":{"range":[677196,677237],"text":"const t=r.reduce(((t,n)=>t+n**e),0)**(1/e);"}},{"ruleId":"prefer-const","severity":2,"message":"'n' is never reassigned. Use 'const' instead.","line":226,"column":5281,"nodeType":"Identifier","messageId":"useConst","endLine":226,"endColumn":5282},{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":226,"column":5304,"nodeType":"Identifier","messageId":"useConst","endLine":226,"endColumn":5305},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":226,"column":5329,"nodeType":"Identifier","messageId":"useConst","endLine":226,"endColumn":5330,"fix":{"range":[678388,678463],"text":"const n=this.dims.slice(0,e),r=this.dims.slice(e,t+1),a=this.dims.slice(t+1);"}},{"ruleId":"no-prototype-builtins","severity":2,"message":"Do not access Object.prototype method 'hasOwnProperty' from target object.","line":226,"column":6165,"nodeType":"CallExpression","messageId":"prototypeBuildIn","endLine":226,"endColumn":6179,"suggestions":[{"messageId":"callObjectPrototype","data":{"prop":"hasOwnProperty"},"fix":{"range":[679274,679291],"text":"Object.prototype.hasOwnProperty.call(i, "},"desc":"Call Object.prototype.hasOwnProperty explicitly."}]},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":226,"column":6460,"nodeType":"Identifier","messageId":"useConst","endLine":226,"endColumn":6461,"fix":{"range":[679567,679622],"text":"const d=(0,r.interpolate_data)(e.data,[i,l,u],[t,n],a,s);"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":226,"column":11391,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":226,"endColumn":11402,"fix":{"range":[684502,684505],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":226,"column":11433,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":226,"endColumn":11457,"fix":{"range":[684544,684547],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":226,"column":11718,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":226,"endColumn":11744,"fix":{"range":[684829,684832],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":226,"column":11751,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":226,"endColumn":11760,"fix":{"range":[684862,684865],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":226,"column":11793,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":226,"endColumn":11805,"fix":{"range":[684904,684907],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":226,"column":11957,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":226,"endColumn":11962,"fix":{"range":[685068,685071],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":226,"column":12268,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":226,"endColumn":12274,"fix":{"range":[685379,685382],"text":"let"}},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\/.","line":226,"column":12463,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":226,"endColumn":12464,"suggestions":[{"messageId":"removeEscape","fix":{"range":[685574,685575],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[685574,685574],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-undef","severity":2,"message":"'URL' is not defined.","line":226,"column":12493,"nodeType":"Identifier","messageId":"undef","endLine":226,"endColumn":12496},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":226,"column":12519,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":226,"endColumn":12528,"fix":{"range":[685630,685633],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":229,"column":29544,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":229,"endColumn":46119}],"suppressedMessages":[],"errorCount":2422,"fatalErrorCount":0,"warningCount":50,"fixableErrorCount":896,"fixableWarningCount":0,"source":"var e,t,n={\"./node_modules/onnxruntime-web/dist/ort-wasm-simd-threaded.jsep.wasm\":\n/*!****************************************************************************!*\\\n  !*** ./node_modules/onnxruntime-web/dist/ort-wasm-simd-threaded.jsep.wasm ***!\n  \\****************************************************************************/(e,t,n)=>{e.exports=n.p+\"ort-wasm-simd-threaded.jsep.wasm\"},\"?2ce3\":\n/*!**********************************!*\\\n  !*** onnxruntime-node (ignored) ***!\n  \\**********************************/()=>{},\"?7a2c\":\n/*!********************!*\\\n  !*** fs (ignored) ***!\n  \\********************/()=>{},\"?a42a\":\n/*!**********************!*\\\n  !*** path (ignored) ***!\n  \\**********************/()=>{},\"?2b25\":\n/*!***********************!*\\\n  !*** sharp (ignored) ***!\n  \\***********************/()=>{},\"?569f\":\n/*!********************!*\\\n  !*** fs (ignored) ***!\n  \\********************/()=>{},\"?3f59\":\n/*!**********************!*\\\n  !*** path (ignored) ***!\n  \\**********************/()=>{},\"?154a\":\n/*!*********************!*\\\n  !*** url (ignored) ***!\n  \\*********************/()=>{},\"./node_modules/@huggingface/jinja/dist/index.js\":\n/*!*******************************************************!*\\\n  !*** ./node_modules/@huggingface/jinja/dist/index.js ***!\n  \\*******************************************************/(e,t,n)=>{n.r(t),n.d(t,{Environment:()=>Q,Interpreter:()=>Y,Template:()=>ee,parse:()=>O,tokenize:()=>d});var r=Object.freeze({Text:\"Text\",NumericLiteral:\"NumericLiteral\",BooleanLiteral:\"BooleanLiteral\",StringLiteral:\"StringLiteral\",Identifier:\"Identifier\",Equals:\"Equals\",OpenParen:\"OpenParen\",CloseParen:\"CloseParen\",OpenStatement:\"OpenStatement\",CloseStatement:\"CloseStatement\",OpenExpression:\"OpenExpression\",CloseExpression:\"CloseExpression\",OpenSquareBracket:\"OpenSquareBracket\",CloseSquareBracket:\"CloseSquareBracket\",OpenCurlyBracket:\"OpenCurlyBracket\",CloseCurlyBracket:\"CloseCurlyBracket\",Comma:\"Comma\",Dot:\"Dot\",Colon:\"Colon\",Pipe:\"Pipe\",CallOperator:\"CallOperator\",AdditiveBinaryOperator:\"AdditiveBinaryOperator\",MultiplicativeBinaryOperator:\"MultiplicativeBinaryOperator\",ComparisonBinaryOperator:\"ComparisonBinaryOperator\",UnaryOperator:\"UnaryOperator\",Set:\"Set\",If:\"If\",For:\"For\",In:\"In\",Is:\"Is\",NotIn:\"NotIn\",Else:\"Else\",EndIf:\"EndIf\",ElseIf:\"ElseIf\",EndFor:\"EndFor\",And:\"And\",Or:\"Or\",Not:\"UnaryOperator\",Macro:\"Macro\",EndMacro:\"EndMacro\"}),a=Object.freeze({set:r.Set,for:r.For,in:r.In,is:r.Is,if:r.If,else:r.Else,endif:r.EndIf,elif:r.ElseIf,endfor:r.EndFor,and:r.And,or:r.Or,not:r.Not,\"not in\":r.NotIn,macro:r.Macro,endmacro:r.EndMacro,true:r.BooleanLiteral,false:r.BooleanLiteral,True:r.BooleanLiteral,False:r.BooleanLiteral}),s=class{constructor(e,t){this.value=e,this.type=t}};function i(e){return/\\w/.test(e)}function o(e){return/[0-9]/.test(e)}var l=[[\"{%\",r.OpenStatement],[\"%}\",r.CloseStatement],[\"{{\",r.OpenExpression],[\"}}\",r.CloseExpression],[\"(\",r.OpenParen],[\")\",r.CloseParen],[\"{\",r.OpenCurlyBracket],[\"}\",r.CloseCurlyBracket],[\"[\",r.OpenSquareBracket],[\"]\",r.CloseSquareBracket],[\",\",r.Comma],[\".\",r.Dot],[\":\",r.Colon],[\"|\",r.Pipe],[\"<=\",r.ComparisonBinaryOperator],[\">=\",r.ComparisonBinaryOperator],[\"==\",r.ComparisonBinaryOperator],[\"!=\",r.ComparisonBinaryOperator],[\"<\",r.ComparisonBinaryOperator],[\">\",r.ComparisonBinaryOperator],[\"+\",r.AdditiveBinaryOperator],[\"-\",r.AdditiveBinaryOperator],[\"*\",r.MultiplicativeBinaryOperator],[\"/\",r.MultiplicativeBinaryOperator],[\"%\",r.MultiplicativeBinaryOperator],[\"=\",r.Equals]],u=new Map([[\"n\",\"\\n\"],[\"t\",\"\\t\"],[\"r\",\"\\r\"],[\"b\",\"\\b\"],[\"f\",\"\\f\"],[\"v\",\"\\v\"],[\"'\",\"'\"],['\"','\"'],[\"\\\\\",\"\\\\\"]]);function d(e,t={}){const n=[],d=function(e,t={}){return e.endsWith(\"\\n\")&&(e=e.slice(0,-1)),e=e.replace(/{#.*?#}/gs,\"{##}\"),t.lstrip_blocks&&(e=e.replace(/^[ \\t]*({[#%])/gm,\"$1\")),t.trim_blocks&&(e=e.replace(/([#%]})\\n/g,\"$1\")),e.replace(/{##}/g,\"\").replace(/-%}\\s*/g,\"%}\").replace(/\\s*{%-/g,\"{%\").replace(/-}}\\s*/g,\"}}\").replace(/\\s*{{-/g,\"{{\")}(e,t);let c=0;const p=e=>{let t=\"\";for(;e(d[c]);)if(\"\\\\\"!==d[c]){if(t+=d[c++],c>=d.length)throw new SyntaxError(\"Unexpected end of input\")}else{if(++c,c>=d.length)throw new SyntaxError(\"Unexpected end of input\");const e=d[c++],n=u.get(e);if(void 0===n)throw new SyntaxError(`Unexpected escaped character: ${e}`);t+=n}return t};e:for(;c<d.length;){const e=n.at(-1)?.type;if(void 0===e||e===r.CloseStatement||e===r.CloseExpression){let e=\"\";for(;c<d.length&&(\"{\"!==d[c]||\"%\"!==d[c+1]&&\"{\"!==d[c+1]);)e+=d[c++];if(e.length>0){n.push(new s(e,r.Text));continue}}p((e=>/\\s/.test(e)));const t=d[c];if(\"-\"===t||\"+\"===t){const e=n.at(-1)?.type;if(e===r.Text||void 0===e)throw new SyntaxError(`Unexpected character: ${t}`);switch(e){case r.Identifier:case r.NumericLiteral:case r.BooleanLiteral:case r.StringLiteral:case r.CloseParen:case r.CloseSquareBracket:break;default:{++c;const e=p(o);n.push(new s(`${t}${e}`,e.length>0?r.NumericLiteral:r.UnaryOperator));continue}}}for(const[e,t]of l){if(d.slice(c,c+e.length)===e){n.push(new s(e,t)),c+=e.length;continue e}}if(\"'\"!==t&&'\"'!==t)if(o(t)){const e=p(o);n.push(new s(e,r.NumericLiteral))}else{if(!i(t))throw new SyntaxError(`Unexpected character: ${t}`);{const e=p(i),t=Object.hasOwn(a,e)?a[e]:r.Identifier;t===r.In&&n.at(-1)?.type===r.Not?(n.pop(),n.push(new s(\"not in\",r.NotIn))):n.push(new s(e,t))}}else{++c;const e=p((e=>e!==t));n.push(new s(e,r.StringLiteral)),++c}}return n}var c=class{type=\"Statement\"},p=class extends c{constructor(e){super(),this.body=e}type=\"Program\"},h=class extends c{constructor(e,t,n){super(),this.test=e,this.body=t,this.alternate=n}type=\"If\"},m=class extends c{constructor(e,t,n,r){super(),this.loopvar=e,this.iterable=t,this.body=n,this.defaultBlock=r}type=\"For\"},f=class extends c{constructor(e,t){super(),this.assignee=e,this.value=t}type=\"Set\"},g=class extends c{constructor(e,t,n){super(),this.name=e,this.args=t,this.body=n}type=\"Macro\"},_=class extends c{type=\"Expression\"},w=class extends _{constructor(e,t,n){super(),this.object=e,this.property=t,this.computed=n}type=\"MemberExpression\"},y=class extends _{constructor(e,t){super(),this.callee=e,this.args=t}type=\"CallExpression\"},b=class extends _{constructor(e){super(),this.value=e}type=\"Identifier\"},v=class extends _{constructor(e){super(),this.value=e}type=\"Literal\"},x=class extends v{type=\"NumericLiteral\"},M=class extends v{type=\"StringLiteral\"},T=class extends v{type=\"BooleanLiteral\"},k=class extends v{type=\"ArrayLiteral\"},$=class extends v{type=\"TupleLiteral\"},C=class extends v{type=\"ObjectLiteral\"},S=class extends _{constructor(e,t,n){super(),this.operator=e,this.left=t,this.right=n}type=\"BinaryExpression\"},P=class extends _{constructor(e,t){super(),this.operand=e,this.filter=t}type=\"FilterExpression\"},E=class extends _{constructor(e,t){super(),this.iterable=e,this.test=t}type=\"SelectExpression\"},F=class extends _{constructor(e,t,n){super(),this.operand=e,this.negate=t,this.test=n}type=\"TestExpression\"},A=class extends _{constructor(e,t){super(),this.operator=e,this.argument=t}type=\"UnaryExpression\"},I=class extends _{constructor(e=void 0,t=void 0,n=void 0){super(),this.start=e,this.stop=t,this.step=n}type=\"SliceExpression\"},z=class extends _{constructor(e,t){super(),this.key=e,this.value=t}type=\"KeywordArgumentExpression\"};function O(e){const t=new p([]);let n=0;function a(t,r){const a=e[n++];if(!a||a.type!==t)throw new Error(`Parser Error: ${r}. ${a.type} !== ${t}.`);return a}function s(){switch(e[n].type){case r.Text:return new M(a(r.Text,\"Expected text token\").value);case r.OpenStatement:return function(){let t;switch(a(r.OpenStatement,\"Expected opening statement token\"),e[n].type){case r.Set:++n,t=l(),a(r.CloseStatement,\"Expected closing statement token\");break;case r.If:++n,t=u(),a(r.OpenStatement,\"Expected {% token\"),a(r.EndIf,\"Expected endif token\"),a(r.CloseStatement,\"Expected %} token\");break;case r.Macro:++n,t=function(){const e=q();if(\"Identifier\"!==e.type)throw new SyntaxError(\"Expected identifier following macro statement\");const t=R();a(r.CloseStatement,\"Expected closing statement token\");const n=[];for(;i(r.OpenStatement,r.EndMacro);)n.push(s());return new g(e,t,n)}(),a(r.OpenStatement,\"Expected {% token\"),a(r.EndMacro,\"Expected endmacro token\"),a(r.CloseStatement,\"Expected %} token\");break;case r.For:++n,t=function(){const e=d(!0);if(!(e instanceof b||e instanceof $))throw new SyntaxError(`Expected identifier/tuple for the loop variable, got ${e.type} instead`);a(r.In,\"Expected `in` keyword following loop variable\");const t=c();a(r.CloseStatement,\"Expected closing statement token\");const l=[];for(;i(r.OpenStatement,r.EndFor)&&i(r.OpenStatement,r.Else);)l.push(s());const u=[];if(o(r.OpenStatement,r.Else))for(++n,++n,a(r.CloseStatement,\"Expected closing statement token\");i(r.OpenStatement,r.EndFor);)u.push(s());return new m(e,t,l,u)}(),a(r.OpenStatement,\"Expected {% token\"),a(r.EndFor,\"Expected endfor token\"),a(r.CloseStatement,\"Expected %} token\");break;default:throw new SyntaxError(`Unknown statement type: ${e[n].type}`)}return t}();case r.OpenExpression:return function(){a(r.OpenExpression,\"Expected opening expression token\");const e=c();return a(r.CloseExpression,\"Expected closing expression token\"),e}();default:throw new SyntaxError(`Unexpected token type: ${e[n].type}`)}}function i(...t){return n+t.length<=e.length&&t.some(((t,r)=>t!==e[n+r].type))}function o(...t){return n+t.length<=e.length&&t.every(((t,r)=>t===e[n+r].type))}function l(){const e=c();if(o(r.Equals)){++n;const t=l();return new f(e,t)}return e}function u(){const t=c();a(r.CloseStatement,\"Expected closing statement token\");const i=[],l=[];for(;e[n]?.type!==r.OpenStatement||e[n+1]?.type!==r.ElseIf&&e[n+1]?.type!==r.Else&&e[n+1]?.type!==r.EndIf;)i.push(s());if(e[n]?.type===r.OpenStatement&&e[n+1]?.type!==r.EndIf)if(++n,o(r.ElseIf))a(r.ElseIf,\"Expected elseif token\"),l.push(u());else for(a(r.Else,\"Expected else token\"),a(r.CloseStatement,\"Expected closing statement token\");e[n]?.type!==r.OpenStatement||e[n+1]?.type!==r.EndIf;)l.push(s());return new h(t,i,l)}function d(e=!1){const t=e?q:c,a=[t()],s=o(r.Comma);for(;s&&(++n,a.push(t()),o(r.Comma)););return s?new $(a):a[0]}function c(){return function(){const e=_();if(o(r.If)){++n;const t=_();if(o(r.Else)){++n;const r=_();return new h(t,[e],[r])}return new E(e,t)}return e}()}function _(){let t=v();for(;o(r.Or);){const r=e[n];++n;const a=v();t=new S(r,t,a)}return t}function v(){let t=O();for(;o(r.And);){const r=e[n];++n;const a=O();t=new S(r,t,a)}return t}function O(){let t;for(;o(r.Not);){const r=e[n];++n;const a=O();t=new A(r,a)}return t??function(){let t=B();for(;o(r.ComparisonBinaryOperator)||o(r.In)||o(r.NotIn);){const r=e[n];++n;const a=B();t=new S(r,t,a)}return t}()}function B(){let t=V();for(;o(r.AdditiveBinaryOperator);){const r=e[n];++n;const a=V();t=new S(r,t,a)}return t}function L(){const t=function(){let t=q();for(;o(r.Dot)||o(r.OpenSquareBracket);){const s=e[n];let i;++n;const o=s.type!==r.Dot;if(o)i=N(),a(r.CloseSquareBracket,\"Expected closing square bracket\");else if(i=q(),\"Identifier\"!==i.type)throw new SyntaxError(\"Expected identifier following dot operator\");t=new w(t,i,o)}return t}();return o(r.OpenParen)?D(t):t}function D(e){let t=new y(e,R());return o(r.OpenParen)&&(t=D(t)),t}function R(){a(r.OpenParen,\"Expected opening parenthesis for arguments list\");const e=function(){const e=[];for(;!o(r.CloseParen);){let t=c();if(o(r.Equals)){if(++n,!(t instanceof b))throw new SyntaxError(\"Expected identifier for keyword argument\");const e=c();t=new z(t,e)}e.push(t),o(r.Comma)&&++n}return e}();return a(r.CloseParen,\"Expected closing parenthesis for arguments list\"),e}function N(){const e=[];let t=!1;for(;!o(r.CloseSquareBracket);)o(r.Colon)?(e.push(void 0),++n,t=!0):(e.push(c()),o(r.Colon)&&(++n,t=!0));if(0===e.length)throw new SyntaxError(\"Expected at least one argument for member/slice expression\");if(t){if(e.length>3)throw new SyntaxError(\"Expected 0-3 arguments for slice expression\");return new I(...e)}return e[0]}function V(){let t=j();for(;o(r.MultiplicativeBinaryOperator);){const r=e[n];++n;const a=j();t=new S(r,t,a)}return t}function j(){let e=function(){let e=L();for(;o(r.Pipe);){++n;let t=q();if(!(t instanceof b))throw new SyntaxError(\"Expected identifier for the filter\");o(r.OpenParen)&&(t=D(t)),e=new P(e,t)}return e}();for(;o(r.Is);){++n;const t=o(r.Not);t&&++n;let a=q();if(a instanceof T&&(a=new b(a.value.toString())),!(a instanceof b))throw new SyntaxError(\"Expected identifier for the test\");e=new F(e,t,a)}return e}function q(){const t=e[n];switch(t.type){case r.NumericLiteral:return++n,new x(Number(t.value));case r.StringLiteral:return++n,new M(t.value);case r.BooleanLiteral:return++n,new T(\"true\"===t.value.toLowerCase());case r.Identifier:return++n,new b(t.value);case r.OpenParen:{++n;const t=d();if(e[n].type!==r.CloseParen)throw new SyntaxError(`Expected closing parenthesis, got ${e[n].type} instead`);return++n,t}case r.OpenSquareBracket:{++n;const e=[];for(;!o(r.CloseSquareBracket);)e.push(c()),o(r.Comma)&&++n;return++n,new k(e)}case r.OpenCurlyBracket:{++n;const e=new Map;for(;!o(r.CloseCurlyBracket);){const t=c();a(r.Colon,\"Expected colon between key and value in object literal\");const s=c();e.set(t,s),o(r.Comma)&&++n}return++n,new C(e)}default:throw new SyntaxError(`Unexpected token: ${t.type}`)}}for(;n<e.length;)t.body.push(s());return t}function B(e,t,n=1){void 0===t&&(t=e,e=0);const r=[];for(let a=e;a<t;a+=n)r.push(a);return r}function L(e,t,n,r=1){const a=Math.sign(r);a>=0?(t=(t??=0)<0?Math.max(e.length+t,0):Math.min(t,e.length),n=(n??=e.length)<0?Math.max(e.length+n,0):Math.min(n,e.length)):(t=(t??=e.length-1)<0?Math.max(e.length+t,-1):Math.min(t,e.length-1),n=(n??=-1)<-1?Math.max(e.length+n,-1):Math.min(n,e.length-1));const s=[];for(let i=t;a*i<a*n;i+=r)s.push(e[i]);return s}function D(e){return e.replace(/\\b\\w/g,(e=>e.toUpperCase()))}var R=class{type=\"RuntimeValue\";value;builtins=new Map;constructor(e=void 0){this.value=e}__bool__(){return new j(!!this.value)}},N=class extends R{type=\"NumericValue\"},V=class extends R{type=\"StringValue\";builtins=new Map([[\"upper\",new H((()=>new V(this.value.toUpperCase())))],[\"lower\",new H((()=>new V(this.value.toLowerCase(